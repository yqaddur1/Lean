/-
Copyright (c) 2022 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/
import ring_theory.valuation.integers
import ring_theory.ideal.local_ring
import ring_theory.localization.fraction_ring
import ring_theory.discrete_valuation_ring
import tactic.field_simp

/-!
# Valuation Rings

A valuation ring is a domain such that for every pair of elements `a b`, either `a` divides
`b` or vice-versa.

Any valuation ring induces a natural valuation on its fraction field, as we show in this file.
Namely, given the following instances:
`[comm_ring A] [is_domain A] [valuation_ring A] [field K] [algebra A K] [is_fraction_ring A K]`,
there is a natural valuation `valuation A K` on `K` with values in `value_group A K` where
the image of `A` under `algebra_map A K` agrees with `(valuation A K).integer`.

We also show that valuation rings are local and that their lattice of ideals is totally ordered.
-/

universes u v w

/-- An integral domain is called a `valuation ring` provided that for any pair
of elements `a b : A`, either `a` divides `b` or vice versa. -/
class valuation_ring (A : Type u) [comm_ring A] [is_domain A] : Prop :=
(cond [] : ‚àÄ a b : A, ‚àÉ c : A, a * c = b ‚à® b * c = a)

namespace valuation_ring

section
variables (A : Type u) [comm_ring A]
variables (K : Type v) [field K] [algebra A K]

/-- The value group of the valuation ring `A`. -/
def value_group : Type v := quotient (mul_action.orbit_rel AÀ£ K)

instance : inhabited (value_group A K) := ‚ü®quotient.mk' 0‚ü©

instance : has_le (value_group A K) := has_le.mk $ Œª x y,
quotient.lift_on‚ÇÇ' x y (Œª a b, ‚àÉ c : A, c ‚Ä¢ b = a)
begin
  rintros _ _ a b ‚ü®c,rfl‚ü© ‚ü®d,rfl‚ü©, ext,
  split,
  { rintros ‚ü®e,he‚ü©, use ((c‚Åª¬π : AÀ£) * e * d),
    apply_fun (Œª t, c‚Åª¬π ‚Ä¢ t) at he,
    simpa [mul_smul] using he },
  { rintros ‚ü®e,he‚ü©, dsimp,
    use (d‚Åª¬π : AÀ£) * c * e,
    erw [‚Üê he, ‚Üê mul_smul, ‚Üê mul_smul],
    congr' 1,
    rw mul_comm,
    simp only [‚Üê mul_assoc, ‚Üê units.coe_mul, mul_inv_self, one_mul] }
end

instance : has_zero (value_group A K) := ‚ü®quotient.mk' 0‚ü©
instance : has_one (value_group A K) := ‚ü®quotient.mk' 1‚ü©

instance : has_mul (value_group A K) := has_mul.mk $ Œª x y,
quotient.lift_on‚ÇÇ' x y (Œª a b, quotient.mk' $ a * b)
begin
  rintros _ _ a b ‚ü®c,rfl‚ü© ‚ü®d,rfl‚ü©,
  apply quotient.sound',
  dsimp,
  use c * d,
  simp only [mul_smul, algebra.smul_def, units.smul_def, ring_hom.map_mul,
    units.coe_mul],
  ring,
end

instance : has_inv (value_group A K) := has_inv.mk $ Œª x,
quotient.lift_on' x (Œª a, quotient.mk' a‚Åª¬π)
begin
  rintros _ a ‚ü®b,rfl‚ü©,
  apply quotient.sound',
  use b‚Åª¬π,
  dsimp,
  rw [units.smul_def, units.smul_def, algebra.smul_def, algebra.smul_def,
    mul_inv‚ÇÄ, ring_hom.map_units_inv],
end

variables [is_domain A] [valuation_ring A] [is_fraction_ring A K]

protected lemma le_total (a b : value_group A K) : a ‚â§ b ‚à® b ‚â§ a :=
begin
  rcases a with ‚ü®a‚ü©, rcases b with ‚ü®b‚ü©,
  obtain ‚ü®xa,ya,hya,rfl‚ü© : ‚àÉ (a b : A), _ := is_fraction_ring.div_surjective a,
  obtain ‚ü®xb,yb,hyb,rfl‚ü© : ‚àÉ (a b : A), _ := is_fraction_ring.div_surjective b,
  have : (algebra_map A K) ya ‚â† 0 :=
    is_fraction_ring.to_map_ne_zero_of_mem_non_zero_divisors hya,
  have : (algebra_map A K) yb ‚â† 0 :=
    is_fraction_ring.to_map_ne_zero_of_mem_non_zero_divisors hyb,
  obtain ‚ü®c,(h|h)‚ü© := valuation_ring.cond (xa * yb) (xb * ya),
  { right,
    use c,
    rw algebra.smul_def,
    field_simp,
    simp only [‚Üê ring_hom.map_mul, ‚Üê h], congr' 1, ring },
  { left,
    use c,
    rw algebra.smul_def,
    field_simp,
    simp only [‚Üê ring_hom.map_mul, ‚Üê h], congr' 1, ring }
end

noncomputable
instance : linear_ordered_comm_group_with_zero (value_group A K) :=
{ le_refl := by { rintro ‚ü®‚ü©, use 1, rw one_smul },
  le_trans := by { rintros ‚ü®a‚ü© ‚ü®b‚ü© ‚ü®c‚ü© ‚ü®e,rfl‚ü© ‚ü®f,rfl‚ü©, use (e * f), rw mul_smul },
  le_antisymm := begin
    rintros ‚ü®a‚ü© ‚ü®b‚ü© ‚ü®e,rfl‚ü© ‚ü®f,hf‚ü©,
    by_cases hb : b = 0, { simp [hb] },
    have : is_unit e,
    { apply is_unit_of_dvd_one,
      use f, rw mul_comm,
      rw [‚Üê mul_smul, algebra.smul_def] at hf,
      nth_rewrite 1 ‚Üê one_mul b at hf,
      rw ‚Üê (algebra_map A K).map_one at hf,
      exact is_fraction_ring.injective _ _
        (cancel_comm_monoid_with_zero.mul_right_cancel_of_ne_zero hb hf).symm },
    apply quotient.sound',
    use [this.unit, rfl],
  end,
  le_total := valuation_ring.le_total _ _,
  decidable_le := by { classical, apply_instance },
  mul_assoc := by { rintros ‚ü®a‚ü© ‚ü®b‚ü© ‚ü®c‚ü©, apply quotient.sound', rw mul_assoc, apply setoid.refl' },
  one_mul := by { rintros ‚ü®a‚ü©, apply quotient.sound', rw one_mul, apply setoid.refl' },
  mul_one := by { rintros ‚ü®a‚ü©, apply quotient.sound', rw mul_one, apply setoid.refl' },
  mul_comm := by { rintros ‚ü®a‚ü© ‚ü®b‚ü©, apply quotient.sound', rw mul_comm, apply setoid.refl' },
  mul_le_mul_left := begin
    rintros ‚ü®a‚ü© ‚ü®b‚ü© ‚ü®c,rfl‚ü© ‚ü®d‚ü©,
    use c, simp only [algebra.smul_def], ring,
  end,
  zero_mul := by { rintros ‚ü®a‚ü©, apply quotient.sound', rw zero_mul, apply setoid.refl' },
  mul_zero := by { rintros ‚ü®a‚ü©, apply quotient.sound', rw mul_zero, apply setoid.refl' },
  zero_le_one := ‚ü®0, by rw zero_smul‚ü©,
  exists_pair_ne := begin
    use [0,1],
    intro c, obtain ‚ü®d,hd‚ü© := quotient.exact' c,
    apply_fun (Œª t, d‚Åª¬π ‚Ä¢ t) at hd,
    simpa using hd,
  end,
  inv_zero := by { apply quotient.sound', rw inv_zero, apply setoid.refl' },
  mul_inv_cancel := begin
    rintros ‚ü®a‚ü© ha,
    apply quotient.sound',
    use 1,
    simp only [one_smul],
    apply (mul_inv_cancel _).symm,
    contrapose ha,
    simp only [not_not] at ha ‚ä¢,
    rw ha, refl,
  end,
  ..(infer_instance : has_le (value_group A K)),
  ..(infer_instance : has_mul (value_group A K)),
  ..(infer_instance : has_inv (value_group A K)),
  ..(infer_instance : has_zero (value_group A K)),
  ..(infer_instance : has_one (value_group A K)) }

/-- Any valuation ring induces a valuation on its fraction field. -/
def valuation : valuation K (value_group A K) :=
{ to_fun := quotient.mk',
  map_zero' := rfl,
  map_one' := rfl,
  map_mul' := Œª _ _, rfl,
  map_add_le_max' := begin
    intros a b,
    obtain ‚ü®xa,ya,hya,rfl‚ü© : ‚àÉ (a b : A), _ := is_fraction_ring.div_surjective a,
    obtain ‚ü®xb,yb,hyb,rfl‚ü© : ‚àÉ (a b : A), _ := is_fraction_ring.div_surjective b,
    have : (algebra_map A K) ya ‚â† 0 :=
      is_fraction_ring.to_map_ne_zero_of_mem_non_zero_divisors hya,
    have : (algebra_map A K) yb ‚â† 0 :=
      is_fraction_ring.to_map_ne_zero_of_mem_non_zero_divisors hyb,
    obtain ‚ü®c,(h|h)‚ü© := valuation_ring.cond (xa * yb) (xb * ya),
    dsimp,
    { apply le_trans _ (le_max_left _ _),
      use (c + 1),
      rw algebra.smul_def,
      field_simp,
      simp only [‚Üê ring_hom.map_mul, ‚Üê ring_hom.map_add, ‚Üê (algebra_map A K).map_one, ‚Üê h],
      congr' 1, ring },
    { apply le_trans _ (le_max_right _ _),
      use (c + 1),
      rw algebra.smul_def,
      field_simp,
      simp only [‚Üê ring_hom.map_mul, ‚Üê ring_hom.map_add, ‚Üê (algebra_map A K).map_one, ‚Üê h],
      congr' 1, ring }
  end }

lemma mem_integer_iff (x : K) : x ‚àà (valuation A K).integer ‚Üî ‚àÉ a : A, algebra_map A K a = x :=
begin
  split,
  { rintros ‚ü®c,rfl‚ü©,
    use c,
    rw [algebra.smul_def, mul_one] },
  { rintro ‚ü®c,rfl‚ü©,
    use c,
    rw [algebra.smul_def, mul_one] }
end

/-- The valuation ring `A` is isomorphic to the ring of integers of its associated valuation. -/
noncomputable def equiv_integer : A ‚âÉ+* (valuation A K).integer :=
ring_equiv.of_bijective (show A ‚Üí‚Çô+* (valuation A K).integer, from
{ to_fun := Œª a, ‚ü®algebra_map A K a, (mem_integer_iff _ _ _).mpr ‚ü®a,rfl‚ü©‚ü©,
  map_mul' := Œª _ _, by { ext1, exact (algebra_map A K).map_mul _ _ },
  map_zero' := by { ext1, exact (algebra_map A K).map_zero },
  map_add' := Œª _ _, by { ext1, exact (algebra_map A K).map_add _ _ } })
begin
  split,
  { intros x y h,
    apply_fun (coe : _ ‚Üí K) at h,
    dsimp at h,
    exact is_fraction_ring.injective _ _ h },
  { rintros ‚ü®a,(ha : a ‚àà (valuation A K).integer)‚ü©,
    rw mem_integer_iff at ha,
    obtain ‚ü®a,rfl‚ü© := ha,
    use [a, rfl] }
end

@[simp]
lemma coe_equiv_integer_apply (a : A) : (equiv_integer A K a : K) = algebra_map A K a := rfl

lemma range_algebra_map_eq : (valuation A K).integer = (algebra_map A K).range :=
by { ext, exact mem_integer_iff _ _ _ }

end

section

variables (A : Type u) [comm_ring A] [is_domain A] [valuation_ring A]

@[priority 100]
instance : local_ring A :=
local_ring.of_is_unit_or_is_unit_one_sub_self
begin
  intros a,
  obtain ‚ü®c,(h|h)‚ü© := valuation_ring.cond a (1-a),
  { left,
    apply is_unit_of_mul_eq_one _ (c+1),
    simp [mul_add, h] },
  { right,
    apply is_unit_of_mul_eq_one _ (c+1),
    simp [mul_add, h] }
end

instance [decidable_rel ((‚â§) : ideal A ‚Üí ideal A ‚Üí Prop)] : linear_order (ideal A) :=
{ le_total := begin
    intros Œ± Œ≤,
    by_cases h : Œ± ‚â§ Œ≤, { exact or.inl h },
    erw not_forall at h,
    push_neg at h,
    obtain ‚ü®a,h‚ÇÅ,h‚ÇÇ‚ü© := h,
    right,
    intros b hb,
    obtain ‚ü®c,(h|h)‚ü© := valuation_ring.cond a b,
    { rw ‚Üê h,
      exact ideal.mul_mem_right _ _ h‚ÇÅ },
    { exfalso, apply h‚ÇÇ, rw ‚Üê h,
      apply ideal.mul_mem_right _ _ hb },
  end,
  decidable_le := infer_instance,
  ..(infer_instance : complete_lattice (ideal A)) }

end

section

variables {ùí™ : Type u} {K : Type v} {Œì : Type w}
  [comm_ring ùí™] [is_domain ùí™] [field K] [algebra ùí™ K]
  [linear_ordered_comm_group_with_zero Œì]
  (v : _root_.valuation K Œì) (hh : v.integers ùí™)

include hh

/-- If `ùí™` satisfies `v.integers ùí™` where `v` is a valuation on a field, then `ùí™`
is a valuation ring. -/
lemma of_integers : valuation_ring ùí™ :=
begin
  constructor,
  intros a b,
  cases le_total (v (algebra_map ùí™ K a)) (v (algebra_map ùí™ K b)),
  { obtain ‚ü®c,hc‚ü© := valuation.integers.dvd_of_le hh h,
    use c, exact or.inr hc.symm },
  { obtain ‚ü®c,hc‚ü© := valuation.integers.dvd_of_le hh h,
    use c, exact or.inl hc.symm }
end

end

section

variables (K : Type u) [field K]

/-- A field is a valuation ring. -/
@[priority 100]
instance of_field : valuation_ring K :=
begin
  constructor,
  intros a b,
  by_cases b = 0,
  { use 0, left, simp [h] },
  { use a * b‚Åª¬π, right, field_simp, rw mul_comm }
end

end

section

variables (A : Type u) [comm_ring A] [is_domain A] [discrete_valuation_ring A]

/-- A DVR is a valuation ring. -/
@[priority 100]
instance of_discrete_valuation_ring : valuation_ring A :=
begin
  constructor,
  intros a b,
  by_cases ha : a = 0, { use 0, right, simp [ha] },
  by_cases hb : b = 0, { use 0, left, simp [hb] },
  obtain ‚ü®œñ,hœñ‚ü© := discrete_valuation_ring.exists_irreducible A,
  obtain ‚ü®m,u,rfl‚ü© := discrete_valuation_ring.eq_unit_mul_pow_irreducible ha hœñ,
  obtain ‚ü®n,v,rfl‚ü© := discrete_valuation_ring.eq_unit_mul_pow_irreducible hb hœñ,
  cases le_total m n with h h,
  { use (u‚Åª¬π * v : AÀ£) * œñ^(n-m), left,
    simp_rw [mul_comm (u : A), units.coe_mul, ‚Üê mul_assoc, mul_assoc _ (u : A)],
    simp only [units.mul_inv, mul_one, mul_comm _ (v : A), mul_assoc, ‚Üê pow_add],
    congr' 2,
    linarith },
  { use (v‚Åª¬π * u : AÀ£) * œñ^(m-n), right,
    simp_rw [mul_comm (v : A), units.coe_mul, ‚Üê mul_assoc, mul_assoc _ (v : A)],
    simp only [units.mul_inv, mul_one, mul_comm _ (u : A), mul_assoc, ‚Üê pow_add],
    congr' 2,
    linarith }
end

end

end valuation_ring
