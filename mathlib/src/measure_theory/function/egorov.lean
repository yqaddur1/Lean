/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import measure_theory.integral.set_integral

/-!
# Egorov theorem

This file contains the Egorov theorem which states that an almost everywhere convergent
sequence on a finite measure space converges uniformly except on an arbitrarily small set.
This theorem is useful for the Vitali convergence theorem as well as theorems regarding
convergence in measure.

## Main results

* `measure_theory.egorov`: Egorov's theorem which shows that a sequence of almost everywhere
  convergent functions converges uniformly except on an arbitrarily small set.

-/

noncomputable theory
open_locale classical measure_theory nnreal ennreal topological_space

namespace measure_theory

open set filter topological_space

variables {Œ± Œ≤ Œπ : Type*} {m : measurable_space Œ±} [metric_space Œ≤] {Œº : measure Œ±}

namespace egorov

/-- Given a sequence of functions `f` and a function `g`, `not_convergent_seq f g n j` is the
set of elements such that `f k x` and `g x` are separated by at least `1 / (n + 1)` for some
`k ‚â• j`.

This definition is useful for Egorov's theorem. -/
def not_convergent_seq [preorder Œπ] (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) (n : ‚Ñï) (j : Œπ) : set Œ± :=
‚ãÉ k (hk : j ‚â§ k), {x | (1 / (n + 1 : ‚Ñù)) < dist (f k x) (g x)}

variables {n : ‚Ñï} {i j : Œπ} {s : set Œ±} {Œµ : ‚Ñù} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

lemma mem_not_convergent_seq_iff [preorder Œπ] {x : Œ±} : x ‚àà not_convergent_seq f g n j ‚Üî
  ‚àÉ k (hk : j ‚â§ k), (1 / (n + 1 : ‚Ñù)) < dist (f k x) (g x) :=
by { simp_rw [not_convergent_seq, mem_Union], refl }

lemma not_convergent_seq_antitone [preorder Œπ] :
  antitone (not_convergent_seq f g n) :=
Œª j k hjk, Union‚ÇÇ_mono' $ Œª l hl, ‚ü®l, le_trans hjk hl, subset.rfl‚ü©

lemma measure_inter_not_convergent_seq_eq_zero [semilattice_sup Œπ] [nonempty Œπ]
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (n : ‚Ñï) :
  Œº (s ‚à© ‚ãÇ j, not_convergent_seq f g n j) = 0 :=
begin
  simp_rw [metric.tendsto_at_top, ae_iff] at hfg,
  rw [‚Üê nonpos_iff_eq_zero, ‚Üê hfg],
  refine measure_mono (Œª x, _),
  simp only [mem_inter_eq, mem_Inter, ge_iff_le, mem_not_convergent_seq_iff],
  push_neg,
  rintro ‚ü®hmem, hx‚ü©,
  refine ‚ü®hmem, 1 / (n + 1 : ‚Ñù), nat.one_div_pos_of_nat, Œª N, _‚ü©,
  obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := hx N,
  exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ.le‚ü©
end

lemma not_convergent_seq_measurable_set [preorder Œπ] [encodable Œπ]
  (hf : ‚àÄ n, strongly_measurable[m] (f n)) (hg : strongly_measurable g) :
  measurable_set (not_convergent_seq f g n j) :=
measurable_set.Union (Œª k, measurable_set.Union_Prop $ Œª hk,
  strongly_measurable.measurable_set_lt strongly_measurable_const $ (hf k).dist hg)

lemma measure_not_convergent_seq_tendsto_zero [semilattice_sup Œπ] [encodable Œπ]
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (n : ‚Ñï) :
  tendsto (Œª j, Œº (s ‚à© not_convergent_seq f g n j)) at_top (ùìù 0) :=
begin
  casesI is_empty_or_nonempty Œπ,
  { have : (Œª j, Œº (s ‚à© not_convergent_seq f g n j)) = Œª j, 0,
      by simp only [eq_iff_true_of_subsingleton],
    rw this,
    exact tendsto_const_nhds, },
  rw [‚Üê measure_inter_not_convergent_seq_eq_zero hfg n, inter_Inter],
  refine tendsto_measure_Inter (Œª n, hsm.inter $ not_convergent_seq_measurable_set hf hg)
    (Œª k l hkl, inter_subset_inter_right _ $ not_convergent_seq_antitone hkl)
    ‚ü®h.some, (lt_of_le_of_lt (measure_mono $ inter_subset_left _ _) (lt_top_iff_ne_top.2 hs)).ne‚ü©,
end

variables [semilattice_sup Œπ] [nonempty Œπ] [encodable Œπ]

lemma exists_not_convergent_seq_lt (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (n : ‚Ñï) :
  ‚àÉ j : Œπ, Œº (s ‚à© not_convergent_seq f g n j) ‚â§ ennreal.of_real (Œµ * 2‚Åª¬π ^ n) :=
begin
  obtain ‚ü®N, hN‚ü© := (ennreal.tendsto_at_top ennreal.zero_ne_top).1
    (measure_not_convergent_seq_tendsto_zero hf hg hsm hs hfg n)
    (ennreal.of_real (Œµ * 2‚Åª¬π ^ n)) _,
  { rw zero_add at hN,
    exact ‚ü®N, (hN N le_rfl).2‚ü© },
  { rw [gt_iff_lt, ennreal.of_real_pos],
    exact mul_pos hŒµ (pow_pos (by norm_num) n), }
end

/-- Given some `Œµ > 0`, `not_convergent_seq_lt_index` provides the index such that
`not_convergent_seq` (intersected with a set of finite measure) has measure less than
`Œµ * 2‚Åª¬π ^ n`.

This definition is useful for Egorov's theorem. -/
def not_convergent_seq_lt_index (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (n : ‚Ñï) : Œπ :=
classical.some $ exists_not_convergent_seq_lt hŒµ hf hg hsm hs hfg n

lemma not_convergent_seq_lt_index_spec (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) (n : ‚Ñï) :
  Œº (s ‚à© not_convergent_seq f g n (not_convergent_seq_lt_index hŒµ hf hg hsm hs hfg n)) ‚â§
  ennreal.of_real (Œµ * 2‚Åª¬π ^ n) :=
classical.some_spec $ exists_not_convergent_seq_lt hŒµ hf hg hsm hs hfg n

/-- Given some `Œµ > 0`, `Union_not_convergent_seq` is the union of `not_convergent_seq` with
specific indicies such that `Union_not_convergent_seq` has measure less equal than `Œµ`.

This definition is useful for Egorov's theorem. -/
def Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) : set Œ± :=
‚ãÉ n, s ‚à© not_convergent_seq f g n (not_convergent_seq_lt_index (half_pos hŒµ) hf hg hsm hs hfg n)

lemma Union_not_convergent_seq_measurable_set (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  measurable_set $ Union_not_convergent_seq hŒµ hf hg hsm hs hfg :=
measurable_set.Union (Œª n, hsm.inter $ not_convergent_seq_measurable_set hf hg)

lemma measure_Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  Œº (Union_not_convergent_seq hŒµ hf hg hsm hs hfg) ‚â§ ennreal.of_real Œµ :=
begin
  refine le_trans (measure_Union_le _)
    (le_trans (ennreal.tsum_le_tsum $ not_convergent_seq_lt_index_spec
    (half_pos hŒµ) hf hg hsm hs hfg) _),
  simp_rw [ennreal.of_real_mul (half_pos hŒµ).le],
  rw [ennreal.tsum_mul_left, ‚Üê ennreal.of_real_tsum_of_nonneg, inv_eq_one_div,
      tsum_geometric_two, ‚Üê ennreal.of_real_mul (half_pos hŒµ).le, div_mul_cancel Œµ two_ne_zero],
  { exact le_rfl },
  { exact Œª n, pow_nonneg (by norm_num) _ },
  { rw [inv_eq_one_div],
    exact summable_geometric_two },
end

lemma Union_not_convergent_seq_subset (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  Union_not_convergent_seq hŒµ hf hg hsm hs hfg ‚äÜ s :=
begin
  rw [Union_not_convergent_seq, ‚Üê inter_Union],
  exact inter_subset_left _ _,
end

lemma tendsto_uniformly_on_diff_Union_not_convergent_seq (hŒµ : 0 < Œµ)
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) :
  tendsto_uniformly_on f g at_top (s \ egorov.Union_not_convergent_seq hŒµ hf hg hsm hs hfg) :=
begin
  rw metric.tendsto_uniformly_on_iff,
  intros Œ¥ hŒ¥,
  obtain ‚ü®N, hN‚ü© := exists_nat_one_div_lt hŒ¥,
  rw eventually_at_top,
  refine ‚ü®egorov.not_convergent_seq_lt_index (half_pos hŒµ) hf hg hsm hs hfg N, Œª n hn x hx, _‚ü©,
  simp only [mem_diff, egorov.Union_not_convergent_seq, not_exists, mem_Union, mem_inter_eq,
    not_and, exists_and_distrib_left] at hx,
  obtain ‚ü®hxs, hx‚ü© := hx,
  specialize hx hxs N,
  rw egorov.mem_not_convergent_seq_iff at hx,
  push_neg at hx,
  rw dist_comm,
  exact lt_of_le_of_lt (hx n hn) hN,
end

end egorov

variables [semilattice_sup Œπ] [nonempty Œπ] [encodable Œπ]
  {Œ≥ : Type*} [topological_space Œ≥]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {s : set Œ±}

/-- **Egorov's theorem**: If `f : Œπ ‚Üí Œ± ‚Üí Œ≤` is a sequence of strongly measurable functions that
converges to `g : Œ± ‚Üí Œ≤` almost everywhere on a measurable set `s` of finite measure,
then for all `Œµ > 0`, there exists a subset `t ‚äÜ s` such that `Œº t ‚â§ Œµ` and `f` converges to `g`
uniformly on `s \ t`. We require the index type `Œπ` to be encodable, and usually `Œπ = ‚Ñï`.

In other words, a sequence of almost everywhere convergent functions converges uniformly except on
an arbitrarily small set. -/
theorem tendsto_uniformly_on_of_ae_tendsto
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hsm : measurable_set s) (hs : Œº s ‚â† ‚àû)
  (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí tendsto (Œª n, f n x) at_top (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ t ‚äÜ s, measurable_set t ‚àß Œº t ‚â§ ennreal.of_real Œµ ‚àß tendsto_uniformly_on f g at_top (s \ t) :=
‚ü®egorov.Union_not_convergent_seq hŒµ hf hg hsm hs hfg,
 egorov.Union_not_convergent_seq_subset hŒµ hf hg hsm hs hfg,
 egorov.Union_not_convergent_seq_measurable_set hŒµ hf hg hsm hs hfg,
 egorov.measure_Union_not_convergent_seq hŒµ hf hg hsm hs hfg,
 egorov.tendsto_uniformly_on_diff_Union_not_convergent_seq hŒµ hf hg hsm hs hfg‚ü©

/-- Egorov's theorem for finite measure spaces. -/
lemma tendsto_uniformly_on_of_ae_tendsto' [is_finite_measure Œº]
  (hf : ‚àÄ n, strongly_measurable (f n)) (hg : strongly_measurable g)
  (hfg : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
  ‚àÉ t, measurable_set t ‚àß Œº t ‚â§ ennreal.of_real Œµ ‚àß tendsto_uniformly_on f g at_top t·∂ú :=
begin
  obtain ‚ü®t, _, ht, htendsto‚ü© :=
    tendsto_uniformly_on_of_ae_tendsto hf hg measurable_set.univ (measure_ne_top Œº univ) _ hŒµ,
  { refine ‚ü®_, ht, _‚ü©,
    rwa compl_eq_univ_diff },
  { filter_upwards [hfg] with _ htendsto _ using htendsto, },
end

end measure_theory
