/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro
-/
import topology.metric_space.basic
import topology.algebra.uniform_group
import topology.algebra.ring
import topology.algebra.star
import ring_theory.subring.basic
import group_theory.archimedean
import algebra.periodic
import order.filter.archimedean
import topology.instances.int

/-!
# Topological properties of ‚Ñù
-/

noncomputable theory
open classical filter int metric set topological_space
open_locale classical topological_space filter uniformity interval

universes u v w
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

instance : noncompact_space ‚Ñù := int.closed_embedding_coe_real.noncompact_space

theorem real.uniform_continuous_add : uniform_continuous (Œªp : ‚Ñù √ó ‚Ñù, p.1 + p.2) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_add_continuous_lemma abs Œµ0 in
‚ü®Œ¥, Œ¥0, Œª a b h, let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h in HŒ¥ h‚ÇÅ h‚ÇÇ‚ü©


theorem real.uniform_continuous_neg : uniform_continuous (@has_neg.neg ‚Ñù _) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0, ‚ü®_, Œµ0, Œª a b h,
  by rw dist_comm at h; simpa [real.dist_eq] using h‚ü©

instance : has_continuous_star ‚Ñù := ‚ü®continuous_id‚ü©

instance : uniform_add_group ‚Ñù :=
uniform_add_group.mk' real.uniform_continuous_add real.uniform_continuous_neg

 -- short-circuit type class inference
instance : topological_add_group ‚Ñù := by apply_instance

instance : proper_space ‚Ñù :=
{ is_compact_closed_ball := Œªx r, by { rw real.closed_ball_eq_Icc, apply is_compact_Icc } }

instance : second_countable_topology ‚Ñù := second_countable_of_proper

lemma real.is_topological_basis_Ioo_rat :
  @is_topological_basis ‚Ñù _ (‚ãÉ(a b : ‚Ñö) (h : a < b), {Ioo a b}) :=
is_topological_basis_of_open_of_nhds
  (by simp [is_open_Ioo] {contextual:=tt})
  (assume a v hav hv,
    let ‚ü®l, u, ‚ü®hl, hu‚ü©, h‚ü© := mem_nhds_iff_exists_Ioo_subset.mp (is_open.mem_nhds hv hav),
        ‚ü®q, hlq, hqa‚ü© := exists_rat_btwn hl,
        ‚ü®p, hap, hpu‚ü© := exists_rat_btwn hu in
    ‚ü®Ioo q p,
      by { simp only [mem_Union], exact ‚ü®q, p, rat.cast_lt.1 $ hqa.trans hap, rfl‚ü© },
      ‚ü®hqa, hap‚ü©, assume a' ‚ü®hqa', ha'p‚ü©, h ‚ü®hlq.trans hqa', ha'p.trans hpu‚ü©‚ü©)

@[simp] lemma real.cocompact_eq : cocompact ‚Ñù = at_bot ‚äî at_top :=
by simp only [‚Üê comap_dist_right_at_top_eq_cocompact (0 : ‚Ñù), real.dist_eq, sub_zero,
  comap_abs_at_top]

/- TODO(Mario): Prove that these are uniform isomorphisms instead of uniform embeddings
lemma uniform_embedding_add_rat {r : ‚Ñö} : uniform_embedding (Œªp:‚Ñö, p + r) :=
_

lemma uniform_embedding_mul_rat {q : ‚Ñö} (hq : q ‚â† 0) : uniform_embedding ((*) q) :=
_ -/

lemma real.mem_closure_iff {s : set ‚Ñù} {x : ‚Ñù} :
  x ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ y ‚àà s, |y - x| < Œµ :=
by simp [mem_closure_iff_nhds_basis nhds_basis_ball, real.dist_eq]

lemma real.uniform_continuous_inv (s : set ‚Ñù) {r : ‚Ñù} (r0 : 0 < r) (H : ‚àÄ x ‚àà s, r ‚â§ |x|) :
  uniform_continuous (Œªp:s, p.1‚Åª¬π) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_inv_continuous_lemma abs Œµ0 r0 in
‚ü®Œ¥, Œ¥0, Œª a b h, HŒ¥ (H _ a.2) (H _ b.2) h‚ü©

lemma real.uniform_continuous_abs : uniform_continuous (abs : ‚Ñù ‚Üí ‚Ñù) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
  ‚ü®Œµ, Œµ0, Œª a b, lt_of_le_of_lt (abs_abs_sub_abs_le_abs_sub _ _)‚ü©

lemma real.tendsto_inv {r : ‚Ñù} (r0 : r ‚â† 0) : tendsto (Œªq, q‚Åª¬π) (ùìù r) (ùìù r‚Åª¬π) :=
by rw ‚Üê abs_pos at r0; exact
tendsto_of_uniform_continuous_subtype
  (real.uniform_continuous_inv {x | |r| / 2 < |x|} (half_pos r0) (Œª x h, le_of_lt h))
  (is_open.mem_nhds ((is_open_lt' (|r| / 2)).preimage continuous_abs) (half_lt_self r0))

lemma real.continuous_inv : continuous (Œªa:{r:‚Ñù // r ‚â† 0}, a.val‚Åª¬π) :=
continuous_iff_continuous_at.mpr $ assume ‚ü®r, hr‚ü©,
  tendsto.comp (real.tendsto_inv hr) (continuous_iff_continuous_at.mp continuous_subtype_val _)

lemma real.continuous.inv [topological_space Œ±] {f : Œ± ‚Üí ‚Ñù} (h : ‚àÄa, f a ‚â† 0) (hf : continuous f) :
  continuous (Œªa, (f a)‚Åª¬π) :=
show continuous ((has_inv.inv ‚àò @subtype.val ‚Ñù (Œªr, r ‚â† 0)) ‚àò Œªa, ‚ü®f a, h a‚ü©),
  from real.continuous_inv.comp (continuous_subtype_mk _ hf)

lemma real.uniform_continuous_mul_const {x : ‚Ñù} : uniform_continuous ((*) x) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0, begin
  cases exists_gt (|x|) with y xy,
  have y0 := lt_of_le_of_lt (abs_nonneg _) xy,
  refine ‚ü®_, div_pos Œµ0 y0, Œª a b h, _‚ü©,
  rw [real.dist_eq, ‚Üê mul_sub, abs_mul, ‚Üê mul_div_cancel' Œµ (ne_of_gt y0)],
  exact mul_lt_mul' (le_of_lt xy) h (abs_nonneg _) y0
end

lemma real.uniform_continuous_mul (s : set (‚Ñù √ó ‚Ñù))
  {r‚ÇÅ r‚ÇÇ : ‚Ñù} (H : ‚àÄ x ‚àà s, |(x : ‚Ñù √ó ‚Ñù).1| < r‚ÇÅ ‚àß |x.2| < r‚ÇÇ) :
  uniform_continuous (Œªp:s, p.1.1 * p.1.2) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
let ‚ü®Œ¥, Œ¥0, HŒ¥‚ü© := rat_mul_continuous_lemma abs Œµ0 in
‚ü®Œ¥, Œ¥0, Œª a b h,
  let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := max_lt_iff.1 h in HŒ¥ (H _ a.2).1 (H _ b.2).2 h‚ÇÅ h‚ÇÇ‚ü©

protected lemma real.continuous_mul : continuous (Œªp : ‚Ñù √ó ‚Ñù, p.1 * p.2) :=
continuous_iff_continuous_at.2 $ Œª ‚ü®a‚ÇÅ, a‚ÇÇ‚ü©,
tendsto_of_uniform_continuous_subtype
  (real.uniform_continuous_mul
    ({x | |x| < |a‚ÇÅ| + 1} √óÀ¢ {x | |x| < |a‚ÇÇ| + 1})
    (Œª x, id))
  (is_open.mem_nhds
    (((is_open_gt' (|a‚ÇÅ| + 1)).preimage continuous_abs).prod
      ((is_open_gt' (|a‚ÇÇ| + 1)).preimage continuous_abs ))
    ‚ü®lt_add_one (|a‚ÇÅ|), lt_add_one (|a‚ÇÇ|)‚ü©)

instance : topological_ring ‚Ñù :=
{ continuous_mul := real.continuous_mul, ..real.topological_add_group }

instance : complete_space ‚Ñù :=
begin
  apply complete_of_cauchy_seq_tendsto,
  intros u hu,
  let c : cau_seq ‚Ñù abs := ‚ü®u, metric.cauchy_seq_iff'.1 hu‚ü©,
  refine ‚ü®c.lim, Œª s h, _‚ü©,
  rcases metric.mem_nhds_iff.1 h with ‚ü®Œµ, Œµ0, hŒµ‚ü©,
  have := c.equiv_lim Œµ Œµ0,
  simp only [mem_map, mem_at_top_sets, mem_set_of_eq],
  refine this.imp (Œª N hN n hn, hŒµ (hN n hn))
end

lemma real.totally_bounded_ball (x Œµ : ‚Ñù) : totally_bounded (ball x Œµ) :=
by rw real.ball_eq_Ioo; apply totally_bounded_Ioo

section

lemma closure_of_rat_image_lt {q : ‚Ñö} : closure ((coe:‚Ñö ‚Üí ‚Ñù) '' {x | q < x}) = {r | ‚Üëq ‚â§ r} :=
subset.antisymm
  ((is_closed_ge' _).closure_subset_iff.2
    (image_subset_iff.2 $ Œª p h, le_of_lt $ (@rat.cast_lt ‚Ñù _ _ _).2 h)) $
Œª x hx, mem_closure_iff_nhds.2 $ Œª t ht,
let ‚ü®Œµ, Œµ0, hŒµ‚ü© := metric.mem_nhds_iff.1 ht in
let ‚ü®p, h‚ÇÅ, h‚ÇÇ‚ü© := exists_rat_btwn ((lt_add_iff_pos_right x).2 Œµ0) in
‚ü®_, hŒµ (show abs _ < _,
    by rwa [abs_of_nonneg (le_of_lt $ sub_pos.2 h‚ÇÅ), sub_lt_iff_lt_add']),
  p, rat.cast_lt.1 (@lt_of_le_of_lt ‚Ñù _ _ _ _ hx h‚ÇÅ), rfl‚ü©

/- TODO(Mario): Put these back only if needed later
lemma closure_of_rat_image_le_eq {q : ‚Ñö} : closure ((coe:‚Ñö ‚Üí ‚Ñù) '' {x | q ‚â§ x}) = {r | ‚Üëq ‚â§ r} :=
_

lemma closure_of_rat_image_le_le_eq {a b : ‚Ñö} (hab : a ‚â§ b) :
  closure (of_rat '' {q:‚Ñö | a ‚â§ q ‚àß q ‚â§ b}) = {r:‚Ñù | of_rat a ‚â§ r ‚àß r ‚â§ of_rat b} :=
_-/

lemma real.bounded_iff_bdd_below_bdd_above {s : set ‚Ñù} : bounded s ‚Üî bdd_below s ‚àß bdd_above s :=
‚ü®begin
  assume bdd,
  rcases (bounded_iff_subset_ball 0).1 bdd with ‚ü®r, hr‚ü©, -- hr : s ‚äÜ closed_ball 0 r
  rw real.closed_ball_eq_Icc at hr, -- hr : s ‚äÜ Icc (0 - r) (0 + r)
  exact ‚ü®bdd_below_Icc.mono hr, bdd_above_Icc.mono hr‚ü©
end,
Œª h, bounded_of_bdd_above_of_bdd_below h.2 h.1‚ü©

lemma real.subset_Icc_Inf_Sup_of_bounded {s : set ‚Ñù} (h : bounded s) :
  s ‚äÜ Icc (Inf s) (Sup s) :=
subset_Icc_cInf_cSup (real.bounded_iff_bdd_below_bdd_above.1 h).1
  (real.bounded_iff_bdd_below_bdd_above.1 h).2

end

section periodic

namespace function

lemma periodic.compact_of_continuous' [topological_space Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù}
  (hp : periodic f c) (hc : 0 < c) (hf : continuous f) :
  is_compact (range f) :=
begin
  convert is_compact_Icc.image hf,
  ext x,
  refine ‚ü®_, mem_range_of_mem_image f (Icc 0 c)‚ü©,
  rintros ‚ü®y, h1‚ü©,
  obtain ‚ü®z, hz, h2‚ü© := hp.exists_mem_Ico‚ÇÄ hc y,
  exact ‚ü®z, mem_Icc_of_Ico hz, h2.symm.trans h1‚ü©,
end

/-- A continuous, periodic function has compact range. -/
lemma periodic.compact_of_continuous [topological_space Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù}
  (hp : periodic f c) (hc : c ‚â† 0) (hf : continuous f) :
  is_compact (range f) :=
begin
  cases lt_or_gt_of_ne hc with hneg hpos,
  exacts [hp.neg.compact_of_continuous' (neg_pos.mpr hneg) hf, hp.compact_of_continuous' hpos hf],
end

/-- A continuous, periodic function is bounded. -/
lemma periodic.bounded_of_continuous [pseudo_metric_space Œ±] {f : ‚Ñù ‚Üí Œ±} {c : ‚Ñù}
  (hp : periodic f c) (hc : c ‚â† 0) (hf : continuous f) :
  bounded (range f) :=
(hp.compact_of_continuous hc hf).bounded

end function

end periodic

section subgroups

/-- Given a nontrivial subgroup `G ‚äÜ ‚Ñù`, if `G ‚à© ‚Ñù_{>0}` has no minimum then `G` is dense. -/
lemma real.subgroup_dense_of_no_min {G : add_subgroup ‚Ñù} {g‚ÇÄ : ‚Ñù} (g‚ÇÄ_in : g‚ÇÄ ‚àà G) (g‚ÇÄ_ne : g‚ÇÄ ‚â† 0)
  (H' : ¬¨ ‚àÉ a : ‚Ñù, is_least {g : ‚Ñù | g ‚àà G ‚àß 0 < g} a) :
  dense (G : set ‚Ñù) :=
begin
  let G_pos := {g : ‚Ñù | g ‚àà G ‚àß 0 < g},
  push_neg at H',
  intros x,
  suffices : ‚àÄ Œµ > (0 : ‚Ñù), ‚àÉ g ‚àà G, |x - g| < Œµ,
    by simpa only [real.mem_closure_iff, abs_sub_comm],
  intros Œµ Œµ_pos,
  obtain ‚ü®g‚ÇÅ, g‚ÇÅ_in, g‚ÇÅ_pos‚ü© : ‚àÉ g‚ÇÅ : ‚Ñù, g‚ÇÅ ‚àà G ‚àß 0 < g‚ÇÅ,
  { cases lt_or_gt_of_ne g‚ÇÄ_ne with Hg‚ÇÄ Hg‚ÇÄ,
    { exact ‚ü®-g‚ÇÄ, G.neg_mem g‚ÇÄ_in, neg_pos.mpr Hg‚ÇÄ‚ü© },
    { exact ‚ü®g‚ÇÄ, g‚ÇÄ_in, Hg‚ÇÄ‚ü© } },
  obtain ‚ü®a, ha‚ü© : ‚àÉ a, is_glb G_pos a :=
    ‚ü®Inf G_pos, is_glb_cInf ‚ü®g‚ÇÅ, g‚ÇÅ_in, g‚ÇÅ_pos‚ü© ‚ü®0, Œª _ hx, le_of_lt hx.2‚ü©‚ü©,
  have a_notin : a ‚àâ G_pos,
  { intros H,
    exact H' a ‚ü®H, ha.1‚ü© },
  obtain ‚ü®g‚ÇÇ, g‚ÇÇ_in, g‚ÇÇ_pos, g‚ÇÇ_lt‚ü© : ‚àÉ g‚ÇÇ : ‚Ñù, g‚ÇÇ ‚àà G ‚àß 0 < g‚ÇÇ ‚àß g‚ÇÇ < Œµ,
  { obtain ‚ü®b, hb, hb', hb''‚ü© := ha.exists_between_self_add' a_notin Œµ_pos,
    obtain ‚ü®c, hc, hc', hc''‚ü© := ha.exists_between_self_add' a_notin (sub_pos.2 hb'),
    refine ‚ü®b - c, G.sub_mem hb.1 hc.1, _, _‚ü© ;
    linarith },
  refine ‚ü®floor (x/g‚ÇÇ) * g‚ÇÇ, _, _‚ü©,
  { exact add_subgroup.int_mul_mem _ g‚ÇÇ_in },
  { rw abs_of_nonneg (sub_floor_div_mul_nonneg x g‚ÇÇ_pos),
    linarith [sub_floor_div_mul_lt x g‚ÇÇ_pos] }
end

/-- Subgroups of `‚Ñù` are either dense or cyclic. See `real.subgroup_dense_of_no_min` and
`subgroup_cyclic_of_min` for more precise statements. -/
lemma real.subgroup_dense_or_cyclic (G : add_subgroup ‚Ñù) :
  dense (G : set ‚Ñù) ‚à® ‚àÉ a : ‚Ñù, G = add_subgroup.closure {a} :=
begin
  cases add_subgroup.bot_or_exists_ne_zero G with H H,
  { right,
    use 0,
    rw [H, add_subgroup.closure_singleton_zero] },
  { let G_pos := {g : ‚Ñù | g ‚àà G ‚àß 0 < g},
    by_cases H' : ‚àÉ a, is_least G_pos a,
    { right,
      rcases H' with ‚ü®a, ha‚ü©,
      exact ‚ü®a, add_subgroup.cyclic_of_min ha‚ü© },
    { left,
      rcases H with ‚ü®g‚ÇÄ, g‚ÇÄ_in, g‚ÇÄ_ne‚ü©,
      exact real.subgroup_dense_of_no_min g‚ÇÄ_in g‚ÇÄ_ne H' } }
end

end subgroups
