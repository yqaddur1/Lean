/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import topology.continuous_function.bounded
import topology.continuous_function.cocompact_map

/-!
# Continuous functions vanishing at infinity

The type of continuous functions vanishing at infinity. When the domain is compact
`C(Œ±, Œ≤) ‚âÉ C‚ÇÄ(Œ±, Œ≤)` via the identity map. When the codomain is a metric space, every continuous
map which vanishes at infinity is a bounded continuous function. When the domain is a locally
compact space, this type has nice properties.

## TODO

* Create more intances of algebraic structures (e.g., `non_unital_semiring`) once the necessary
  type classes (e.g., `topological_ring`) are sufficiently generalized.
* Relate the unitization of `C‚ÇÄ(Œ±, Œ≤)` to the Alexandroff compactification.
-/
universes u v w

variables {F : Type*} {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w} [topological_space Œ±]

open_locale bounded_continuous_function topological_space
open filter metric

/-- `C‚ÇÄ(Œ±, Œ≤)` is the type of continuous functions `Œ± ‚Üí Œ≤` which vanish at infinity from a
topological space to a metric space with a zero element.

When possible, instead of parametrizing results over `(f : C‚ÇÄ(Œ±, Œ≤))`,
you should parametrize over `(F : Type*) [zero_at_infty_continuous_map_class F Œ± Œ≤] (f : F)`.

When you extend this structure, make sure to extend `zero_at_infty_continuous_map_class`. -/
structure zero_at_infty_continuous_map (Œ± : Type u) (Œ≤ : Type v)
  [topological_space Œ±] [has_zero Œ≤] [topological_space Œ≤] extends continuous_map Œ± Œ≤ :
  Type (max u v) :=
(zero_at_infty' : tendsto to_fun (cocompact Œ±) (ùìù 0))

localized "notation [priority 2000] `C‚ÇÄ(` Œ± `, ` Œ≤ `)` := zero_at_infty_continuous_map Œ± Œ≤"
  in zero_at_infty
localized "notation Œ± ` ‚ÜíC‚ÇÄ ` Œ≤ := zero_at_infty_continuous_map Œ± Œ≤" in zero_at_infty

/-- `zero_at_infty_continuous_map_class F Œ± Œ≤` states that `F` is a type of continuous maps which
vanish at infinity.

You should also extend this typeclass when you extend `zero_at_infty_continuous_map`. -/
class zero_at_infty_continuous_map_class (F : Type*) (Œ± Œ≤ : out_param $ Type*) [topological_space Œ±]
  [has_zero Œ≤] [topological_space Œ≤] extends continuous_map_class F Œ± Œ≤ :=
(zero_at_infty (f : F) : tendsto f (cocompact Œ±) (ùìù 0))

export zero_at_infty_continuous_map_class (zero_at_infty)

namespace zero_at_infty_continuous_map

section basics

variables [topological_space Œ≤] [has_zero Œ≤] [zero_at_infty_continuous_map_class F Œ± Œ≤]

instance : zero_at_infty_continuous_map_class C‚ÇÄ(Œ±, Œ≤) Œ± Œ≤ :=
{ coe := Œª f, f.to_fun,
  coe_injective' := Œª f g h, by { obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := f, obtain ‚ü®‚ü®_, _‚ü©, _‚ü© := g, congr' },
  map_continuous := Œª f, f.continuous_to_fun,
  zero_at_infty := Œª f, f.zero_at_infty' }

/-- Helper instance for when there's too many metavariables to apply `fun_like.has_coe_to_fun`
directly. -/
instance : has_coe_to_fun C‚ÇÄ(Œ±, Œ≤) (Œª _, Œ± ‚Üí Œ≤) := fun_like.has_coe_to_fun

instance : has_coe_t F C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª f, { to_fun := f, continuous_to_fun := map_continuous f, zero_at_infty' := zero_at_infty f }‚ü©

@[simp] lemma coe_to_continuous_fun (f : C‚ÇÄ(Œ±, Œ≤)) : (f.to_continuous_map : Œ± ‚Üí Œ≤) = f := rfl


@[ext] lemma ext {f g : C‚ÇÄ(Œ±, Œ≤)} (h : ‚àÄ x, f x = g x) : f = g := fun_like.ext _ _ h

/-- Copy of a `zero_at_infinity_continuous_map` with a new `to_fun` equal to the old one. Useful
to fix definitional equalities. -/
protected def copy (f : C‚ÇÄ(Œ±, Œ≤)) (f' : Œ± ‚Üí Œ≤) (h : f' = f) : C‚ÇÄ(Œ±, Œ≤) :=
{ to_fun := f',
  continuous_to_fun := by { rw h, exact f.continuous_to_fun },
  zero_at_infty' := by { simp_rw h, exact f.zero_at_infty' } }

lemma eq_of_empty [is_empty Œ±] (f g : C‚ÇÄ(Œ±, Œ≤)) : f = g :=
ext $ is_empty.elim ‚Äπ_‚Ä∫

/-- A continuous function on a compact space is automatically a continuous function vanishing at
infinity. -/
@[simps]
def continuous_map.lift_zero_at_infty [compact_space Œ±] : C(Œ±, Œ≤) ‚âÉ C‚ÇÄ(Œ±, Œ≤) :=
{ to_fun := Œª f, { to_fun := f, continuous_to_fun := f.continuous, zero_at_infty' := by simp },
  inv_fun := Œª f, f,
  left_inv := Œª f, by { ext, refl },
  right_inv := Œª f, by { ext, refl } }

/-- A continuous function on a compact space is automatically a continuous function vanishing at
infinity. This is not an instance to avoid type class loops. -/
@[simps]
def zero_at_infty_continuous_map_class.of_compact {G : Type*} [continuous_map_class G Œ± Œ≤]
  [compact_space Œ±] : zero_at_infty_continuous_map_class G Œ± Œ≤ :=
{ coe := Œª g, g,
  coe_injective' := Œª f g h, fun_like.coe_fn_eq.mp h,
  map_continuous := map_continuous,
  zero_at_infty := by simp }

end basics

/-! ### Algebraic structure

Whenever `Œ≤` has suitable algebraic structure and a compatible topological structure, then
`C‚ÇÄ(Œ±, Œ≤)` inherits a corresponding algebraic structure. The primary exception to this is that
`C‚ÇÄ(Œ±, Œ≤)` will not have a multiplicative identity.
-/

section algebraic_structure

variables [topological_space Œ≤] (x : Œ±)

instance [has_zero Œ≤] : has_zero C‚ÇÄ(Œ±, Œ≤) := ‚ü®‚ü®0, tendsto_const_nhds‚ü©‚ü©

instance [has_zero Œ≤] : inhabited C‚ÇÄ(Œ±, Œ≤) := ‚ü®0‚ü©

@[simp] lemma coe_zero [has_zero Œ≤] : ‚áë(0 : C‚ÇÄ(Œ±, Œ≤)) = 0 := rfl
lemma zero_apply [has_zero Œ≤] : (0 : C‚ÇÄ(Œ±, Œ≤)) x = 0 := rfl

instance [mul_zero_class Œ≤] [has_continuous_mul Œ≤] : has_mul C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª f g, ‚ü®f * g, by simpa only [mul_zero] using (zero_at_infty f).mul (zero_at_infty g)‚ü©‚ü©

@[simp] lemma coe_mul [mul_zero_class Œ≤] [has_continuous_mul Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤)) :
  ‚áë(f * g) = f * g := rfl
lemma mul_apply [mul_zero_class Œ≤] [has_continuous_mul Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤)) :
  (f * g) x = f x * g x := rfl

instance [mul_zero_class Œ≤] [has_continuous_mul Œ≤] : mul_zero_class C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.mul_zero_class _ coe_zero coe_mul

instance [semigroup_with_zero Œ≤] [has_continuous_mul Œ≤] : semigroup_with_zero C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.semigroup_with_zero _ coe_zero coe_mul

instance [add_zero_class Œ≤] [has_continuous_add Œ≤] : has_add C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª f g, ‚ü®f + g, by simpa only [add_zero] using (zero_at_infty f).add (zero_at_infty g)‚ü©‚ü©

@[simp] lemma coe_add [add_zero_class Œ≤] [has_continuous_add Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤)) :
  ‚áë(f + g) = f + g := rfl
lemma add_apply [add_zero_class Œ≤] [has_continuous_add Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤)) :
  (f + g) x = f x + g x := rfl

instance [add_zero_class Œ≤] [has_continuous_add Œ≤] : add_zero_class C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.add_zero_class _ coe_zero coe_add

section add_monoid

variables [add_monoid Œ≤] [has_continuous_add Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤))

@[simp] lemma coe_nsmul_rec : ‚àÄ n, ‚áë(nsmul_rec n f) = n ‚Ä¢ f
| 0 := by rw [nsmul_rec, zero_smul, coe_zero]
| (n + 1) := by rw [nsmul_rec, succ_nsmul, coe_add, coe_nsmul_rec]

instance has_nat_scalar : has_scalar ‚Ñï C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª n f, ‚ü®n ‚Ä¢ f, by simpa [coe_nsmul_rec] using zero_at_infty (nsmul_rec n f)‚ü©‚ü©

instance : add_monoid C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.add_monoid _ coe_zero coe_add (Œª _ _, rfl)

end add_monoid

instance [add_comm_monoid Œ≤] [has_continuous_add Œ≤] : add_comm_monoid C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.add_comm_monoid _ coe_zero coe_add (Œª _ _, rfl)

section add_group

variables [add_group Œ≤] [topological_add_group Œ≤] (f g : C‚ÇÄ(Œ±, Œ≤))

instance : has_neg C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª f, ‚ü®-f, by simpa only [neg_zero] using (zero_at_infty f).neg‚ü©‚ü©

@[simp] lemma coe_neg : ‚áë(-f) = -f := rfl
lemma neg_apply : (-f) x = -f x := rfl

instance : has_sub C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª f g, ‚ü®f - g, by simpa only [sub_zero] using (zero_at_infty f).sub (zero_at_infty g)‚ü©‚ü©

@[simp] lemma coe_sub : ‚áë(f - g) = f - g := rfl
lemma sub_apply : (f - g) x = f x - g x := rfl

@[simp] lemma coe_zsmul_rec : ‚àÄ z, ‚áë(zsmul_rec z f) = z ‚Ä¢ f
| (int.of_nat n) := by rw [zsmul_rec, int.of_nat_eq_coe, coe_nsmul_rec, coe_nat_zsmul]
| -[1+ n] := by rw [zsmul_rec, zsmul_neg_succ_of_nat, coe_neg, coe_nsmul_rec]

instance has_int_scalar : has_scalar ‚Ñ§ C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª n f, ‚ü®n ‚Ä¢ f, by simpa using zero_at_infty (zsmul_rec n f)‚ü©‚ü©

instance : add_group C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.add_group _ coe_zero coe_add coe_neg coe_sub (Œª _ _, rfl) (Œª _ _, rfl)

end add_group

instance [add_comm_group Œ≤] [topological_add_group Œ≤] : add_comm_group C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.add_comm_group _ coe_zero coe_add coe_neg coe_sub (Œª _ _, rfl) (Œª _ _, rfl)

instance [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : has_scalar R C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª r f, ‚ü®r ‚Ä¢ f, by simpa [smul_zero] using (zero_at_infty f).const_smul r‚ü©‚ü©

@[simp] lemma coe_smul [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] (r : R) (f : C‚ÇÄ(Œ±, Œ≤)) : ‚áë(r ‚Ä¢ f) = r ‚Ä¢ f := rfl

lemma smul_apply [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] (r : R) (f : C‚ÇÄ(Œ±, Œ≤)) (x : Œ±) : (r ‚Ä¢ f) x = r ‚Ä¢ f x := rfl

instance [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤] [smul_with_zero R·µê·µí·µñ Œ≤]
  [has_continuous_const_smul R Œ≤] [is_central_scalar R Œ≤] : is_central_scalar R C‚ÇÄ(Œ±, Œ≤) :=
‚ü®Œª r f, ext $ Œª x, op_smul_eq_smul _ _‚ü©

instance [has_zero Œ≤] {R : Type*} [has_zero R] [smul_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : smul_with_zero R C‚ÇÄ(Œ±, Œ≤) :=
function.injective.smul_with_zero ‚ü®_, coe_zero‚ü© fun_like.coe_injective coe_smul

instance [has_zero Œ≤] {R : Type*} [monoid_with_zero R] [mul_action_with_zero R Œ≤]
  [has_continuous_const_smul R Œ≤] : mul_action_with_zero R C‚ÇÄ(Œ±, Œ≤) :=
function.injective.mul_action_with_zero ‚ü®_, coe_zero‚ü© fun_like.coe_injective coe_smul

instance [add_comm_monoid Œ≤] [has_continuous_add Œ≤] {R : Type*} [semiring R] [module R Œ≤]
  [has_continuous_const_smul R Œ≤] : module R C‚ÇÄ(Œ±, Œ≤) :=
function.injective.module R ‚ü®_, coe_zero, coe_add‚ü© fun_like.coe_injective coe_smul

instance [non_unital_non_assoc_semiring Œ≤] [topological_semiring Œ≤] :
  non_unital_non_assoc_semiring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_non_assoc_semiring _ coe_zero coe_add coe_mul (Œª _ _, rfl)

instance [non_unital_semiring Œ≤] [topological_semiring Œ≤] :
  non_unital_semiring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_semiring _ coe_zero coe_add coe_mul (Œª _ _, rfl)

instance [non_unital_comm_semiring Œ≤] [topological_semiring Œ≤] :
  non_unital_comm_semiring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_comm_semiring _ coe_zero coe_add coe_mul (Œª _ _, rfl)

instance [non_unital_non_assoc_ring Œ≤] [topological_ring Œ≤] :
  non_unital_non_assoc_ring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_non_assoc_ring _ coe_zero coe_add coe_mul coe_neg coe_sub
  (Œª _ _, rfl) (Œª _ _, rfl)

instance [non_unital_ring Œ≤] [topological_ring Œ≤] :
  non_unital_ring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_ring _ coe_zero coe_add coe_mul coe_neg coe_sub (Œª _ _, rfl)
  (Œª _ _, rfl)

instance [non_unital_comm_ring Œ≤] [topological_ring Œ≤] :
  non_unital_comm_ring C‚ÇÄ(Œ±, Œ≤) :=
fun_like.coe_injective.non_unital_comm_ring _ coe_zero coe_add coe_mul coe_neg coe_sub (Œª _ _, rfl)
  (Œª _ _, rfl)

instance {R : Type*} [semiring R] [non_unital_non_assoc_semiring Œ≤] [topological_semiring Œ≤]
  [module R Œ≤] [has_continuous_const_smul R Œ≤] [is_scalar_tower R Œ≤ Œ≤] :
  is_scalar_tower R C‚ÇÄ(Œ±, Œ≤) C‚ÇÄ(Œ±, Œ≤) :=
{ smul_assoc := Œª r f g,
  begin
    ext,
    simp only [smul_eq_mul, coe_mul, coe_smul, pi.mul_apply, pi.smul_apply],
    rw [‚Üêsmul_eq_mul, ‚Üêsmul_eq_mul, smul_assoc],
  end }

instance {R : Type*} [semiring R] [non_unital_non_assoc_semiring Œ≤] [topological_semiring Œ≤]
  [module R Œ≤] [has_continuous_const_smul R Œ≤] [smul_comm_class R Œ≤ Œ≤] :
  smul_comm_class R C‚ÇÄ(Œ±, Œ≤) C‚ÇÄ(Œ±, Œ≤) :=
{ smul_comm := Œª r f g,
  begin
    ext,
    simp only [smul_eq_mul, coe_smul, coe_mul, pi.smul_apply, pi.mul_apply],
    rw [‚Üêsmul_eq_mul, ‚Üêsmul_eq_mul, smul_comm],
  end }


end algebraic_structure

/-! ### Metric structure

When `Œ≤` is a metric space, then every element of `C‚ÇÄ(Œ±, Œ≤)` is bounded, and so there is a natural
inclusion map `zero_at_infty_continuous_map.to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí (Œ± ‚Üí·µá Œ≤)`. Via this map `C‚ÇÄ(Œ±, Œ≤)`
inherits a metric as the pullback of the metric on `Œ± ‚Üí·µá Œ≤`. Moreover, this map has closed range
in `Œ± ‚Üí·µá Œ≤` and consequently `C‚ÇÄ(Œ±, Œ≤)` is a complete space whenever `Œ≤` is complete.
-/

section metric

open metric set

variables [metric_space Œ≤] [has_zero Œ≤] [zero_at_infty_continuous_map_class F Œ± Œ≤]

protected lemma bounded (f : F) : ‚àÉ C, ‚àÄ x y : Œ±, dist ((f : Œ± ‚Üí Œ≤) x) (f y) ‚â§ C :=
begin
  obtain ‚ü®K : set Œ±, hK‚ÇÅ, hK‚ÇÇ‚ü© := mem_cocompact.mp (tendsto_def.mp (zero_at_infty (f : F)) _
    (closed_ball_mem_nhds (0 : Œ≤) zero_lt_one)),
  obtain ‚ü®C, hC‚ü© := (hK‚ÇÅ.image (map_continuous f)).bounded.subset_ball (0 : Œ≤),
  refine ‚ü®max C 1 + max C 1, (Œª x y, _)‚ü©,
  have : ‚àÄ x, f x ‚àà closed_ball (0 : Œ≤) (max C 1),
  { intro x,
    by_cases hx : x ‚àà K,
    { exact (mem_closed_ball.mp $ hC ‚ü®x, hx, rfl‚ü©).trans (le_max_left _ _) },
    { exact (mem_closed_ball.mp $ mem_preimage.mp (hK‚ÇÇ hx)).trans (le_max_right _ _) } },
  exact (dist_triangle (f x) 0 (f y)).trans
    (add_le_add (mem_closed_ball.mp $ this x) (mem_closed_ball'.mp $ this y)),
end

lemma bounded_range (f : C‚ÇÄ(Œ±, Œ≤)) : bounded (range f) :=
bounded_range_iff.2 f.bounded

lemma bounded_image (f : C‚ÇÄ(Œ±, Œ≤)) (s : set Œ±) : bounded (f '' s) :=
f.bounded_range.mono $ image_subset_range _ _

@[priority 100]
instance : bounded_continuous_map_class F Œ± Œ≤ :=
{ map_bounded := Œª f, zero_at_infty_continuous_map.bounded f }

/-- Construct a bounded continuous function from a continuous function vanishing at infinity. -/
@[simps]
def to_bcf (f : C‚ÇÄ(Œ±, Œ≤)) : Œ± ‚Üí·µá Œ≤ :=
‚ü®f, map_bounded f‚ü©

section
variables (Œ±) (Œ≤)
lemma to_bcf_injective :
  function.injective (to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí Œ± ‚Üí·µá Œ≤) :=
Œª f g h, by { ext, simpa only using fun_like.congr_fun h x, }
end

variables {C : ‚Ñù} {f g : C‚ÇÄ(Œ±, Œ≤)}

/-- The type of continuous functions vanishing at infinity, with the uniform distance induced by the
inclusion `zero_at_infinity_continuous_map.to_bcf`, is a metric space. -/
noncomputable instance : metric_space C‚ÇÄ(Œ±, Œ≤) :=
metric_space.induced _ (to_bcf_injective Œ± Œ≤) (by apply_instance)

@[simp]
lemma dist_to_bcf_eq_dist {f g : C‚ÇÄ(Œ±, Œ≤)} : dist f.to_bcf g.to_bcf = dist f g := rfl

open bounded_continuous_function

/-- Convergence in the metric on `C‚ÇÄ(Œ±, Œ≤)` is uniform convergence. -/
lemma tendsto_iff_tendsto_uniformly {Œπ : Type*} {F : Œπ ‚Üí C‚ÇÄ(Œ±, Œ≤)} {f : C‚ÇÄ(Œ±, Œ≤)} {l : filter Œπ} :
  tendsto F l (ùìù f) ‚Üî tendsto_uniformly (Œª i, F i) f l :=
by simpa only [metric.tendsto_nhds] using @bounded_continuous_function.tendsto_iff_tendsto_uniformly
  _ _ _ _ _ (Œª i, (F i).to_bcf) f.to_bcf l

lemma isometry_to_bcf : isometry (to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí Œ± ‚Üí·µá Œ≤) := by tauto

lemma closed_range_to_bcf : is_closed (range (to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí Œ± ‚Üí·µá Œ≤)) :=
begin
  refine is_closed_iff_cluster_pt.mpr (Œª f hf, _),
  rw cluster_pt_principal_iff at hf,
  have : tendsto f (cocompact Œ±) (ùìù 0),
  { refine metric.tendsto_nhds.mpr (Œª Œµ hŒµ, _),
    obtain ‚ü®_, hg, g, rfl‚ü© := hf (ball f (Œµ / 2)) (ball_mem_nhds f $ half_pos hŒµ),
    refine (metric.tendsto_nhds.mp (zero_at_infty g) (Œµ / 2)
      (half_pos hŒµ)).mp (eventually_of_forall $ Œª x hx, _),
    calc dist (f x) 0 ‚â§ dist (g.to_bcf x) (f x) + dist (g x) 0 : dist_triangle_left _ _ _
    ...               < dist g.to_bcf f + Œµ / 2 : add_lt_add_of_le_of_lt (dist_coe_le_dist x) hx
    ...               < Œµ : by simpa [add_halves Œµ] using add_lt_add_right hg (Œµ / 2) },
  exact ‚ü®‚ü®f.to_continuous_map, this‚ü©, by {ext, refl}‚ü©,
end

/-- Continuous functions vanishing at infinity taking values in a complete space form a
complete space. -/
instance [complete_space Œ≤] : complete_space C‚ÇÄ(Œ±, Œ≤) :=
(complete_space_iff_is_complete_range isometry_to_bcf.uniform_inducing).mpr
  closed_range_to_bcf.is_complete

end metric

section norm

/-! ### Normed space

The norm structure on `C‚ÇÄ(Œ±, Œ≤)` is the one induced by the inclusion `to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí (Œ± ‚Üí·µá b)`,
viewed as an additive monoid homomorphism. Then `C‚ÇÄ(Œ±, Œ≤)` is naturally a normed space over a normed
field `ùïú` whenever `Œ≤` is as well.
-/

section normed_space

variables [normed_group Œ≤] {ùïú : Type*} [normed_field ùïú] [normed_space ùïú Œ≤]

/-- The natural inclusion `to_bcf : C‚ÇÄ(Œ±, Œ≤) ‚Üí (Œ± ‚Üí·µá Œ≤)` realized as an additive monoid
homomorphism. -/
def to_bcf_add_monoid_hom : C‚ÇÄ(Œ±, Œ≤) ‚Üí+ (Œ± ‚Üí·µá Œ≤) :=
{ to_fun := to_bcf,
  map_zero' := rfl,
  map_add' := Œª x y, rfl }

@[simp]
lemma coe_to_bcf_add_monoid_hom (f : C‚ÇÄ(Œ±, Œ≤)) : (f.to_bcf_add_monoid_hom : Œ± ‚Üí Œ≤) = f := rfl

noncomputable instance : normed_group C‚ÇÄ(Œ±, Œ≤) :=
normed_group.induced to_bcf_add_monoid_hom (to_bcf_injective Œ± Œ≤)

@[simp]
lemma norm_to_bcf_eq_norm {f : C‚ÇÄ(Œ±, Œ≤)} : ‚à•f.to_bcf‚à• = ‚à•f‚à• := rfl

instance : normed_space ùïú C‚ÇÄ(Œ±, Œ≤) :=
{ norm_smul_le := Œª k f, (norm_smul k f.to_bcf).le }

end normed_space

section normed_ring

variables [non_unital_normed_ring Œ≤]

noncomputable instance : non_unital_normed_ring C‚ÇÄ(Œ±, Œ≤) :=
{ norm_mul := Œª f g, norm_mul_le f.to_bcf g.to_bcf,
  ..zero_at_infty_continuous_map.non_unital_ring,
  ..zero_at_infty_continuous_map.normed_group }

end normed_ring

end norm

section star

/-! ### Star structure

It is possible to equip `C‚ÇÄ(Œ±, Œ≤)` with a pointwise `star` operation whenever there is a continuous
`star : Œ≤ ‚Üí Œ≤` for which `star (0 : Œ≤) = 0`. We don't have quite this weak a typeclass, but
`star_add_monoid` is close enough.

The `star_add_monoid` and `normed_star_group` classes on `C‚ÇÄ(Œ±, Œ≤)` are inherited from their
counterparts on `Œ± ‚Üí·µá Œ≤`. Ultimately, when `Œ≤` is a C‚ãÜ-ring, then so is `C‚ÇÄ(Œ±, Œ≤)`.
-/

variables [topological_space Œ≤] [add_monoid Œ≤] [star_add_monoid Œ≤] [has_continuous_star Œ≤]

instance : has_star C‚ÇÄ(Œ±, Œ≤) :=
{ star := Œª f,
  { to_fun := Œª x, star (f x),
    continuous_to_fun := (map_continuous f).star,
    zero_at_infty' := by simpa only [star_zero]
      using (continuous_star.tendsto (0 : Œ≤)).comp (zero_at_infty f) } }

@[simp]
lemma coe_star (f : C‚ÇÄ(Œ±, Œ≤)) : ‚áë(star f) = star f := rfl

lemma star_apply (f : C‚ÇÄ(Œ±, Œ≤)) (x : Œ±) :
  (star f) x = star (f x) := rfl

instance [has_continuous_add Œ≤] : star_add_monoid C‚ÇÄ(Œ±, Œ≤) :=
{ star_involutive := Œª f, ext $ Œª x, star_star (f x),
  star_add := Œª f g, ext $ Œª x, star_add (f x) (g x) }

end star

section normed_star

variables [normed_group Œ≤] [star_add_monoid Œ≤] [normed_star_group Œ≤]

instance : normed_star_group C‚ÇÄ(Œ±, Œ≤) :=
{ norm_star := Œª f, (norm_star f.to_bcf : _) }

end normed_star

section star_module

variables {ùïú : Type*} [has_zero ùïú] [has_star ùïú]
  [add_monoid Œ≤] [star_add_monoid Œ≤] [topological_space Œ≤] [has_continuous_star Œ≤]
  [smul_with_zero ùïú Œ≤] [has_continuous_const_smul ùïú Œ≤] [star_module ùïú Œ≤]

instance : star_module ùïú C‚ÇÄ(Œ±, Œ≤) :=
{ star_smul := Œª k f, ext $ Œª x, star_smul k (f x) }

end star_module

section star_ring

variables [non_unital_semiring Œ≤] [star_ring Œ≤] [topological_space Œ≤] [has_continuous_star Œ≤]
  [topological_semiring Œ≤]

instance : star_ring C‚ÇÄ(Œ±, Œ≤) :=
{ star_mul := Œª f g, ext $ Œª x, star_mul (f x) (g x),
  ..zero_at_infty_continuous_map.star_add_monoid }

end star_ring

section cstar_ring

instance [non_unital_normed_ring Œ≤] [star_ring Œ≤] [cstar_ring Œ≤] : cstar_ring C‚ÇÄ(Œ±, Œ≤) :=
{ norm_star_mul_self := Œª f, @cstar_ring.norm_star_mul_self _ _ _ _ f.to_bcf }

end cstar_ring

/-! ### C‚ÇÄ as a functor

For each `Œ≤` with sufficient structure, there is a contravariant functor `C‚ÇÄ(-, Œ≤)` from the
category of topological spaces with morphisms given by `cocompact_map`s.
-/

variables {Œ¥ : Type*} [topological_space Œ≤] [topological_space Œ≥] [topological_space Œ¥]

local notation Œ± ` ‚Üíco ` Œ≤ := cocompact_map Œ± Œ≤

section
variables [has_zero Œ¥]

/-- Composition of a continuous function vanishing at infinity with a cocompact map yields another
continuous function vanishing at infinity. -/
def comp (f : C‚ÇÄ(Œ≥, Œ¥)) (g : Œ≤ ‚Üíco Œ≥) : C‚ÇÄ(Œ≤, Œ¥) :=
{ to_continuous_map := (f : C(Œ≥, Œ¥)).comp g,
  zero_at_infty' := (zero_at_infty f).comp (cocompact_tendsto g) }

@[simp] lemma coe_comp_to_continuous_fun (f : C‚ÇÄ(Œ≥, Œ¥)) (g : Œ≤ ‚Üíco Œ≥) :
  ((f.comp g).to_continuous_map : Œ≤ ‚Üí Œ¥) = f ‚àò g := rfl

@[simp] lemma comp_id (f : C‚ÇÄ(Œ≥, Œ¥)) : f.comp (cocompact_map.id Œ≥) = f := ext (Œª x, rfl)

@[simp] lemma comp_assoc (f : C‚ÇÄ(Œ≥, Œ¥)) (g : Œ≤ ‚Üíco Œ≥) (h : Œ± ‚Üíco Œ≤) :
  (f.comp g).comp h = f.comp (g.comp h) := rfl

@[simp] lemma zero_comp (g : Œ≤ ‚Üíco Œ≥) : (0 : C‚ÇÄ(Œ≥, Œ¥)).comp g = 0 := rfl

end

/-- Composition as an additive monoid homomorphism. -/
def comp_add_monoid_hom [add_monoid Œ¥] [has_continuous_add Œ¥] (g : Œ≤ ‚Üíco Œ≥) :
  C‚ÇÄ(Œ≥, Œ¥) ‚Üí+ C‚ÇÄ(Œ≤, Œ¥) :=
{ to_fun := Œª f, f.comp g,
  map_zero' := zero_comp g,
  map_add' := Œª f‚ÇÅ f‚ÇÇ, rfl }

/-- Composition as a semigroup homomorphism. -/
def comp_mul_hom [mul_zero_class Œ¥] [has_continuous_mul Œ¥]
  (g : Œ≤ ‚Üíco Œ≥) : C‚ÇÄ(Œ≥, Œ¥) ‚Üí‚Çô* C‚ÇÄ(Œ≤, Œ¥) :=
{ to_fun := Œª f, f.comp g,
  map_mul' := Œª f‚ÇÅ f‚ÇÇ, rfl }

/-- Composition as a linear map. -/
def comp_linear_map [add_comm_monoid Œ¥] [has_continuous_add Œ¥] {R : Type*}
  [semiring R] [module R Œ¥] [has_continuous_const_smul R Œ¥] (g : Œ≤ ‚Üíco Œ≥) :
  C‚ÇÄ(Œ≥, Œ¥) ‚Üí‚Çó[R] C‚ÇÄ(Œ≤, Œ¥) :=
{ to_fun := Œª f, f.comp g,
  map_add' := Œª f‚ÇÅ f‚ÇÇ, rfl,
  map_smul' := Œª r f, rfl }

/-- Composition as a non-unital algebra homomorphism. -/
def comp_non_unital_alg_hom {R : Type*} [semiring R] [non_unital_non_assoc_semiring Œ¥]
  [topological_semiring Œ¥] [module R Œ¥] [has_continuous_const_smul R Œ¥] (g : Œ≤ ‚Üíco Œ≥) :
  C‚ÇÄ(Œ≥, Œ¥) ‚Üí‚Çô‚Çê[R] C‚ÇÄ(Œ≤, Œ¥) :=
{ to_fun := Œª f, f.comp g,
  map_smul' := Œª r f, rfl,
  map_zero' := rfl,
  map_add' := Œª f‚ÇÅ f‚ÇÇ, rfl,
  map_mul' := Œª f‚ÇÅ f‚ÇÇ, rfl }

end zero_at_infty_continuous_map
