/-
Copyright (c) 2020 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/
import logic.encodable.basic
import order.atoms
import order.upper_lower

/-!
# Order ideals, cofinal sets, and the Rasiowa‚ÄìSikorski lemma

## Main definitions

Throughout this file, `P` is at least a preorder, but some sections require more
structure, such as a bottom element, a top element, or a join-semilattice structure.
- `order.ideal P`: the type of nonempty, upward directed, and downward closed subsets of `P`.
  Dual to the notion of a filter on a preorder.
- `order.is_ideal P`: a predicate for when a `set P` is an ideal.
- `order.ideal.principal p`: the principal ideal generated by `p : P`.
- `order.ideal.is_proper P`: a predicate for proper ideals.
  Dual to the notion of a proper filter.
- `order.ideal.is_maximal`: a predicate for maximal ideals.
  Dual to the notion of an ultrafilter.
- `order.cofinal P`: the type of subsets of `P` containing arbitrarily large elements.
  Dual to the notion of 'dense set' used in forcing.
- `order.ideal_of_cofinals p ùíü`, where `p : P`, and `ùíü` is a countable family of cofinal
  subsets of P: an ideal in `P` which contains `p` and intersects every set in `ùíü`. (This a form
  of the Rasiowa‚ÄìSikorski lemma.)

## References

- <https://en.wikipedia.org/wiki/Ideal_(order_theory)>
- <https://en.wikipedia.org/wiki/Cofinal_(mathematics)>
- <https://en.wikipedia.org/wiki/Rasiowa%E2%80%93Sikorski_lemma>

Note that for the Rasiowa‚ÄìSikorski lemma, Wikipedia uses the opposite ordering on `P`,
in line with most presentations of forcing.

## Tags

ideal, cofinal, dense, countable, generic

-/

open function set

namespace order

variables {P : Type*}

/-- An ideal on an order `P` is a subset of `P` that is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
structure ideal (P) [has_le P] extends lower_set P :=
(nonempty'  : carrier.nonempty)
(directed'  : directed_on (‚â§) carrier)

/-- A subset of a preorder `P` is an ideal if it is
  - nonempty
  - upward directed (any pair of elements in the ideal has an upper bound in the ideal)
  - downward closed (any element less than an element of the ideal is in the ideal). -/
@[mk_iff] structure is_ideal {P} [has_le P] (I : set P) : Prop :=
(is_lower_set : is_lower_set I)
(nonempty : I.nonempty)
(directed : directed_on (‚â§) I)

/-- Create an element of type `order.ideal` from a set satisfying the predicate
`order.is_ideal`. -/
def is_ideal.to_ideal [has_le P] {I : set P} (h : is_ideal I) : ideal P :=
‚ü®‚ü®I, h.is_lower_set‚ü©, h.nonempty, h.directed‚ü©

namespace ideal
section has_le
variables [has_le P]

section
variables {I J s t : ideal P} {x y : P}

lemma to_lower_set_injective : injective (to_lower_set : ideal P ‚Üí lower_set P) :=
Œª s t h, by { cases s, cases t, congr' }

instance : set_like (ideal P) P :=
{ coe := Œª s, s.carrier,
  coe_injective' := Œª s t h, to_lower_set_injective $ set_like.coe_injective h }

@[ext] lemma ext {s t : ideal P} : (s : set P) = t ‚Üí s = t := set_like.ext'

@[simp] lemma carrier_eq_coe (s : ideal P) : s.carrier = s := rfl
@[simp] lemma coe_to_lower_set (s : ideal P) : (s.to_lower_set : set P) = s := rfl

protected lemma lower (s : ideal P) : is_lower_set (s : set P) := s.lower'
protected lemma nonempty (s : ideal P) : (s : set P).nonempty := s.nonempty'
protected lemma directed (s : ideal P) : directed_on (‚â§) (s : set P) := s.directed'
protected lemma is_ideal (s : ideal P) : is_ideal (s : set P) := ‚ü®s.lower, s.nonempty, s.directed‚ü©

lemma mem_compl_of_ge {x y : P} : x ‚â§ y ‚Üí x ‚àà (I : set P)·∂ú ‚Üí y ‚àà (I : set P)·∂ú := Œª h, mt $ I.lower h

/-- The partial ordering by subset inclusion, inherited from `set P`. -/
instance : partial_order (ideal P) := partial_order.lift coe set_like.coe_injective

@[simp] lemma coe_subset_coe : (s : set P) ‚äÜ t ‚Üî s ‚â§ t := iff.rfl
@[simp] lemma coe_ssubset_coe : (s : set P) ‚äÇ t ‚Üî s < t := iff.rfl

@[trans] lemma mem_of_mem_of_le {x : P} {I J : ideal P} : x ‚àà I ‚Üí I ‚â§ J ‚Üí x ‚àà J :=
@set.mem_of_mem_of_subset P x I J

/-- A proper ideal is one that is not the whole set.
    Note that the whole set might not be an ideal. -/
@[mk_iff] class is_proper (I : ideal P) : Prop := (ne_univ : (I : set P) ‚â† univ)

lemma is_proper_of_not_mem {I : ideal P} {p : P} (nmem : p ‚àâ I) : is_proper I :=
‚ü®Œª hp, begin
  change p ‚àâ ‚ÜëI at nmem,
  rw hp at nmem,
  exact nmem (mem_univ p),
end‚ü©

/-- An ideal is maximal if it is maximal in the collection of proper ideals.

Note that `is_coatom` is less general because ideals only have a top element when `P` is directed
and nonempty. -/
@[mk_iff] class is_maximal (I : ideal P) extends is_proper I : Prop :=
(maximal_proper : ‚àÄ ‚¶ÉJ : ideal P‚¶Ñ, I < J ‚Üí (J : set P) = univ)

lemma inter_nonempty [is_directed P (swap (‚â§))] (I J : ideal P) : (I ‚à© J : set P).nonempty :=
begin
  obtain ‚ü®a, ha‚ü© := I.nonempty,
  obtain ‚ü®b, hb‚ü© := J.nonempty,
  obtain ‚ü®c, hac, hbc‚ü© := directed_of (swap (‚â§)) a b,
  exact ‚ü®c, I.lower hac ha, J.lower hbc hb‚ü©,
end

end

section directed
variables [is_directed P (‚â§)] [nonempty P] {I : ideal P}

/-- In a directed and nonempty order, the top ideal of a is `univ`. -/
instance : order_top (ideal P) :=
{ top := ‚ü®‚ä§, univ_nonempty, directed_on_univ‚ü©,
  le_top := Œª I, le_top }

@[simp] lemma top_to_lower_set : (‚ä§ : ideal P).to_lower_set = ‚ä§ := rfl
@[simp] lemma coe_top : ((‚ä§ : ideal P) : set P) = univ := rfl

lemma is_proper_of_ne_top (ne_top : I ‚â† ‚ä§) : is_proper I := ‚ü®Œª h, ne_top $ ext h‚ü©

lemma is_proper.ne_top (hI : is_proper I) : I ‚â† ‚ä§ := Œª h, is_proper.ne_univ $ congr_arg coe h

lemma _root_.is_coatom.is_proper (hI : is_coatom I) : is_proper I := is_proper_of_ne_top hI.1

lemma is_proper_iff_ne_top : is_proper I ‚Üî I ‚â† ‚ä§ := ‚ü®Œª h, h.ne_top, Œª h, is_proper_of_ne_top h‚ü©

lemma is_maximal.is_coatom (h : is_maximal I) : is_coatom I :=
‚ü®is_maximal.to_is_proper.ne_top, Œª J h, ext $ is_maximal.maximal_proper h‚ü©

lemma is_maximal.is_coatom' [is_maximal I] : is_coatom I := is_maximal.is_coatom ‚Äπ_‚Ä∫

lemma _root_.is_coatom.is_maximal (hI : is_coatom I) : is_maximal I :=
{ maximal_proper := Œª _ _, by simp [hI.2 _ ‚Äπ_‚Ä∫],
  ..is_coatom.is_proper ‚Äπ_‚Ä∫ }

lemma is_maximal_iff_is_coatom : is_maximal I ‚Üî is_coatom I := ‚ü®Œª h, h.is_coatom, Œª h, h.is_maximal‚ü©

end directed

section order_bot
variables [order_bot P]

@[simp] lemma bot_mem (s : ideal P) : ‚ä• ‚àà s := s.lower bot_le s.nonempty.some_mem

end order_bot

section order_top
variables [order_top P] {I : ideal P}

lemma top_of_top_mem (h : ‚ä§ ‚àà I) : I = ‚ä§ := by { ext, exact iff_of_true (I.lower le_top h) trivial }

lemma is_proper.top_not_mem (hI : is_proper I) : ‚ä§ ‚àâ I := Œª h, hI.ne_top $ top_of_top_mem h

end order_top
end has_le

section preorder
variables [preorder P]

section
variables {I J : ideal P} {x y : P}

/-- The smallest ideal containing a given element. -/
@[simps] def principal (p : P) : ideal P :=
{ to_lower_set := lower_set.Iic p,
  nonempty' := nonempty_Iic,
  directed' := Œª x hx y hy, ‚ü®p, le_rfl, hx, hy‚ü© }

instance [inhabited P] : inhabited (ideal P) := ‚ü®ideal.principal default‚ü©

@[simp] lemma principal_le_iff : principal x ‚â§ I ‚Üî x ‚àà I :=
‚ü®Œª h, h le_rfl, Œª hx y hy, I.lower hy hx‚ü©

@[simp] lemma mem_principal : x ‚àà principal y ‚Üî x ‚â§ y := iff.rfl

end

section order_bot
variables [order_bot P]

/-- There is a bottom ideal when `P` has a bottom element. -/
instance : order_bot (ideal P) :=
{ bot := principal ‚ä•,
  bot_le := by simp }

@[simp] lemma principal_bot : principal (‚ä• : P) = ‚ä• := rfl

end order_bot

section order_top
variables [order_top P]

@[simp] lemma principal_top : principal (‚ä§ : P) = ‚ä§ := to_lower_set_injective $ lower_set.Iic_top

end order_top
end preorder

section semilattice_sup
variables [semilattice_sup P] {x y : P} {I s : ideal P}

/-- A specific witness of `I.directed` when `P` has joins. -/
lemma sup_mem (hx : x ‚àà s) (hy : y ‚àà s) : x ‚äî y ‚àà s :=
let ‚ü®z, hz, hx, hy‚ü© := s.directed x hx y hy in s.lower (sup_le hx hy) hz

@[simp] lemma sup_mem_iff : x ‚äî y ‚àà I ‚Üî x ‚àà I ‚àß y ‚àà I :=
‚ü®Œª h, ‚ü®I.lower le_sup_left h, I.lower le_sup_right h‚ü©, Œª h, sup_mem h.1 h.2‚ü©

end semilattice_sup

section semilattice_sup_directed
variables [semilattice_sup P] [is_directed P (swap (‚â§))] {x : P} {I J K s t : ideal P}

/-- The infimum of two ideals of a co-directed order is their intersection. -/
instance : has_inf (ideal P) :=
‚ü®Œª I J, { to_lower_set := I.to_lower_set ‚äì J.to_lower_set,
  nonempty' := inter_nonempty I J,
  directed' := Œª x hx y hy, ‚ü®x ‚äî y, ‚ü®sup_mem hx.1 hy.1, sup_mem hx.2 hy.2‚ü©, by simp‚ü© }‚ü©

/-- The supremum of two ideals of a co-directed order is the union of the down sets of the pointwise
supremum of `I` and `J`. -/
instance : has_sup (ideal P) :=
‚ü®Œª I J, { carrier   := {x | ‚àÉ (i ‚àà I) (j ‚àà J), x ‚â§ i ‚äî j},
  nonempty' := by { cases inter_nonempty I J, exact ‚ü®w, w, h.1, w, h.2, le_sup_left‚ü© },
  directed' := Œª x ‚ü®xi, _, xj, _, _‚ü© y ‚ü®yi, _, yj, _, _‚ü©,
    ‚ü®x ‚äî y,
     ‚ü®xi ‚äî yi, sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
      xj ‚äî yj, sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
      sup_le
        (calc x ‚â§ xi ‚äî xj               : ‚Äπ_‚Ä∫
         ...    ‚â§ (xi ‚äî yi) ‚äî (xj ‚äî yj) : sup_le_sup le_sup_left le_sup_left)
        (calc y ‚â§ yi ‚äî yj               : ‚Äπ_‚Ä∫
         ...    ‚â§ (xi ‚äî yi) ‚äî (xj ‚äî yj) : sup_le_sup le_sup_right le_sup_right)‚ü©,
     le_sup_left, le_sup_right‚ü©,
  lower' := Œª x y h ‚ü®yi, _, yj, _, _‚ü©, ‚ü®yi, ‚Äπ_‚Ä∫, yj, ‚Äπ_‚Ä∫, h.trans ‚Äπ_‚Ä∫‚ü© }‚ü©

instance : lattice (ideal P) :=
{ sup          := (‚äî),
  le_sup_left  := Œª I J (i ‚àà I), by { cases J.nonempty, exact ‚ü®i, ‚Äπ_‚Ä∫, w, ‚Äπ_‚Ä∫, le_sup_left‚ü© },
  le_sup_right := Œª I J (j ‚àà J), by { cases I.nonempty, exact ‚ü®w, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_sup_right‚ü© },
  sup_le       := Œª I J K hIK hJK a ‚ü®i, hi, j, hj, ha‚ü©,
    K.lower ha $ sup_mem (mem_of_mem_of_le hi hIK) (mem_of_mem_of_le hj hJK),
  inf          := (‚äì),
  inf_le_left  := Œª I J, inter_subset_left I J,
  inf_le_right := Œª I J, inter_subset_right I J,
  le_inf       := Œª I J K, subset_inter,
  .. ideal.partial_order }

@[simp] lemma coe_sup : ‚Üë(s ‚äî t) = {x | ‚àÉ (a ‚àà s) (b ‚àà t), x ‚â§ a ‚äî b} := rfl
@[simp] lemma coe_inf : (‚Üë(s ‚äì t) : set P) = s ‚à© t := rfl
@[simp] lemma mem_inf : x ‚àà I ‚äì J ‚Üî x ‚àà I ‚àß x ‚àà J := iff.rfl
@[simp] lemma mem_sup : x ‚àà I ‚äî J ‚Üî ‚àÉ (i ‚àà I) (j ‚àà J), x ‚â§ i ‚äî j := iff.rfl

lemma lt_sup_principal_of_not_mem (hx : x ‚àâ I) : I < I ‚äî principal x :=
le_sup_left.lt_of_ne $ Œª h, hx $ by simpa only [left_eq_sup, principal_le_iff] using h

end semilattice_sup_directed

section semilattice_sup_order_bot
variables [semilattice_sup P] [order_bot P] {x : P} {I J K : ideal P}

instance : has_Inf (ideal P) :=
‚ü®Œª S, { to_lower_set := ‚®Ö s ‚àà S, to_lower_set s,
  nonempty' := ‚ü®‚ä•, begin
    rw [lower_set.carrier_eq_coe, lower_set.coe_infi‚ÇÇ, set.mem_Inter‚ÇÇ],
    exact Œª s _, s.bot_mem,
  end‚ü©,
  directed' := Œª a ha b hb, ‚ü®a ‚äî b, ‚ü®
    begin
      rw [lower_set.carrier_eq_coe, lower_set.coe_infi‚ÇÇ, set.mem_Inter‚ÇÇ] at ‚ä¢ ha hb,
      exact Œª s hs, sup_mem (ha _ hs) (hb _ hs),
    end,
    le_sup_left, le_sup_right‚ü©‚ü© }‚ü©

variables {S : set (ideal P)}

@[simp] lemma coe_Inf : (‚Üë(Inf S) : set P) = ‚ãÇ s ‚àà S, ‚Üës := lower_set.coe_infi‚ÇÇ _

@[simp] lemma mem_Inf : x ‚àà Inf S ‚Üî ‚àÄ s ‚àà S, x ‚àà s :=
by simp_rw [‚Üêset_like.mem_coe, coe_Inf, mem_Inter‚ÇÇ]

instance : complete_lattice (ideal P) :=
{ ..ideal.lattice,
  ..complete_lattice_of_Inf (ideal P) (Œª S, begin
    refine ‚ü®Œª s hs, _, Œª s hs, by rwa [‚Üêcoe_subset_coe, coe_Inf, subset_Inter‚ÇÇ_iff]‚ü©,
    rw [‚Üêcoe_subset_coe, coe_Inf],
    exact bInter_subset_of_mem hs,
  end) }

end semilattice_sup_order_bot

section distrib_lattice

variables [distrib_lattice P]
variables {I J : ideal P}

lemma eq_sup_of_le_sup {x i j: P} (hi : i ‚àà I) (hj : j ‚àà J) (hx : x ‚â§ i ‚äî j) :
  ‚àÉ (i' ‚àà I) (j' ‚àà J), x = i' ‚äî j' :=
begin
  refine ‚ü®x ‚äì i, I.lower inf_le_right hi, x ‚äì j, J.lower inf_le_right hj, _‚ü©,
  calc
  x    = x ‚äì (i ‚äî j)       : left_eq_inf.mpr hx
  ...  = (x ‚äì i) ‚äî (x ‚äì j) : inf_sup_left,
end

lemma coe_sup_eq : ‚Üë(I ‚äî J) = {x | ‚àÉ i ‚àà I, ‚àÉ j ‚àà J, x = i ‚äî j} :=
set.ext $ Œª _, ‚ü®Œª ‚ü®_, _, _, _, _‚ü©, eq_sup_of_le_sup ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
  Œª ‚ü®i, _, j, _, _‚ü©, ‚ü®i, ‚Äπ_‚Ä∫, j, ‚Äπ_‚Ä∫, le_of_eq ‚Äπ_‚Ä∫‚ü©‚ü©

end distrib_lattice

section boolean_algebra

variables [boolean_algebra P] {x : P} {I : ideal P}

lemma is_proper.not_mem_of_compl_mem (hI : is_proper I) (hxc : x·∂ú ‚àà I) : x ‚àâ I :=
begin
  intro hx,
  apply hI.top_not_mem,
  have ht : x ‚äî x·∂ú ‚àà I := sup_mem ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫,
  rwa sup_compl_eq_top at ht,
end

lemma is_proper.not_mem_or_compl_not_mem (hI : is_proper I) : x ‚àâ I ‚à® x·∂ú ‚àâ I :=
have h : x·∂ú ‚àà I ‚Üí x ‚àâ I := hI.not_mem_of_compl_mem, by tauto

end boolean_algebra

end ideal

/-- For a preorder `P`, `cofinal P` is the type of subsets of `P`
  containing arbitrarily large elements. They are the dense sets in
  the topology whose open sets are terminal segments. -/
structure cofinal (P) [preorder P] :=
(carrier : set P)
(mem_gt  : ‚àÄ x : P, ‚àÉ y ‚àà carrier, x ‚â§ y)

namespace cofinal

variables [preorder P]

instance : inhabited (cofinal P) :=
‚ü®{ carrier := univ, mem_gt := Œª x, ‚ü®x, trivial, le_rfl‚ü© }‚ü©

instance : has_mem P (cofinal P) := ‚ü®Œª x D, x ‚àà D.carrier‚ü©

variables (D : cofinal P) (x : P)
/-- A (noncomputable) element of a cofinal set lying above a given element. -/
noncomputable def above : P := classical.some $ D.mem_gt x

lemma above_mem : D.above x ‚àà D :=
exists.elim (classical.some_spec $ D.mem_gt x) $ Œª a _, a

lemma le_above : x ‚â§ D.above x :=
exists.elim (classical.some_spec $ D.mem_gt x) $ Œª _ b, b

end cofinal

section ideal_of_cofinals

variables [preorder P] (p : P) {Œπ : Type*} [encodable Œπ] (ùíü : Œπ ‚Üí cofinal P)

/-- Given a starting point, and a countable family of cofinal sets,
  this is an increasing sequence that intersects each cofinal set. -/
noncomputable def sequence_of_cofinals : ‚Ñï ‚Üí P
| 0 := p
| (n+1) := match encodable.decode Œπ n with
           | none   := sequence_of_cofinals n
           | some i := (ùíü i).above (sequence_of_cofinals n)
           end

lemma sequence_of_cofinals.monotone : monotone (sequence_of_cofinals p ùíü) :=
by { apply monotone_nat_of_le_succ, intros n, dunfold sequence_of_cofinals,
  cases encodable.decode Œπ n, { refl }, { apply cofinal.le_above }, }

lemma sequence_of_cofinals.encode_mem (i : Œπ) :
  sequence_of_cofinals p ùíü (encodable.encode i + 1) ‚àà ùíü i :=
by { dunfold sequence_of_cofinals, rw encodable.encodek, apply cofinal.above_mem, }

/-- Given an element `p : P` and a family `ùíü` of cofinal subsets of a preorder `P`,
  indexed by a countable type, `ideal_of_cofinals p ùíü` is an ideal in `P` which
  - contains `p`, according to `mem_ideal_of_cofinals p ùíü`, and
  - intersects every set in `ùíü`, according to `cofinal_meets_ideal_of_cofinals p ùíü`.

  This proves the Rasiowa‚ÄìSikorski lemma. -/
def ideal_of_cofinals : ideal P :=
{ carrier   := { x : P | ‚àÉ n, x ‚â§ sequence_of_cofinals p ùíü n },
  lower'     := Œª x y hxy ‚ü®n, hn‚ü©, ‚ü®n, le_trans hxy hn‚ü©,
  nonempty' := ‚ü®p, 0, le_rfl‚ü©,
  directed' := Œª x ‚ü®n, hn‚ü© y ‚ü®m, hm‚ü©,
               ‚ü®_, ‚ü®max n m, le_rfl‚ü©,
               le_trans hn $ sequence_of_cofinals.monotone p ùíü (le_max_left _ _),
               le_trans hm $ sequence_of_cofinals.monotone p ùíü (le_max_right _ _) ‚ü© }

lemma mem_ideal_of_cofinals : p ‚àà ideal_of_cofinals p ùíü := ‚ü®0, le_rfl‚ü©

/-- `ideal_of_cofinals p ùíü` is `ùíü`-generic. -/
lemma cofinal_meets_ideal_of_cofinals (i : Œπ) : ‚àÉ x : P, x ‚àà ùíü i ‚àß x ‚àà ideal_of_cofinals p ùíü :=
‚ü®_, sequence_of_cofinals.encode_mem p ùíü i, _, le_rfl‚ü©

end ideal_of_cofinals

end order
