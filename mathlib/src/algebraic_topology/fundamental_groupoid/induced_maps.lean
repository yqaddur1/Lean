/-
Copyright (c) 2022 Praneeth Kolichala. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Praneeth Kolichala
-/
import topology.homotopy.equiv
import category_theory.equivalence
import algebraic_topology.fundamental_groupoid.product

/-!
# Homotopic maps induce naturally isomorphic functors

## Main definitions

  - `fundamental_groupoid_functor.homotopic_maps_nat_iso H` The natural isomorphism
    between the induced functors `f : œÄ(X) ‚•§ œÄ(Y)` and `g : œÄ(X) ‚•§ œÄ(Y)`, given a homotopy
    `H : f ‚àº g`

  - `fundamental_groupoid_functor.equiv_of_homotopy_equiv hequiv` The equivalence of the categories
    `œÄ(X)` and `œÄ(Y)` given a homotopy equivalence `hequiv : X ‚âÉ‚Çï Y` between them.

## Implementation notes
  - In order to be more universe polymorphic, we define `continuous_map.homotopy.ulift_map`
  which lifts a homotopy from `I √ó X ‚Üí Y` to `(Top.of ((ulift I) √ó X)) ‚Üí Y`. This is because
  this construction uses `fundamental_groupoid_functor.prod_to_prod_Top` to convert between
  pairs of paths in I and X and the corresponding path after passing through a homotopy `H`.
  But `fundamental_groupoid_functor.prod_to_prod_Top` requires two spaces in the same universe.
-/

noncomputable theory

universe u

open fundamental_groupoid
open category_theory
open fundamental_groupoid_functor

open_locale fundamental_groupoid
open_locale unit_interval

namespace unit_interval

/-- The path 0 ‚ü∂ 1 in I -/
def path01 : path (0 : I) 1 := { to_fun := id, source' := rfl, target' := rfl }

/-- The path 0 ‚ü∂ 1 in ulift I -/
def upath01 : path (ulift.up 0 : ulift.{u} I) (ulift.up 1) :=
{ to_fun := ulift.up, source' := rfl, target' := rfl }

local attribute [instance] path.homotopic.setoid
/-- The homotopy path class of 0 ‚Üí 1 in `ulift I` -/
def uhpath01 : @from_top (Top.of $ ulift.{u} I) (ulift.up (0 : I)) ‚ü∂ from_top (ulift.up 1) :=
‚ü¶upath01‚üß

end unit_interval

namespace continuous_map.homotopy
open unit_interval (uhpath01)

local attribute [instance] path.homotopic.setoid

section casts

/-- Abbreviation for `eq_to_hom` that accepts points in a topological space -/
abbreviation hcast {X : Top} {x‚ÇÄ x‚ÇÅ : X} (hx : x‚ÇÄ = x‚ÇÅ) : from_top x‚ÇÄ ‚ü∂ from_top x‚ÇÅ := eq_to_hom hx

@[simp] lemma hcast_def {X : Top} {x‚ÇÄ x‚ÇÅ : X} (hx‚ÇÄ : x‚ÇÄ = x‚ÇÅ) : hcast hx‚ÇÄ = eq_to_hom hx‚ÇÄ := rfl

variables {X‚ÇÅ X‚ÇÇ Y : Top.{u}} {f : C(X‚ÇÅ, Y)} {g : C(X‚ÇÇ, Y)}
  {x‚ÇÄ x‚ÇÅ : X‚ÇÅ} {x‚ÇÇ x‚ÇÉ : X‚ÇÇ} {p : path x‚ÇÄ x‚ÇÅ} {q : path x‚ÇÇ x‚ÇÉ} (hfg : ‚àÄ t, f (p t) = g (q t))

include hfg

/-- If `f(p(t) = g(q(t))` for two paths `p` and `q`, then the induced path homotopy classes
`f(p)` and `g(p)` are the same as well, despite having a priori different types -/
lemma heq_path_of_eq_image : (œÄ‚Çò f).map ‚ü¶p‚üß == (œÄ‚Çò g).map ‚ü¶q‚üß :=
by { simp only [map_eq, ‚Üê path.homotopic.map_lift], apply path.homotopic.hpath_hext, exact hfg, }

private lemma start_path : f x‚ÇÄ = g x‚ÇÇ := by { convert hfg 0; simp only [path.source], }
private lemma end_path : f x‚ÇÅ = g x‚ÇÉ := by { convert hfg 1; simp only [path.target], }

lemma eq_path_of_eq_image :
  (œÄ‚Çò f).map ‚ü¶p‚üß = hcast (start_path hfg) ‚â´ (œÄ‚Çò g).map ‚ü¶q‚üß ‚â´ hcast (end_path hfg).symm :=
by { rw functor.conj_eq_to_hom_iff_heq, exact heq_path_of_eq_image hfg }

end casts

/- We let `X` and `Y` be spaces, and `f` and `g` be homotopic maps between them -/
variables {X Y : Top.{u}} {f g : C(X, Y)} (H : continuous_map.homotopy f g)
  {x‚ÇÄ x‚ÇÅ : X} (p : from_top x‚ÇÄ ‚ü∂ from_top x‚ÇÅ)

/-!
These definitions set up the following diagram, for each path `p`:

            f(p)
        *--------*
        | \      |
    H‚ÇÄ  |   \ d  |  H‚ÇÅ
        |     \  |
        *--------*
            g(p)

Here, `H‚ÇÄ = H.eval_at x‚ÇÄ` is the path from `f(x‚ÇÄ)` to `g(x‚ÇÄ)`,
and similarly for `H‚ÇÅ`. Similarly, `f(p)` denotes the
path in Y that the induced map `f` takes `p`, and similarly for `g(p)`.

Finally, `d`, the diagonal path, is H(0 ‚ü∂ 1, p), the result of the induced `H` on
`path.homotopic.prod (0 ‚ü∂ 1) p`, where `(0 ‚ü∂ 1)` denotes the path from `0` to `1` in `I`.

It is clear that the diagram commutes (`H‚ÇÄ ‚â´ g(p) = d = f(p) ‚â´ H‚ÇÅ`), but unfortunately,
many of the paths do not have defeq starting/ending points, so we end up needing some casting.
-/

/-- Interpret a homotopy `H : C(I √ó X, Y) as a map C(ulift I √ó X, Y) -/
def ulift_map : C(Top.of (ulift.{u} I √ó X), Y) :=
‚ü®Œª x, H (x.1.down, x.2),
  H.continuous.comp ((continuous_induced_dom.comp continuous_fst).prod_mk continuous_snd)‚ü©

@[simp] lemma ulift_apply (i : ulift.{u} I) (x : X) : H.ulift_map (i, x) = H (i.down, x) := rfl

/-- An abbreviation for `prod_to_prod_Top`, with some types already in place to help the
 typechecker. In particular, the first path should be on the ulifted unit interval. -/
abbreviation prod_to_prod_Top_I {a‚ÇÅ a‚ÇÇ : Top.of (ulift I)} {b‚ÇÅ b‚ÇÇ : X}
  (p‚ÇÅ : from_top a‚ÇÅ ‚ü∂ from_top a‚ÇÇ) (p‚ÇÇ : from_top b‚ÇÅ ‚ü∂ from_top b‚ÇÇ) :=
@category_theory.functor.map _ _ _ _ (prod_to_prod_Top (Top.of $ ulift I) X)
  (a‚ÇÅ, b‚ÇÅ) (a‚ÇÇ, b‚ÇÇ) (p‚ÇÅ, p‚ÇÇ)

/-- The diagonal path `d` of a homotopy `H` on a path `p` -/
def diagonal_path : from_top (H (0, x‚ÇÄ)) ‚ü∂ from_top (H (1, x‚ÇÅ)) :=
(œÄ‚Çò H.ulift_map).map (prod_to_prod_Top_I uhpath01 p)

/-- The diagonal path, but starting from `f x‚ÇÄ` and going to `g x‚ÇÅ` -/
def diagonal_path' : from_top (f x‚ÇÄ) ‚ü∂ from_top (g x‚ÇÅ) :=
hcast (H.apply_zero x‚ÇÄ).symm ‚â´ (H.diagonal_path p) ‚â´ hcast (H.apply_one x‚ÇÅ)

/-- Proof that `f(p) = H(0 ‚ü∂ 0, p)`, with the appropriate casts -/
lemma apply_zero_path : (œÄ‚Çò f).map p = hcast (H.apply_zero x‚ÇÄ).symm ‚â´
(œÄ‚Çò H.ulift_map).map (prod_to_prod_Top_I (ùüô (ulift.up 0)) p) ‚â´
hcast (H.apply_zero x‚ÇÅ) :=
begin
  apply quotient.induction_on p,
  intro p',
  apply @eq_path_of_eq_image _ _ _ _ H.ulift_map _ _ _ _ _ ((path.refl (ulift.up _)).prod p'),
  simp,
end

/-- Proof that `g(p) = H(1 ‚ü∂ 1, p)`, with the appropriate casts -/
lemma apply_one_path : (œÄ‚Çò g).map p = hcast (H.apply_one x‚ÇÄ).symm ‚â´
((œÄ‚Çò H.ulift_map).map (prod_to_prod_Top_I (ùüô (ulift.up 1)) p)) ‚â´
hcast (H.apply_one x‚ÇÅ) :=
begin
  apply quotient.induction_on p,
  intro p',
  apply @eq_path_of_eq_image _ _ _ _ H.ulift_map _ _ _ _ _ ((path.refl (ulift.up _)).prod p'),
  simp,
end

/-- Proof that `H.eval_at x = H(0 ‚ü∂ 1, x ‚ü∂ x)`, with the appropriate casts -/
lemma eval_at_eq (x : X) : ‚ü¶H.eval_at x‚üß =
  hcast (H.apply_zero x).symm ‚â´
(œÄ‚Çò H.ulift_map).map (prod_to_prod_Top_I uhpath01 (ùüô x)) ‚â´
hcast (H.apply_one x).symm.symm :=
begin
  dunfold prod_to_prod_Top_I uhpath01 hcast,
  refine (@functor.conj_eq_to_hom_iff_heq (œÄ‚Çì Y) _ _ _ _ _ _ _ _ _).mpr _,
  simp only [id_eq_path_refl, prod_to_prod_Top_map, path.homotopic.prod_lift, map_eq,
    ‚Üê path.homotopic.map_lift],
  apply path.homotopic.hpath_hext, intro, refl,
end

/- Finally, we show `d = f(p) ‚â´ H‚ÇÅ = H‚ÇÄ ‚â´ g(p)` -/
lemma eq_diag_path :
  (œÄ‚Çò f).map p ‚â´ ‚ü¶H.eval_at x‚ÇÅ‚üß = H.diagonal_path' p ‚àß
  (‚ü¶H.eval_at x‚ÇÄ‚üß ‚â´ (œÄ‚Çò g).map p : from_top (f x‚ÇÄ) ‚ü∂ from_top (g x‚ÇÅ)) = H.diagonal_path' p :=
begin
  rw [H.apply_zero_path, H.apply_one_path, H.eval_at_eq, H.eval_at_eq],
  dunfold prod_to_prod_Top_I,
  split; { slice_lhs 2 5 { simp [‚Üê category_theory.functor.map_comp], }, refl, },
end

end continuous_map.homotopy

namespace fundamental_groupoid_functor
open category_theory
open_locale fundamental_groupoid
local attribute [instance] path.homotopic.setoid

variables {X Y : Top.{u}} {f g : C(X, Y)} (H : continuous_map.homotopy f g)

/-- Given a homotopy H : f ‚àº g, we have an associated natural isomorphism between the induced
functors `f` and `g` -/
def homotopic_maps_nat_iso : œÄ‚Çò f ‚ü∂ œÄ‚Çò g :=
{ app := Œª x, ‚ü¶H.eval_at x‚üß,
  naturality' := Œª x y p, by rw [(H.eq_diag_path p).1, (H.eq_diag_path p).2] }

instance : is_iso (homotopic_maps_nat_iso H) := by apply nat_iso.is_iso_of_is_iso_app

open_locale continuous_map

/-- Homotopy equivalent topological spaces have equivalent fundamental groupoids. -/
def equiv_of_homotopy_equiv (hequiv : X ‚âÉ‚Çï Y) : œÄ‚Çì X ‚âå œÄ‚Çì Y :=
begin
  apply equivalence.mk
    (œÄ‚Çò hequiv.to_fun : œÄ‚Çì X ‚•§ œÄ‚Çì Y)
    (œÄ‚Çò hequiv.inv_fun : œÄ‚Çì Y ‚•§ œÄ‚Çì X);
  simp only [Groupoid.hom_to_functor, Groupoid.id_to_functor],
  { convert (as_iso (homotopic_maps_nat_iso hequiv.left_inv.some)).symm,
    exacts [((œÄ).map_id X).symm, ((œÄ).map_comp _ _).symm] },
  { convert as_iso (homotopic_maps_nat_iso hequiv.right_inv.some),
    exacts [((œÄ).map_comp _ _).symm, ((œÄ).map_id Y).symm] },
end

end fundamental_groupoid_functor
