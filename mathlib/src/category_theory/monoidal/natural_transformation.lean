/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.monoidal.functor
import category_theory.full_subcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

(Lax) monoidal functors between a fixed pair of monoidal categories
themselves form a category.
-/

open category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory.category
open category_theory.functor

namespace category_theory

open monoidal_category

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] [monoidal_category.{v‚ÇÅ} C]
          {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [monoidal_category.{v‚ÇÇ} D]

/--
A monoidal natural transformation is a natural transformation between (lax) monoidal functors
additionally satisfying:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`
-/
@[ext]
structure monoidal_nat_trans (F G : lax_monoidal_functor C D)
  extends nat_trans F.to_functor G.to_functor :=
(unit' : F.Œµ ‚â´ app (ùüô_ C) = G.Œµ . obviously)
(tensor' : ‚àÄ X Y, F.Œº _ _ ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº _ _ . obviously)

restate_axiom monoidal_nat_trans.tensor'
attribute [simp, reassoc] monoidal_nat_trans.tensor
restate_axiom monoidal_nat_trans.unit'
attribute [simp, reassoc] monoidal_nat_trans.unit

namespace monoidal_nat_trans

/--
The identity monoidal natural transformation.
-/
@[simps]
def id (F : lax_monoidal_functor C D) : monoidal_nat_trans F F :=
{ ..(ùüô F.to_functor) }

instance (F : lax_monoidal_functor C D) : inhabited (monoidal_nat_trans F F) := ‚ü®id F‚ü©

/--
Vertical composition of monoidal natural transformations.
-/
@[simps]
def vcomp {F G H : lax_monoidal_functor C D}
  (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans G H) : monoidal_nat_trans F H :=
{ ..(nat_trans.vcomp Œ±.to_nat_trans Œ≤.to_nat_trans) }

instance category_lax_monoidal_functor : category (lax_monoidal_functor C D) :=
{ hom := monoidal_nat_trans,
  id := id,
  comp := Œª F G H Œ± Œ≤, vcomp Œ± Œ≤, }

@[simp] lemma comp_to_nat_trans_lax {F G H : lax_monoidal_functor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
  (Œ± ‚â´ Œ≤).to_nat_trans =
    @category_struct.comp (C ‚•§ D) _ _ _ _ (Œ±.to_nat_trans) (Œ≤.to_nat_trans) := rfl

instance category_monoidal_functor : category (monoidal_functor C D) :=
induced_category.category monoidal_functor.to_lax_monoidal_functor

@[simp] lemma comp_to_nat_trans {F G H : monoidal_functor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
  (Œ± ‚â´ Œ≤).to_nat_trans =
    @category_struct.comp (C ‚•§ D) _ _ _ _ (Œ±.to_nat_trans) (Œ≤.to_nat_trans) := rfl

variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E] [monoidal_category.{v‚ÇÉ} E]

/--
Horizontal composition of monoidal natural transformations.
-/
@[simps]
def hcomp {F G : lax_monoidal_functor C D} {H K : lax_monoidal_functor D E}
  (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans H K) :
  monoidal_nat_trans (F ‚äó‚ãô H) (G ‚äó‚ãô K) :=
{ unit' :=
  begin
    dsimp, simp,
    conv_lhs { rw [‚ÜêK.to_functor.map_comp, Œ±.unit], },
  end,
  tensor' := Œª X Y,
  begin
    dsimp, simp,
    conv_lhs { rw [‚ÜêK.to_functor.map_comp, Œ±.tensor, K.to_functor.map_comp], },
  end,
  ..(nat_trans.hcomp Œ±.to_nat_trans Œ≤.to_nat_trans) }

section

local attribute [simp] nat_trans.naturality monoidal_nat_trans.unit monoidal_nat_trans.tensor

/-- The cartesian product of two monoidal natural transformations is monoidal. -/
@[simps]
def prod {F G : lax_monoidal_functor C D} {H K : lax_monoidal_functor C E}
  (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans H K) :
  monoidal_nat_trans (F.prod' H) (G.prod' K) :=
{ app := Œª X, (Œ±.app X, Œ≤.app X) }

end

end monoidal_nat_trans

namespace monoidal_nat_iso

variables {F G : lax_monoidal_functor C D}

/--
Construct a monoidal natural isomorphism from object level isomorphisms,
and the monoidal naturality in the forward direction.
-/
def of_components
  (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X)
  (naturality : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), F.map f ‚â´ (app Y).hom = (app X).hom ‚â´ G.map f)
  (unit : F.Œµ ‚â´ (app (ùüô_ C)).hom = G.Œµ)
  (tensor : ‚àÄ X Y, F.Œº X Y ‚â´ (app (X ‚äó Y)).hom = ((app X).hom ‚äó (app Y).hom) ‚â´ G.Œº X Y) :
  F ‚âÖ G :=
{ hom := { app := Œª X, (app X).hom, },
  inv :=
  { app := Œª X, (app X).inv,
    unit' := by { dsimp, rw [‚Üêunit, assoc, iso.hom_inv_id, comp_id], },
    tensor' := Œª X Y,
    begin
      dsimp,
      rw [iso.comp_inv_eq, assoc, tensor, ‚Üêtensor_comp_assoc,
        iso.inv_hom_id, iso.inv_hom_id, tensor_id, id_comp],
    end,
    ..(nat_iso.of_components app @naturality).inv, }, }

@[simp] lemma of_components.hom_app
  (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) (naturality) (unit) (tensor) (X) :
  (of_components app naturality unit tensor).hom.app X = (app X).hom := rfl
@[simp] lemma of_components.inv_app
  (app : ‚àÄ X : C, F.obj X ‚âÖ G.obj X) (naturality) (unit) (tensor) (X) :
  (of_components app naturality unit tensor).inv.app X = (app X).inv :=
by simp [of_components]

instance is_iso_of_is_iso_app (Œ± : F ‚ü∂ G) [‚àÄ X : C, is_iso (Œ±.app X)] : is_iso Œ± :=
‚ü®(is_iso.of_iso (of_components (Œª X, as_iso (Œ±.app X))
  (Œª X Y f, Œ±.to_nat_trans.naturality f) Œ±.unit Œ±.tensor)).1‚ü©

end monoidal_nat_iso

noncomputable theory

/-- The unit of a monoidal equivalence can be upgraded to a monoidal natural transformation. -/
@[simps]
def monoidal_unit (F : monoidal_functor C D) [is_equivalence F.to_functor] :
  lax_monoidal_functor.id C ‚ü∂
    F.to_lax_monoidal_functor ‚äó‚ãô (monoidal_inverse F).to_lax_monoidal_functor :=
let e := F.to_functor.as_equivalence in
{ to_nat_trans := e.unit,
  tensor' := Œª X Y, begin
    -- This proof is not pretty; golfing welcome!
    dsimp,
    simp only [adjunction.hom_equiv_unit, adjunction.hom_equiv_naturality_right,
      category.id_comp, category.assoc],
    simp only [‚Üêfunctor.map_comp],
    erw [e.counit_app_functor, e.counit_app_functor, F.to_lax_monoidal_functor.Œº_natural,
      is_iso.inv_hom_id_assoc],
    simp only [category_theory.is_equivalence.inv_fun_map],
    slice_rhs 2 3 { erw iso.hom_inv_id_app, },
    dsimp,
    simp only [category_theory.category.id_comp],
    slice_rhs 1 2 { rw [‚Üêtensor_comp, iso.hom_inv_id_app, iso.hom_inv_id_app],
      dsimp, rw [tensor_id], },
    simp,
  end }.

instance (F : monoidal_functor C D) [is_equivalence F.to_functor] : is_iso (monoidal_unit F) :=
begin
  haveI : ‚àÄ (X : C), is_iso ((monoidal_unit F).to_nat_trans.app X),
  { intros, dsimp, apply_instance, },
  exact monoidal_nat_iso.is_iso_of_is_iso_app _
end

/-- The counit of a monoidal equivalence can be upgraded to a monoidal natural transformation. -/
@[simps]
def monoidal_counit (F : monoidal_functor C D) [is_equivalence F.to_functor] :
  (monoidal_inverse F).to_lax_monoidal_functor ‚äó‚ãô F.to_lax_monoidal_functor ‚ü∂
    lax_monoidal_functor.id D :=
let e := F.to_functor.as_equivalence in
{ to_nat_trans := e.counit,
  unit' := begin
    dsimp,
    simp only [category.comp_id, category.assoc, functor.map_inv, functor.map_comp,
      nat_iso.inv_inv_app, is_iso.inv_comp, is_equivalence.fun_inv_map, adjunction.hom_equiv_unit],
    erw [e.counit_app_functor, ‚Üêe.functor.map_comp_assoc, iso.hom_inv_id_app],
    dsimp, simp,
  end,
  tensor' := Œª X Y, begin
    dsimp,
    simp only [adjunction.hom_equiv_unit, adjunction.hom_equiv_naturality_right, category.assoc,
      category.comp_id, functor.map_comp],
    simp only [is_equivalence.fun_inv_map],
    erw [e.counit_app_functor],
    simp only [category.assoc],
    erw [‚Üêe.functor.map_comp_assoc],
    simp only [category_theory.iso.inv_hom_id_app,
      category_theory.iso.inv_hom_id_app_assoc],
    erw [iso.hom_inv_id_app],
    erw [category_theory.functor.map_id],
    simp only [category.id_comp],
    simp only [category_theory.iso.inv_hom_id_app,
      category_theory.is_iso.hom_inv_id_assoc],
    erw [iso.inv_hom_id_app],
    dsimp, simp, refl,
  end }

instance (F : monoidal_functor C D) [is_equivalence F.to_functor] : is_iso (monoidal_counit F) :=
begin
  haveI : ‚àÄ (X : D), is_iso ((monoidal_counit F).to_nat_trans.app X),
  { intros, dsimp, apply_instance, },
  exact monoidal_nat_iso.is_iso_of_is_iso_app _
end

end category_theory
