/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Markus Himmel
-/
import category_theory.epi_mono
import category_theory.limits.has_limits

/-!
# Equalizers and coequalizers

This file defines (co)equalizers as special cases of (co)limits.

An equalizer is the categorical generalization of the subobject {a ‚àà A | f(a) = g(a)} known
from abelian groups or modules. It is a limit cone over the diagram formed by `f` and `g`.

A coequalizer is the dual concept.

## Main definitions

* `walking_parallel_pair` is the indexing category used for (co)equalizer_diagrams
* `parallel_pair` is a functor from `walking_parallel_pair` to our category `C`.
* a `fork` is a cone over a parallel pair.
  * there is really only one interesting morphism in a fork: the arrow from the vertex of the fork
    to the domain of f and g. It is called `fork.Œπ`.
* an `equalizer` is now just a `limit (parallel_pair f g)`

Each of these has a dual.

## Main statements

* `equalizer.Œπ_mono` states that every equalizer map is a monomorphism
* `is_iso_limit_cone_parallel_pair_of_self` states that the identity on the domain of `f` is an
  equalizer of `f` and `f`.

## Implementation notes
As with the other special shapes in the limits library, all the definitions here are given as
`abbreviation`s of the general statements for limits, so all the `simp` lemmas and theorems about
general limits can be used.

## References

* [F. Borceux, *Handbook of Categorical Algebra 1*][borceux-vol1]
-/

noncomputable theory

open category_theory opposite

namespace category_theory.limits

local attribute [tidy] tactic.case_bash

universes v u u‚ÇÇ

/-- The type of objects for the diagram indexing a (co)equalizer. -/
@[derive decidable_eq, derive inhabited] inductive walking_parallel_pair : Type v
| zero | one

open walking_parallel_pair

/-- The type family of morphisms for the diagram indexing a (co)equalizer. -/
@[derive decidable_eq] inductive walking_parallel_pair_hom :
  walking_parallel_pair ‚Üí walking_parallel_pair ‚Üí Type v
| left : walking_parallel_pair_hom zero one
| right : walking_parallel_pair_hom zero one
| id : Œ† X : walking_parallel_pair.{v}, walking_parallel_pair_hom X X

/-- Satisfying the inhabited linter -/
instance : inhabited (walking_parallel_pair_hom zero one) :=
{ default := walking_parallel_pair_hom.left }

open walking_parallel_pair_hom

/-- Composition of morphisms in the indexing diagram for (co)equalizers. -/
def walking_parallel_pair_hom.comp :
  Œ† (X Y Z : walking_parallel_pair)
    (f : walking_parallel_pair_hom X Y) (g : walking_parallel_pair_hom Y Z),
    walking_parallel_pair_hom X Z
  | _ _ _ (id _) h := h
  | _ _ _ left   (id one) := left
  | _ _ _ right  (id one) := right
.

instance walking_parallel_pair_hom_category : small_category walking_parallel_pair :=
{ hom  := walking_parallel_pair_hom,
  id   := walking_parallel_pair_hom.id,
  comp := walking_parallel_pair_hom.comp }

@[simp]
lemma walking_parallel_pair_hom_id (X : walking_parallel_pair) :
  walking_parallel_pair_hom.id X = ùüô X :=
rfl

/--
The functor `walking_parallel_pair ‚•§ walking_parallel_pair·µí·µñ` sending left to left and right to
right.
-/
def walking_parallel_pair_op : walking_parallel_pair.{u} ‚•§ walking_parallel_pair.{u‚ÇÇ}·µí·µñ :=
{ obj := (Œª x, op $ by { cases x, exacts [one, zero] }),
  map := Œª i j f, by { cases f; apply quiver.hom.op, exacts [left, right,
    walking_parallel_pair_hom.id _] },
  map_comp' := by { rintros (_|_) (_|_) (_|_) (_|_|_) (_|_|_); refl } }

@[simp] lemma walking_parallel_pair_op_zero :
  walking_parallel_pair_op.obj zero = op one := rfl
@[simp] lemma walking_parallel_pair_op_one :
  walking_parallel_pair_op.obj one = op zero := rfl
@[simp] lemma walking_parallel_pair_op_left :
  walking_parallel_pair_op.map left = @quiver.hom.op _ _ zero one left := rfl
@[simp] lemma walking_parallel_pair_op_right :
  walking_parallel_pair_op.map right = @quiver.hom.op _ _ zero one right := rfl

/--
The equivalence `walking_parallel_pair ‚•§ walking_parallel_pair·µí·µñ` sending left to left and right to
right.
-/
@[simps functor inverse]
def walking_parallel_pair_op_equiv : walking_parallel_pair.{u} ‚âå walking_parallel_pair.{u‚ÇÇ}·µí·µñ :=
{ functor := walking_parallel_pair_op,
  inverse := walking_parallel_pair_op.left_op,
  unit_iso := nat_iso.of_components (Œª j, eq_to_iso (by { cases j; refl }))
    (by { rintros (_|_) (_|_) (_|_|_); refl }),
  counit_iso := nat_iso.of_components (Œª j, eq_to_iso
    (by { induction j using opposite.rec, cases j; refl }))
    (Œª i j f, by { induction i using opposite.rec, induction j using opposite.rec,
      let g := f.unop, have : f = g.op := rfl, clear_value g, subst this,
      rcases i with (_|_); rcases j with (_|_); rcases g with (_|_|_); refl }) }

@[simp] lemma walking_parallel_pair_op_equiv_unit_iso_zero :
  walking_parallel_pair_op_equiv.{u u‚ÇÇ}.unit_iso.app zero = iso.refl zero := rfl
@[simp] lemma walking_parallel_pair_op_equiv_unit_iso_one :
  walking_parallel_pair_op_equiv.{u u‚ÇÇ}.unit_iso.app one = iso.refl one := rfl
@[simp] lemma walking_parallel_pair_op_equiv_counit_iso_zero :
  walking_parallel_pair_op_equiv.{u u‚ÇÇ}.counit_iso.app (op zero) = iso.refl (op zero) := rfl
@[simp] lemma walking_parallel_pair_op_equiv_counit_iso_one :
  walking_parallel_pair_op_equiv.{u u‚ÇÇ}.counit_iso.app (op one) = iso.refl (op one) := rfl

variables {C : Type u} [category.{v} C]
variables {X Y : C}

/-- `parallel_pair f g` is the diagram in `C` consisting of the two morphisms `f` and `g` with
    common domain and codomain. -/
def parallel_pair (f g : X ‚ü∂ Y) : walking_parallel_pair.{v} ‚•§ C :=
{ obj := Œª x, match x with
  | zero := X
  | one := Y
  end,
  map := Œª x y h, match x, y, h with
  | _, _, (id _) := ùüô _
  | _, _, left := f
  | _, _, right := g
  end,
  -- `tidy` can cope with this, but it's too slow:
  map_comp' := begin rintros (‚ü®‚ü©|‚ü®‚ü©) (‚ü®‚ü©|‚ü®‚ü©) (‚ü®‚ü©|‚ü®‚ü©) ‚ü®‚ü©‚ü®‚ü©; { unfold_aux, simp; refl }, end, }.

@[simp] lemma parallel_pair_obj_zero (f g : X ‚ü∂ Y) : (parallel_pair f g).obj zero = X := rfl
@[simp] lemma parallel_pair_obj_one (f g : X ‚ü∂ Y) : (parallel_pair f g).obj one = Y := rfl

@[simp] lemma parallel_pair_map_left (f g : X ‚ü∂ Y) : (parallel_pair f g).map left = f := rfl
@[simp] lemma parallel_pair_map_right (f g : X ‚ü∂ Y) : (parallel_pair f g).map right = g := rfl

@[simp] lemma parallel_pair_functor_obj
  {F : walking_parallel_pair ‚•§ C} (j : walking_parallel_pair) :
  (parallel_pair (F.map left) (F.map right)).obj j = F.obj j :=
begin
  cases j; refl
end

/-- Every functor indexing a (co)equalizer is naturally isomorphic (actually, equal) to a
    `parallel_pair` -/
@[simps]
def diagram_iso_parallel_pair (F : walking_parallel_pair ‚•§ C) :
  F ‚âÖ parallel_pair (F.map left) (F.map right) :=
nat_iso.of_components (Œª j, eq_to_iso $ by cases j; tidy) $ by tidy

/-- Construct a morphism between parallel pairs. -/
def parallel_pair_hom {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X') (q : Y ‚ü∂ Y')
  (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') : parallel_pair f g ‚ü∂ parallel_pair f' g' :=
{ app := Œª j, match j with
  | zero := p
  | one := q
  end,
  naturality' := begin
    rintros (‚ü®‚ü©|‚ü®‚ü©) (‚ü®‚ü©|‚ü®‚ü©) ‚ü®‚ü©; { unfold_aux, simp [wf, wg], },
  end }

@[simp] lemma parallel_pair_hom_app_zero
  {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X') (q : Y ‚ü∂ Y')
  (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') :
  (parallel_pair_hom f g f' g' p q wf wg).app zero = p := rfl

@[simp] lemma parallel_pair_hom_app_one
  {X' Y' : C} (f g : X ‚ü∂ Y) (f' g' : X' ‚ü∂ Y') (p : X ‚ü∂ X') (q : Y ‚ü∂ Y')
  (wf : f ‚â´ q = p ‚â´ f') (wg : g ‚â´ q = p ‚â´ g') :
  (parallel_pair_hom f g f' g' p q wf wg).app one = q := rfl

/-- Construct a natural isomorphism between functors out of the walking parallel pair from
its components. -/
@[simps]
def parallel_pair.ext {F G : walking_parallel_pair.{v} ‚•§ C}
  (zero : F.obj zero ‚âÖ G.obj zero) (one : F.obj one ‚âÖ G.obj one)
  (left : F.map left ‚â´ one.hom = zero.hom ‚â´ G.map left)
  (right : F.map right ‚â´ one.hom = zero.hom ‚â´ G.map right) : F ‚âÖ G :=
nat_iso.of_components
  (by { rintro ‚ü®j‚ü©, exacts [zero, one] })
  (by { rintro ‚ü®j‚ÇÅ‚ü© ‚ü®j‚ÇÇ‚ü© ‚ü®f‚ü©; simp [left, right], })

/-- A fork on `f` and `g` is just a `cone (parallel_pair f g)`. -/
abbreviation fork (f g : X ‚ü∂ Y) := cone (parallel_pair f g)

/-- A cofork on `f` and `g` is just a `cocone (parallel_pair f g)`. -/
abbreviation cofork (f g : X ‚ü∂ Y) := cocone (parallel_pair f g)

variables {f g : X ‚ü∂ Y}

/-- A fork `t` on the parallel pair `f g : X ‚ü∂ Y` consists of two morphisms `t.œÄ.app zero : t.X ‚ü∂ X`
    and `t.œÄ.app one : t.X ‚ü∂ Y`. Of these, only the first one is interesting, and we give it the
    shorter name `fork.Œπ t`. -/
def fork.Œπ (t : fork f g) := t.œÄ.app zero

@[simp] lemma fork.app_zero_eq_Œπ (t : fork f g) : t.œÄ.app zero = t.Œπ := rfl

/-- A cofork `t` on the parallel_pair `f g : X ‚ü∂ Y` consists of two morphisms
    `t.Œπ.app zero : X ‚ü∂ t.X` and `t.Œπ.app one : Y ‚ü∂ t.X`. Of these, only the second one is
    interesting, and we give it the shorter name `cofork.œÄ t`. -/
def cofork.œÄ (t : cofork f g) := t.Œπ.app one

@[simp] lemma cofork.app_one_eq_œÄ (t : cofork f g) : t.Œπ.app one = t.œÄ := rfl

@[simp] lemma fork.app_one_eq_Œπ_comp_left (s : fork f g) : s.œÄ.app one = s.Œπ ‚â´ f :=
by rw [‚Üês.app_zero_eq_Œπ, ‚Üês.w left, parallel_pair_map_left]

@[reassoc] lemma fork.app_one_eq_Œπ_comp_right (s : fork f g) : s.œÄ.app one = s.Œπ ‚â´ g :=
by rw [‚Üês.app_zero_eq_Œπ, ‚Üês.w right, parallel_pair_map_right]

@[simp] lemma cofork.app_zero_eq_comp_œÄ_left (s : cofork f g) : s.Œπ.app zero = f ‚â´ s.œÄ :=
by rw [‚Üês.app_one_eq_œÄ, ‚Üês.w left, parallel_pair_map_left]

@[reassoc] lemma cofork.app_zero_eq_comp_œÄ_right (s : cofork f g) : s.Œπ.app zero = g ‚â´ s.œÄ :=
by rw [‚Üês.app_one_eq_œÄ, ‚Üês.w right, parallel_pair_map_right]

/-- A fork on `f g : X ‚ü∂ Y` is determined by the morphism `Œπ : P ‚ü∂ X` satisfying `Œπ ‚â´ f = Œπ ‚â´ g`.
-/
@[simps]
def fork.of_Œπ {P : C} (Œπ : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g) : fork f g :=
{ X := P,
  œÄ :=
  { app := Œª X, begin cases X, exact Œπ, exact Œπ ‚â´ f, end,
    naturality' := Œª X Y f,
    begin
      cases X; cases Y; cases f; dsimp; simp,
      { dsimp, simp, }, -- See note [dsimp, simp].
      { exact w },
      { dsimp, simp, },
    end } }

/-- A cofork on `f g : X ‚ü∂ Y` is determined by the morphism `œÄ : Y ‚ü∂ P` satisfying
    `f ‚â´ œÄ = g ‚â´ œÄ`. -/
@[simps]
def cofork.of_œÄ {P : C} (œÄ : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ) : cofork f g :=
{ X := P,
  Œπ :=
  { app := Œª X, walking_parallel_pair.cases_on X (f ‚â´ œÄ) œÄ,
    naturality' := Œª i j f, by { cases f; dsimp; simp [w] } } } -- See note [dsimp, simp]

@[simp] lemma fork.Œπ_of_Œπ {P : C} (Œπ : P ‚ü∂ X) (w : Œπ ‚â´ f = Œπ ‚â´ g) :
  (fork.of_Œπ Œπ w).Œπ = Œπ := rfl
@[simp] lemma cofork.œÄ_of_œÄ {P : C} (œÄ : Y ‚ü∂ P) (w : f ‚â´ œÄ = g ‚â´ œÄ) :
  (cofork.of_œÄ œÄ w).œÄ = œÄ := rfl

@[simp, reassoc]
lemma fork.condition (t : fork f g) : t.Œπ ‚â´ f = t.Œπ ‚â´ g :=
by rw [‚Üêt.app_one_eq_Œπ_comp_left, ‚Üêt.app_one_eq_Œπ_comp_right]

@[simp, reassoc]
lemma cofork.condition (t : cofork f g) : f ‚â´ t.œÄ = g ‚â´ t.œÄ :=
by rw [‚Üêt.app_zero_eq_comp_œÄ_left, ‚Üêt.app_zero_eq_comp_œÄ_right]

/-- To check whether two maps are equalized by both maps of a fork, it suffices to check it for the
    first map -/
lemma fork.equalizer_ext (s : fork f g) {W : C} {k l : W ‚ü∂ s.X} (h : k ‚â´ s.Œπ = l ‚â´ s.Œπ) :
  ‚àÄ (j : walking_parallel_pair), k ‚â´ s.œÄ.app j = l ‚â´ s.œÄ.app j
| zero := h
| one := by rw [s.app_one_eq_Œπ_comp_left, reassoc_of h]

/-- To check whether two maps are coequalized by both maps of a cofork, it suffices to check it for
    the second map -/
lemma cofork.coequalizer_ext (s : cofork f g) {W : C} {k l : s.X ‚ü∂ W}
  (h : cofork.œÄ s ‚â´ k = cofork.œÄ s ‚â´ l) : ‚àÄ (j : walking_parallel_pair),
    s.Œπ.app j ‚â´ k = s.Œπ.app j ‚â´ l
| zero := by simp only [s.app_zero_eq_comp_œÄ_left, category.assoc, h]
| one := h

lemma fork.is_limit.hom_ext {s : fork f g} (hs : is_limit s) {W : C} {k l : W ‚ü∂ s.X}
  (h : k ‚â´ fork.Œπ s = l ‚â´ fork.Œπ s) : k = l :=
hs.hom_ext $ fork.equalizer_ext _ h

lemma cofork.is_colimit.hom_ext {s : cofork f g} (hs : is_colimit s) {W : C} {k l : s.X ‚ü∂ W}
  (h : cofork.œÄ s ‚â´ k = cofork.œÄ s ‚â´ l) : k = l :=
hs.hom_ext $ cofork.coequalizer_ext _ h

@[simp, reassoc] lemma fork.is_limit.lift_comp_Œπ {s t : fork f g} (hs : is_limit s) :
  hs.lift t ‚â´ s.Œπ = t.Œπ :=
hs.fac _ _

@[simp, reassoc] lemma cofork.is_colimit.œÄ_comp_desc {s t : cofork f g} (hs : is_colimit s) :
  s.œÄ ‚â´ hs.desc t = t.œÄ :=
hs.fac _ _

/-- If `s` is a limit fork over `f` and `g`, then a morphism `k : W ‚ü∂ X` satisfying
    `k ‚â´ f = k ‚â´ g` induces a morphism `l : W ‚ü∂ s.X` such that `l ‚â´ fork.Œπ s = k`. -/
def fork.is_limit.lift' {s : fork f g} (hs : is_limit s) {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
  {l : W ‚ü∂ s.X // l ‚â´ fork.Œπ s = k} :=
‚ü®hs.lift $ fork.of_Œπ _ h, hs.fac _ _‚ü©

/-- If `s` is a colimit cofork over `f` and `g`, then a morphism `k : Y ‚ü∂ W` satisfying
    `f ‚â´ k = g ‚â´ k` induces a morphism `l : s.X ‚ü∂ W` such that `cofork.œÄ s ‚â´ l = k`. -/
def cofork.is_colimit.desc' {s : cofork f g} (hs : is_colimit s) {W : C} (k : Y ‚ü∂ W)
  (h : f ‚â´ k = g ‚â´ k) : {l : s.X ‚ü∂ W // cofork.œÄ s ‚â´ l = k} :=
‚ü®hs.desc $ cofork.of_œÄ _ h, hs.fac _ _‚ü©

lemma fork.is_limit.exists_unique {s : fork f g} (hs : is_limit s) {W : C} (k : W ‚ü∂ X)
  (h : k ‚â´ f = k ‚â´ g) : ‚àÉ! (l : W ‚ü∂ s.X), l ‚â´ fork.Œπ s = k :=
‚ü®hs.lift $ fork.of_Œπ _ h, hs.fac _ _, Œª m hm, fork.is_limit.hom_ext hs $
  hm.symm ‚ñ∏ (hs.fac (fork.of_Œπ _ h) walking_parallel_pair.zero).symm‚ü©

lemma cofork.is_colimit.exists_unique {s : cofork f g} (hs : is_colimit s) {W : C} (k : Y ‚ü∂ W)
  (h : f ‚â´ k = g ‚â´ k) : ‚àÉ! (d : s.X ‚ü∂ W), cofork.œÄ s ‚â´ d = k :=
‚ü®hs.desc $ cofork.of_œÄ _ h, hs.fac _ _, Œª m hm, cofork.is_colimit.hom_ext hs $
  hm.symm ‚ñ∏ (hs.fac (cofork.of_œÄ _ h) walking_parallel_pair.one).symm‚ü©

/-- This is a slightly more convenient method to verify that a fork is a limit cone. It
    only asks for a proof of facts that carry any mathematical content -/
@[simps lift]
def fork.is_limit.mk (t : fork f g)
  (lift : Œ† (s : fork f g), s.X ‚ü∂ t.X)
  (fac : ‚àÄ (s : fork f g), lift s ‚â´ fork.Œπ t = fork.Œπ s)
  (uniq : ‚àÄ (s : fork f g) (m : s.X ‚ü∂ t.X) (w : m ‚â´ t.Œπ = s.Œπ), m = lift s) :
  is_limit t :=
{ lift := lift,
  fac' := Œª s j, walking_parallel_pair.cases_on j (fac s) $
    by erw [‚Üês.w left, ‚Üêt.w left, ‚Üêcategory.assoc, fac]; refl,
  uniq' := Œª s m j, by tidy }

/-- This is another convenient method to verify that a fork is a limit cone. It
    only asks for a proof of facts that carry any mathematical content, and allows access to the
    same `s` for all parts. -/
def fork.is_limit.mk' {X Y : C} {f g : X ‚ü∂ Y} (t : fork f g)
  (create : Œ† (s : fork f g), {l // l ‚â´ t.Œπ = s.Œπ ‚àß ‚àÄ {m}, m ‚â´ t.Œπ = s.Œπ ‚Üí m = l}) :
is_limit t :=
fork.is_limit.mk t
  (Œª s, (create s).1)
  (Œª s, (create s).2.1)
  (Œª s m w, (create s).2.2 w)

/-- This is a slightly more convenient method to verify that a cofork is a colimit cocone. It
    only asks for a proof of facts that carry any mathematical content -/
def cofork.is_colimit.mk (t : cofork f g)
  (desc : Œ† (s : cofork f g), t.X ‚ü∂ s.X)
  (fac : ‚àÄ (s : cofork f g), cofork.œÄ t ‚â´ desc s = cofork.œÄ s)
  (uniq : ‚àÄ (s : cofork f g) (m : t.X ‚ü∂ s.X) (w : t.œÄ ‚â´ m = s.œÄ), m = desc s) :
  is_colimit t :=
{ desc := desc,
  fac' := Œª s j, walking_parallel_pair.cases_on j
    (by erw [‚Üês.w left, ‚Üêt.w left, category.assoc, fac]; refl) (fac s),
  uniq' := by tidy }

/-- This is another convenient method to verify that a fork is a limit cone. It
    only asks for a proof of facts that carry any mathematical content, and allows access to the
    same `s` for all parts. -/
def cofork.is_colimit.mk' {X Y : C} {f g : X ‚ü∂ Y} (t : cofork f g)
  (create : Œ† (s : cofork f g), {l : t.X ‚ü∂ s.X // t.œÄ ‚â´ l = s.œÄ ‚àß ‚àÄ {m}, t.œÄ ‚â´ m = s.œÄ ‚Üí m = l}) :
is_colimit t :=
cofork.is_colimit.mk t
  (Œª s, (create s).1)
  (Œª s, (create s).2.1)
  (Œª s m w, (create s).2.2 w)

/-- Noncomputably make a limit cone from the existence of unique factorizations. -/
def fork.is_limit.of_exists_unique {t : fork f g}
  (hs : ‚àÄ (s : fork f g), ‚àÉ! l : s.X ‚ü∂ t.X, l ‚â´ fork.Œπ t = fork.Œπ s) : is_limit t :=
by { choose d hd hd' using hs, exact fork.is_limit.mk _ d hd (Œª s m hm, hd' _ _ hm) }

/-- Noncomputably make a colimit cocone from the existence of unique factorizations. -/
def cofork.is_colimit.of_exists_unique {t : cofork f g}
  (hs : ‚àÄ (s : cofork f g), ‚àÉ! d : t.X ‚ü∂ s.X, cofork.œÄ t ‚â´ d = cofork.œÄ s) : is_colimit t :=
by { choose d hd hd' using hs, exact cofork.is_colimit.mk _ d hd (Œª s m hm, hd' _ _ hm) }

/--
Given a limit cone for the pair `f g : X ‚ü∂ Y`, for any `Z`, morphisms from `Z` to its point are in
bijection with morphisms `h : Z ‚ü∂ X` such that `h ‚â´ f = h ‚â´ g`.
Further, this bijection is natural in `Z`: see `fork.is_limit.hom_iso_natural`.
This is a special case of `is_limit.hom_iso'`, often useful to construct adjunctions.
-/
@[simps]
def fork.is_limit.hom_iso {X Y : C} {f g : X ‚ü∂ Y} {t : fork f g} (ht : is_limit t) (Z : C) :
  (Z ‚ü∂ t.X) ‚âÉ {h : Z ‚ü∂ X // h ‚â´ f = h ‚â´ g} :=
{ to_fun := Œª k, ‚ü®k ‚â´ t.Œπ, by simp only [category.assoc, t.condition]‚ü©,
  inv_fun := Œª h, (fork.is_limit.lift' ht _ h.prop).1,
  left_inv := Œª k, fork.is_limit.hom_ext ht (fork.is_limit.lift' _ _ _).prop,
  right_inv := Œª h, subtype.ext (fork.is_limit.lift' ht _ _).prop }

/-- The bijection of `fork.is_limit.hom_iso` is natural in `Z`. -/
lemma fork.is_limit.hom_iso_natural {X Y : C} {f g : X ‚ü∂ Y} {t : fork f g} (ht : is_limit t)
  {Z Z' : C} (q : Z' ‚ü∂ Z) (k : Z ‚ü∂ t.X) :
  (fork.is_limit.hom_iso ht _ (q ‚â´ k) : Z' ‚ü∂ X) = q ‚â´ (fork.is_limit.hom_iso ht _ k : Z ‚ü∂ X) :=
category.assoc _ _ _

/--
Given a colimit cocone for the pair `f g : X ‚ü∂ Y`, for any `Z`, morphisms from the cocone point
to `Z` are in bijection with morphisms `h : Y ‚ü∂ Z` such that `f ‚â´ h = g ‚â´ h`.
Further, this bijection is natural in `Z`: see `cofork.is_colimit.hom_iso_natural`.
This is a special case of `is_colimit.hom_iso'`, often useful to construct adjunctions.
-/
@[simps]
def cofork.is_colimit.hom_iso {X Y : C} {f g : X ‚ü∂ Y} {t : cofork f g} (ht : is_colimit t) (Z : C) :
  (t.X ‚ü∂ Z) ‚âÉ {h : Y ‚ü∂ Z // f ‚â´ h = g ‚â´ h} :=
{ to_fun := Œª k, ‚ü®t.œÄ ‚â´ k, by simp only [‚Üêcategory.assoc, t.condition]‚ü©,
  inv_fun := Œª h, (cofork.is_colimit.desc' ht _ h.prop).1,
  left_inv := Œª k, cofork.is_colimit.hom_ext ht (cofork.is_colimit.desc' _ _ _).prop,
  right_inv := Œª h, subtype.ext (cofork.is_colimit.desc' ht _ _).prop }

/-- The bijection of `cofork.is_colimit.hom_iso` is natural in `Z`. -/
lemma cofork.is_colimit.hom_iso_natural {X Y : C} {f g : X ‚ü∂ Y} {t : cofork f g} {Z Z' : C}
  (q : Z ‚ü∂ Z') (ht : is_colimit t) (k : t.X ‚ü∂ Z) :
    (cofork.is_colimit.hom_iso ht _ (k ‚â´ q) : Y ‚ü∂ Z') =
    (cofork.is_colimit.hom_iso ht _ k : Y ‚ü∂ Z) ‚â´ q :=
(category.assoc _ _ _).symm

/-- This is a helper construction that can be useful when verifying that a category has all
    equalizers. Given `F : walking_parallel_pair ‚•§ C`, which is really the same as
    `parallel_pair (F.map left) (F.map right)`, and a fork on `F.map left` and `F.map right`,
    we get a cone on `F`.

    If you're thinking about using this, have a look at `has_equalizers_of_has_limit_parallel_pair`,
    which you may find to be an easier way of achieving your goal. -/
def cone.of_fork
  {F : walking_parallel_pair ‚•§ C} (t : fork (F.map left) (F.map right)) : cone F :=
{ X := t.X,
  œÄ :=
  { app := Œª X, t.œÄ.app X ‚â´ eq_to_hom (by tidy),
    naturality' := Œª j j' g, by { cases j; cases j'; cases g; dsimp; simp } } }

/-- This is a helper construction that can be useful when verifying that a category has all
    coequalizers. Given `F : walking_parallel_pair ‚•§ C`, which is really the same as
    `parallel_pair (F.map left) (F.map right)`, and a cofork on `F.map left` and `F.map right`,
    we get a cocone on `F`.

    If you're thinking about using this, have a look at
    `has_coequalizers_of_has_colimit_parallel_pair`, which you may find to be an easier way of
    achieving your goal. -/
def cocone.of_cofork
  {F : walking_parallel_pair ‚•§ C} (t : cofork (F.map left) (F.map right)) : cocone F :=
{ X := t.X,
  Œπ :=
  { app := Œª X, eq_to_hom (by tidy) ‚â´ t.Œπ.app X,
    naturality' := Œª j j' g, by { cases j; cases j'; cases g; dsimp; simp } } }

@[simp] lemma cone.of_fork_œÄ
  {F : walking_parallel_pair ‚•§ C} (t : fork (F.map left) (F.map right)) (j) :
  (cone.of_fork t).œÄ.app j = t.œÄ.app j ‚â´ eq_to_hom (by tidy) := rfl

@[simp] lemma cocone.of_cofork_Œπ
  {F : walking_parallel_pair ‚•§ C} (t : cofork (F.map left) (F.map right)) (j) :
  (cocone.of_cofork t).Œπ.app j = eq_to_hom (by tidy) ‚â´ t.Œπ.app j := rfl

/-- Given `F : walking_parallel_pair ‚•§ C`, which is really the same as
    `parallel_pair (F.map left) (F.map right)` and a cone on `F`, we get a fork on
    `F.map left` and `F.map right`. -/
def fork.of_cone
  {F : walking_parallel_pair ‚•§ C} (t : cone F) : fork (F.map left) (F.map right) :=
{ X := t.X,
  œÄ := { app := Œª X, t.œÄ.app X ‚â´ eq_to_hom (by tidy) } }

/-- Given `F : walking_parallel_pair ‚•§ C`, which is really the same as
    `parallel_pair (F.map left) (F.map right)` and a cocone on `F`, we get a cofork on
    `F.map left` and `F.map right`. -/
def cofork.of_cocone
  {F : walking_parallel_pair ‚•§ C} (t : cocone F) : cofork (F.map left) (F.map right) :=
{ X := t.X,
  Œπ := { app := Œª X, eq_to_hom (by tidy) ‚â´ t.Œπ.app X } }

@[simp] lemma fork.of_cone_œÄ {F : walking_parallel_pair ‚•§ C} (t : cone F) (j) :
  (fork.of_cone t).œÄ.app j = t.œÄ.app j ‚â´ eq_to_hom (by tidy) := rfl
@[simp] lemma cofork.of_cocone_Œπ {F : walking_parallel_pair ‚•§ C} (t : cocone F) (j) :
  (cofork.of_cocone t).Œπ.app j = eq_to_hom (by tidy) ‚â´ t.Œπ.app j := rfl

/--
Helper function for constructing morphisms between equalizer forks.
-/
@[simps]
def fork.mk_hom {s t : fork f g} (k : s.X ‚ü∂ t.X) (w : k ‚â´ t.Œπ = s.Œπ) : s ‚ü∂ t :=
{ hom := k,
  w' :=
  begin
    rintro ‚ü®_|_‚ü©,
    { exact w },
    { simp only [fork.app_one_eq_Œπ_comp_left, reassoc_of w] },
  end }

/--
To construct an isomorphism between forks,
it suffices to give an isomorphism between the cone points
and check that it commutes with the `Œπ` morphisms.
-/
@[simps]
def fork.ext {s t : fork f g} (i : s.X ‚âÖ t.X) (w : i.hom ‚â´ t.Œπ = s.Œπ) : s ‚âÖ t :=
{ hom := fork.mk_hom i.hom w,
  inv := fork.mk_hom i.inv (by rw [‚Üê w, iso.inv_hom_id_assoc]) }

/--
Helper function for constructing morphisms between coequalizer coforks.
-/
@[simps]
def cofork.mk_hom {s t : cofork f g} (k : s.X ‚ü∂ t.X) (w : s.œÄ ‚â´ k = t.œÄ) : s ‚ü∂ t :=
{ hom := k,
  w' :=
  begin
    rintro ‚ü®_|_‚ü©,
    { simp [cofork.app_zero_eq_comp_œÄ_left, w] },
    { exact w }
  end }

@[simp, reassoc] lemma fork.hom_comp_Œπ {s t : fork f g} (f : s ‚ü∂ t) : f.hom ‚â´ t.Œπ = s.Œπ :=
by tidy

@[simp, reassoc] lemma fork.œÄ_comp_hom {s t : cofork f g} (f : s ‚ü∂ t) : s.œÄ ‚â´ f.hom = t.œÄ :=
by tidy

/--
To construct an isomorphism between coforks,
it suffices to give an isomorphism between the cocone points
and check that it commutes with the `œÄ` morphisms.
-/
@[simps]
def cofork.ext {s t : cofork f g} (i : s.X ‚âÖ t.X) (w : s.œÄ ‚â´ i.hom = t.œÄ) : s ‚âÖ t :=
{ hom := cofork.mk_hom i.hom w,
  inv := cofork.mk_hom i.inv (by rw [iso.comp_inv_eq, w]) }

variables (f g)

section
/--
`has_equalizer f g` represents a particular choice of limiting cone
for the parallel pair of morphisms `f` and `g`.
-/
abbreviation has_equalizer := has_limit (parallel_pair f g)

variables [has_equalizer f g]

/-- If an equalizer of `f` and `g` exists, we can access an arbitrary choice of such by
    saying `equalizer f g`. -/
abbreviation equalizer : C := limit (parallel_pair f g)

/-- If an equalizer of `f` and `g` exists, we can access the inclusion
    `equalizer f g ‚ü∂ X` by saying `equalizer.Œπ f g`. -/
abbreviation equalizer.Œπ : equalizer f g ‚ü∂ X :=
limit.œÄ (parallel_pair f g) zero

/--
An equalizer cone for a parallel pair `f` and `g`.
-/
abbreviation equalizer.fork : fork f g := limit.cone (parallel_pair f g)

@[simp] lemma equalizer.fork_Œπ :
  (equalizer.fork f g).Œπ = equalizer.Œπ f g := rfl

@[simp] lemma equalizer.fork_œÄ_app_zero :
  (equalizer.fork f g).œÄ.app zero = equalizer.Œπ f g := rfl

@[reassoc] lemma equalizer.condition : equalizer.Œπ f g ‚â´ f = equalizer.Œπ f g ‚â´ g :=
fork.condition $ limit.cone $ parallel_pair f g

/-- The equalizer built from `equalizer.Œπ f g` is limiting. -/
def equalizer_is_equalizer : is_limit (fork.of_Œπ (equalizer.Œπ f g) (equalizer.condition f g)) :=
is_limit.of_iso_limit (limit.is_limit _) (fork.ext (iso.refl _) (by tidy))

variables {f g}

/-- A morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = k ‚â´ g` factors through the equalizer of `f` and `g`
    via `equalizer.lift : W ‚ü∂ equalizer f g`. -/
abbreviation equalizer.lift {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) : W ‚ü∂ equalizer f g :=
limit.lift (parallel_pair f g) (fork.of_Œπ k h)

@[simp, reassoc]
lemma equalizer.lift_Œπ {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
  equalizer.lift k h ‚â´ equalizer.Œπ f g = k :=
limit.lift_œÄ _ _

/-- A morphism `k : W ‚ü∂ X` satisfying `k ‚â´ f = k ‚â´ g` induces a morphism `l : W ‚ü∂ equalizer f g`
    satisfying `l ‚â´ equalizer.Œπ f g = k`. -/
def equalizer.lift' {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
  {l : W ‚ü∂ equalizer f g // l ‚â´ equalizer.Œπ f g = k} :=
‚ü®equalizer.lift k h, equalizer.lift_Œπ _ _‚ü©

/-- Two maps into an equalizer are equal if they are are equal when composed with the equalizer
    map. -/
@[ext] lemma equalizer.hom_ext {W : C} {k l : W ‚ü∂ equalizer f g}
  (h : k ‚â´ equalizer.Œπ f g = l ‚â´ equalizer.Œπ f g) : k = l :=
fork.is_limit.hom_ext (limit.is_limit _) h

lemma equalizer.exists_unique {W : C} (k : W ‚ü∂ X) (h : k ‚â´ f = k ‚â´ g) :
  ‚àÉ! (l : W ‚ü∂ equalizer f g), l ‚â´ equalizer.Œπ f g = k :=
fork.is_limit.exists_unique (limit.is_limit _) _ h

/-- An equalizer morphism is a monomorphism -/
instance equalizer.Œπ_mono : mono (equalizer.Œπ f g) :=
{ right_cancellation := Œª Z h k w, equalizer.hom_ext w }

end

section
variables {f g}
/-- The equalizer morphism in any limit cone is a monomorphism. -/
lemma mono_of_is_limit_fork {c : fork f g} (i : is_limit c) : mono (fork.Œπ c) :=
{ right_cancellation := Œª Z h k w, fork.is_limit.hom_ext i w }

end

section
variables {f g}

/-- The identity determines a cone on the equalizer diagram of `f` and `g` if `f = g`. -/
def id_fork (h : f = g) : fork f g :=
fork.of_Œπ (ùüô X) $ h ‚ñ∏ rfl

/-- The identity on `X` is an equalizer of `(f, g)`, if `f = g`. -/
def is_limit_id_fork (h : f = g) : is_limit (id_fork h) :=
fork.is_limit.mk _
  (Œª s, fork.Œπ s)
  (Œª s, category.comp_id _)
  (Œª s m h, by { convert h, exact (category.comp_id _).symm })

/-- Every equalizer of `(f, g)`, where `f = g`, is an isomorphism. -/
lemma is_iso_limit_cone_parallel_pair_of_eq (h‚ÇÄ : f = g) {c : fork f g}
  (h : is_limit c) : is_iso c.Œπ :=
is_iso.of_iso $ is_limit.cone_point_unique_up_to_iso h $ is_limit_id_fork h‚ÇÄ

/-- The equalizer of `(f, g)`, where `f = g`, is an isomorphism. -/
lemma equalizer.Œπ_of_eq [has_equalizer f g] (h : f = g) : is_iso (equalizer.Œπ f g) :=
is_iso_limit_cone_parallel_pair_of_eq h $ limit.is_limit _

/-- Every equalizer of `(f, f)` is an isomorphism. -/
lemma is_iso_limit_cone_parallel_pair_of_self {c : fork f f} (h : is_limit c) : is_iso c.Œπ :=
is_iso_limit_cone_parallel_pair_of_eq rfl h

/-- An equalizer that is an epimorphism is an isomorphism. -/
lemma is_iso_limit_cone_parallel_pair_of_epi {c : fork f g}
  (h : is_limit c) [epi (c.Œπ)] : is_iso c.Œπ :=
is_iso_limit_cone_parallel_pair_of_eq ((cancel_epi _).1 (fork.condition c)) h

/-- Two morphisms are equal if there is a fork whose inclusion is epi. -/
lemma eq_of_epi_fork_Œπ (t : fork f g) [epi (fork.Œπ t)] : f = g :=
(cancel_epi (fork.Œπ t)).1 $ fork.condition t

/-- If the equalizer of two morphisms is an epimorphism, then the two morphisms are equal. -/
lemma eq_of_epi_equalizer [has_equalizer f g] [epi (equalizer.Œπ f g)] : f = g :=
(cancel_epi (equalizer.Œπ f g)).1 $ equalizer.condition _ _

end

instance has_equalizer_of_self : has_equalizer f f :=
has_limit.mk
{ cone := id_fork rfl,
  is_limit := is_limit_id_fork rfl }

/-- The equalizer inclusion for `(f, f)` is an isomorphism. -/
instance equalizer.Œπ_of_self : is_iso (equalizer.Œπ f f) :=
equalizer.Œπ_of_eq rfl

/-- The equalizer of a morphism with itself is isomorphic to the source. -/
def equalizer.iso_source_of_self : equalizer f f ‚âÖ X :=
as_iso (equalizer.Œπ f f)

@[simp] lemma equalizer.iso_source_of_self_hom :
  (equalizer.iso_source_of_self f).hom = equalizer.Œπ f f :=
rfl

@[simp] lemma equalizer.iso_source_of_self_inv :
  (equalizer.iso_source_of_self f).inv = equalizer.lift (ùüô X) (by simp) :=
by { ext, simp [equalizer.iso_source_of_self], }

section
/--
`has_coequalizer f g` represents a particular choice of colimiting cocone
for the parallel pair of morphisms `f` and `g`.
-/
abbreviation has_coequalizer := has_colimit (parallel_pair f g)

variables [has_coequalizer f g]

/-- If a coequalizer of `f` and `g` exists, we can access an arbitrary choice of such by
    saying `coequalizer f g`. -/
abbreviation coequalizer : C := colimit (parallel_pair f g)

/--  If a coequalizer of `f` and `g` exists, we can access the corresponding projection by
    saying `coequalizer.œÄ f g`. -/
abbreviation coequalizer.œÄ : Y ‚ü∂ coequalizer f g :=
colimit.Œπ (parallel_pair f g) one

/--
An arbitrary choice of coequalizer cocone for a parallel pair `f` and `g`.
-/
abbreviation coequalizer.cofork : cofork f g := colimit.cocone (parallel_pair f g)

@[simp] lemma coequalizer.cofork_œÄ :
  (coequalizer.cofork f g).œÄ = coequalizer.œÄ f g := rfl

@[simp] lemma coequalizer.cofork_Œπ_app_one :
  (coequalizer.cofork f g).Œπ.app one = coequalizer.œÄ f g := rfl

@[reassoc] lemma coequalizer.condition : f ‚â´ coequalizer.œÄ f g = g ‚â´ coequalizer.œÄ f g :=
cofork.condition $ colimit.cocone $ parallel_pair f g

/-- The cofork built from `coequalizer.œÄ f g` is colimiting. -/
def coequalizer_is_coequalizer :
  is_colimit (cofork.of_œÄ (coequalizer.œÄ f g) (coequalizer.condition f g)) :=
is_colimit.of_iso_colimit (colimit.is_colimit _) (cofork.ext (iso.refl _) (by tidy))

variables {f g}

/-- Any morphism `k : Y ‚ü∂ W` satisfying `f ‚â´ k = g ‚â´ k` factors through the coequalizer of `f`
    and `g` via `coequalizer.desc : coequalizer f g ‚ü∂ W`. -/
abbreviation coequalizer.desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) : coequalizer f g ‚ü∂ W :=
colimit.desc (parallel_pair f g) (cofork.of_œÄ k h)

@[simp, reassoc]
lemma coequalizer.œÄ_desc {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
  coequalizer.œÄ f g ‚â´ coequalizer.desc k h = k :=
colimit.Œπ_desc _ _

/-- Any morphism `k : Y ‚ü∂ W` satisfying `f ‚â´ k = g ‚â´ k` induces a morphism
    `l : coequalizer f g ‚ü∂ W` satisfying `coequalizer.œÄ ‚â´ g = l`. -/
def coequalizer.desc' {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
  {l : coequalizer f g ‚ü∂ W // coequalizer.œÄ f g ‚â´ l = k} :=
‚ü®coequalizer.desc k h, coequalizer.œÄ_desc _ _‚ü©

/-- Two maps from a coequalizer are equal if they are equal when composed with the coequalizer
    map -/
@[ext] lemma coequalizer.hom_ext {W : C} {k l : coequalizer f g ‚ü∂ W}
  (h : coequalizer.œÄ f g ‚â´ k = coequalizer.œÄ f g ‚â´ l) : k = l :=
cofork.is_colimit.hom_ext (colimit.is_colimit _) h

lemma coequalizer.exists_unique {W : C} (k : Y ‚ü∂ W) (h : f ‚â´ k = g ‚â´ k) :
  ‚àÉ! (d : coequalizer f g ‚ü∂ W), coequalizer.œÄ f g ‚â´ d = k :=
cofork.is_colimit.exists_unique (colimit.is_colimit _) _ h

/-- A coequalizer morphism is an epimorphism -/
instance coequalizer.œÄ_epi : epi (coequalizer.œÄ f g) :=
{ left_cancellation := Œª Z h k w, coequalizer.hom_ext w }

end

section
variables {f g}

/-- The coequalizer morphism in any colimit cocone is an epimorphism. -/
lemma epi_of_is_colimit_cofork {c : cofork f g} (i : is_colimit c) : epi c.œÄ :=
{ left_cancellation := Œª Z h k w, cofork.is_colimit.hom_ext i w }

end

section
variables {f g}

/-- The identity determines a cocone on the coequalizer diagram of `f` and `g`, if `f = g`. -/
def id_cofork (h : f = g) : cofork f g :=
cofork.of_œÄ (ùüô Y) $ h ‚ñ∏ rfl

/-- The identity on `Y` is a coequalizer of `(f, g)`, where `f = g`.  -/
def is_colimit_id_cofork (h : f = g) : is_colimit (id_cofork h) :=
cofork.is_colimit.mk _
  (Œª s, cofork.œÄ s)
  (Œª s, category.id_comp _)
  (Œª s m h, by { convert h, exact (category.id_comp _).symm })

/-- Every coequalizer of `(f, g)`, where `f = g`, is an isomorphism. -/
lemma is_iso_colimit_cocone_parallel_pair_of_eq (h‚ÇÄ : f = g) {c : cofork f g}  (h : is_colimit c) :
  is_iso c.œÄ :=
is_iso.of_iso $ is_colimit.cocone_point_unique_up_to_iso (is_colimit_id_cofork h‚ÇÄ) h

/-- The coequalizer of `(f, g)`, where `f = g`, is an isomorphism. -/
lemma coequalizer.œÄ_of_eq [has_coequalizer f g] (h : f = g) : is_iso (coequalizer.œÄ f g) :=
is_iso_colimit_cocone_parallel_pair_of_eq h $ colimit.is_colimit _

/-- Every coequalizer of `(f, f)` is an isomorphism. -/
lemma is_iso_colimit_cocone_parallel_pair_of_self {c : cofork f f} (h : is_colimit c) :
  is_iso c.œÄ :=
is_iso_colimit_cocone_parallel_pair_of_eq rfl h

/-- A coequalizer that is a monomorphism is an isomorphism. -/
lemma is_iso_limit_cocone_parallel_pair_of_epi {c : cofork f g}
  (h : is_colimit c) [mono c.œÄ] : is_iso c.œÄ :=
is_iso_colimit_cocone_parallel_pair_of_eq ((cancel_mono _).1 (cofork.condition c)) h

/-- Two morphisms are equal if there is a cofork whose projection is mono. -/
lemma eq_of_mono_cofork_œÄ (t : cofork f g) [mono (cofork.œÄ t)] : f = g :=
(cancel_mono (cofork.œÄ t)).1 $ cofork.condition t

/-- If the coequalizer of two morphisms is a monomorphism, then the two morphisms are equal. -/
lemma eq_of_mono_coequalizer [has_coequalizer f g] [mono (coequalizer.œÄ f g)] : f = g :=
(cancel_mono (coequalizer.œÄ f g)).1 $ coequalizer.condition _ _

end

instance has_coequalizer_of_self : has_coequalizer f f :=
has_colimit.mk
{ cocone := id_cofork rfl,
  is_colimit := is_colimit_id_cofork rfl }

/-- The coequalizer projection for `(f, f)` is an isomorphism. -/
instance coequalizer.œÄ_of_self : is_iso (coequalizer.œÄ f f) :=
coequalizer.œÄ_of_eq rfl

/-- The coequalizer of a morphism with itself is isomorphic to the target. -/
def coequalizer.iso_target_of_self : coequalizer f f ‚âÖ Y :=
(as_iso (coequalizer.œÄ f f)).symm

@[simp] lemma coequalizer.iso_target_of_self_hom :
  (coequalizer.iso_target_of_self f).hom = coequalizer.desc (ùüô Y) (by simp) :=
by { ext, simp [coequalizer.iso_target_of_self], }

@[simp] lemma coequalizer.iso_target_of_self_inv :
  (coequalizer.iso_target_of_self f).inv = coequalizer.œÄ f f :=
rfl

section comparison

variables {D : Type u‚ÇÇ} [category.{v} D] (G : C ‚•§ D)

/--
The comparison morphism for the equalizer of `f,g`.
This is an isomorphism iff `G` preserves the equalizer of `f,g`; see
`category_theory/limits/preserves/shapes/equalizers.lean`
-/
def equalizer_comparison [has_equalizer f g] [has_equalizer (G.map f) (G.map g)] :
  G.obj (equalizer f g) ‚ü∂ equalizer (G.map f) (G.map g) :=
equalizer.lift (G.map (equalizer.Œπ _ _)) (by simp only [‚ÜêG.map_comp, equalizer.condition])

@[simp, reassoc]
lemma equalizer_comparison_comp_œÄ [has_equalizer f g] [has_equalizer (G.map f) (G.map g)] :
  equalizer_comparison f g G ‚â´ equalizer.Œπ (G.map f) (G.map g) = G.map (equalizer.Œπ f g) :=
equalizer.lift_Œπ _ _

@[simp, reassoc]
lemma map_lift_equalizer_comparison [has_equalizer f g] [has_equalizer (G.map f) (G.map g)]
  {Z : C} {h : Z ‚ü∂ X} (w : h ‚â´ f = h ‚â´ g) :
    G.map (equalizer.lift h w) ‚â´ equalizer_comparison f g G =
      equalizer.lift (G.map h) (by simp only [‚ÜêG.map_comp, w]) :=
by { ext, simp [‚Üê G.map_comp] }

/-- The comparison morphism for the coequalizer of `f,g`. -/
def coequalizer_comparison [has_coequalizer f g] [has_coequalizer (G.map f) (G.map g)] :
  coequalizer (G.map f) (G.map g) ‚ü∂ G.obj (coequalizer f g) :=
coequalizer.desc (G.map (coequalizer.œÄ _ _)) (by simp only [‚ÜêG.map_comp, coequalizer.condition])

@[simp, reassoc]
lemma Œπ_comp_coequalizer_comparison [has_coequalizer f g] [has_coequalizer (G.map f) (G.map g)] :
  coequalizer.œÄ _ _ ‚â´ coequalizer_comparison f g G = G.map (coequalizer.œÄ _ _) :=
coequalizer.œÄ_desc _ _

@[simp, reassoc]
lemma coequalizer_comparison_map_desc [has_coequalizer f g] [has_coequalizer (G.map f) (G.map g)]
  {Z : C} {h : Y ‚ü∂ Z} (w : f ‚â´ h = g ‚â´ h) :
  coequalizer_comparison f g G ‚â´ G.map (coequalizer.desc h w) =
    coequalizer.desc (G.map h) (by simp only [‚ÜêG.map_comp, w]) :=
by { ext, simp [‚Üê G.map_comp] }

end comparison

variables (C)

/-- `has_equalizers` represents a choice of equalizer for every pair of morphisms -/
abbreviation has_equalizers := has_limits_of_shape walking_parallel_pair.{v} C

/-- `has_coequalizers` represents a choice of coequalizer for every pair of morphisms -/
abbreviation has_coequalizers := has_colimits_of_shape walking_parallel_pair.{v} C

/-- If `C` has all limits of diagrams `parallel_pair f g`, then it has all equalizers -/
lemma has_equalizers_of_has_limit_parallel_pair
  [Œ† {X Y : C} {f g : X ‚ü∂ Y}, has_limit (parallel_pair f g)] : has_equalizers C :=
{ has_limit := Œª F, has_limit_of_iso (diagram_iso_parallel_pair F).symm }

/-- If `C` has all colimits of diagrams `parallel_pair f g`, then it has all coequalizers -/
lemma has_coequalizers_of_has_colimit_parallel_pair
  [Œ† {X Y : C} {f g : X ‚ü∂ Y}, has_colimit (parallel_pair f g)] : has_coequalizers C :=
{ has_colimit := Œª F, has_colimit_of_iso (diagram_iso_parallel_pair F) }


section
-- In this section we show that a split mono `f` equalizes `(retraction f ‚â´ f)` and `(ùüô Y)`.
variables {C} [split_mono f]

/--
A split mono `f` equalizes `(retraction f ‚â´ f)` and `(ùüô Y)`.
Here we build the cone, and show in `split_mono_equalizes` that it is a limit cone.
-/
@[simps {rhs_md := semireducible}]
def cone_of_split_mono : fork (ùüô Y) (retraction f ‚â´ f) :=
fork.of_Œπ f (by simp)

@[simp] lemma cone_of_split_mono_Œπ : (cone_of_split_mono f).Œπ = f := rfl

/--
A split mono `f` equalizes `(retraction f ‚â´ f)` and `(ùüô Y)`.
-/
def split_mono_equalizes {X Y : C} (f : X ‚ü∂ Y) [split_mono f] : is_limit (cone_of_split_mono f) :=
fork.is_limit.mk' _ $ Œª s,
‚ü®s.Œπ ‚â´ retraction f,
 by { dsimp, rw [category.assoc, ‚Üês.condition], apply category.comp_id },
 Œª m hm, by simp [‚Üêhm]‚ü©

end

/-- We show that the converse to `split_mono_equalizes` is true:
Whenever `f` equalizes `(r ‚â´ f)` and `(ùüô Y)`, then `r` is a retraction of `f`. -/
def split_mono_of_equalizer {X Y : C} {f : X ‚ü∂ Y} {r : Y ‚ü∂ X} (hr : f ‚â´ r ‚â´ f = f)
  (h : is_limit (fork.of_Œπ f (hr.trans (category.comp_id _).symm : f ‚â´ r ‚â´ f = f ‚â´ ùüô Y))) :
  split_mono f :=
{ retraction := r,
  id' := fork.is_limit.hom_ext h
    ((category.assoc _ _ _).trans $ hr.trans (category.id_comp _).symm) }

variables {C f g}

/-- The fork obtained by postcomposing an equalizer fork with a monomorphism is an equalizer. -/
def is_equalizer_comp_mono {c : fork f g} (i : is_limit c) {Z : C} (h : Y ‚ü∂ Z) [hm : mono h] :
  is_limit (fork.of_Œπ c.Œπ (by simp [reassoc_of c.condition]) : fork (f ‚â´ h) (g ‚â´ h)) :=
fork.is_limit.mk' _ $ Œª s,
  let s' : fork f g := fork.of_Œπ s.Œπ (by apply hm.right_cancellation; simp [s.condition]) in
  let l := fork.is_limit.lift' i s'.Œπ s'.condition in
  ‚ü®l.1, l.2, Œª m hm, by apply fork.is_limit.hom_ext i; rw fork.Œπ_of_Œπ at hm; rw hm; exact l.2.symm‚ü©

variables (C f g)

@[instance]
lemma has_equalizer_comp_mono [has_equalizer f g] {Z : C} (h : Y ‚ü∂ Z) [mono h] :
  has_equalizer (f ‚â´ h) (g ‚â´ h) :=
‚ü®‚ü®{ cone := _, is_limit := is_equalizer_comp_mono (limit.is_limit _) h }‚ü©‚ü©

/-- An equalizer of an idempotent morphism and the identity is split mono. -/
@[simps]
def split_mono_of_idempotent_of_is_limit_fork {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
  {c : fork (ùüô X) f} (i : is_limit c) : split_mono c.Œπ :=
{ retraction := i.lift (fork.of_Œπ f (by simp [hf])),
  id' :=
  begin
    letI := mono_of_is_limit_fork i,
    rw [‚Üêcancel_mono_id c.Œπ, category.assoc, fork.is_limit.lift_comp_Œπ, fork.Œπ_of_Œπ, ‚Üêc.condition],
    exact category.comp_id c.Œπ
  end }

/-- The equalizer of an idempotent morphism and the identity is split mono. -/
def split_mono_of_idempotent_equalizer {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
  [has_equalizer (ùüô X) f] : split_mono (equalizer.Œπ (ùüô X) f) :=
split_mono_of_idempotent_of_is_limit_fork _ hf (limit.is_limit _)

section
-- In this section we show that a split epi `f` coequalizes `(f ‚â´ section_ f)` and `(ùüô X)`.
variables {C} [split_epi f]

/--
A split epi `f` coequalizes `(f ‚â´ section_ f)` and `(ùüô X)`.
Here we build the cocone, and show in `split_epi_coequalizes` that it is a colimit cocone.
-/
@[simps {rhs_md := semireducible}]
def cocone_of_split_epi : cofork (ùüô X) (f ‚â´ section_ f) :=
cofork.of_œÄ f (by simp)

@[simp] lemma cocone_of_split_epi_œÄ : (cocone_of_split_epi f).œÄ = f := rfl

/--
A split epi `f` coequalizes `(f ‚â´ section_ f)` and `(ùüô X)`.
-/
def split_epi_coequalizes {X Y : C} (f : X ‚ü∂ Y) [split_epi f] :
  is_colimit (cocone_of_split_epi f) :=
cofork.is_colimit.mk' _ $ Œª s,
‚ü®section_ f ‚â´ s.œÄ,
 by { dsimp, rw [‚Üê category.assoc, ‚Üê s.condition, category.id_comp] },
 Œª m hm, by simp [‚Üê hm]‚ü©

end

/-- We show that the converse to `split_epi_equalizes` is true:
Whenever `f` coequalizes `(f ‚â´ s)` and `(ùüô X)`, then `s` is a section of `f`. -/
def split_epi_of_coequalizer {X Y : C} {f : X ‚ü∂ Y} {s : Y ‚ü∂ X} (hs : f ‚â´ s ‚â´ f = f)
  (h : is_colimit (cofork.of_œÄ f ((category.assoc _ _ _).trans $
    hs.trans (category.id_comp f).symm : (f ‚â´ s) ‚â´ f = ùüô X ‚â´ f))) :
  split_epi f :=
{ section_ := s,
  id' := cofork.is_colimit.hom_ext h (hs.trans (category.comp_id _).symm) }

variables {C f g}

/-- The cofork obtained by precomposing a coequalizer cofork with an epimorphism is
a coequalizer. -/
def is_coequalizer_epi_comp {c : cofork f g} (i : is_colimit c) {W : C} (h : W ‚ü∂ X) [hm : epi h] :
  is_colimit (cofork.of_œÄ c.œÄ (by simp) : cofork (h ‚â´ f) (h ‚â´ g)) :=
cofork.is_colimit.mk' _ $ Œª s,
  let s' : cofork f g := cofork.of_œÄ s.œÄ
    (by apply hm.left_cancellation; simp_rw [‚Üêcategory.assoc, s.condition]) in
  let l := cofork.is_colimit.desc' i s'.œÄ s'.condition in
  ‚ü®l.1, l.2,
    Œª m hm,by apply cofork.is_colimit.hom_ext i; rw cofork.œÄ_of_œÄ at hm; rw hm; exact l.2.symm‚ü©

lemma has_coequalizer_epi_comp [has_coequalizer f g] {W : C} (h : W ‚ü∂ X) [hm : epi h] :
  has_coequalizer (h ‚â´ f) (h ‚â´ g) :=
‚ü®‚ü®{ cocone := _, is_colimit := is_coequalizer_epi_comp (colimit.is_colimit _) h }‚ü©‚ü©

variables (C f g)

/-- A coequalizer of an idempotent morphism and the identity is split epi. -/
@[simps]
def split_epi_of_idempotent_of_is_colimit_cofork {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
  {c : cofork (ùüô X) f} (i : is_colimit c) : split_epi c.œÄ :=
{ section_ := i.desc (cofork.of_œÄ f (by simp [hf])),
  id' :=
  begin
    letI := epi_of_is_colimit_cofork i,
    rw [‚Üê cancel_epi_id c.œÄ, ‚Üê category.assoc, cofork.is_colimit.œÄ_comp_desc, 
      cofork.œÄ_of_œÄ, ‚Üê c.condition],
    exact category.id_comp _,
  end }

/-- The coequalizer of an idempotent morphism and the identity is split epi. -/
def split_epi_of_idempotent_coequalizer {X : C} {f : X ‚ü∂ X} (hf : f ‚â´ f = f)
  [has_coequalizer (ùüô X) f] : split_epi (coequalizer.œÄ (ùüô X) f) :=
split_epi_of_idempotent_of_is_colimit_cofork _ hf (colimit.is_colimit _)

end category_theory.limits
