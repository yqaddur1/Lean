/-
Copyright (c) 2020 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import analysis.convex.function
import analysis.convex.strict_convex_space
import measure_theory.function.ae_eq_of_integral
import measure_theory.integral.average

/-!
# Jensen's inequality for integrals

In this file we prove several forms of Jensen's inequality for integrals.

- for convex sets: `convex.average_mem`, `convex.set_average_mem`, `convex.integral_mem`;

- for convex functions: `convex.on.average_mem_epigraph`, `convex_on.map_average_le`,
  `convex_on.set_average_mem_epigraph`, `convex_on.map_set_average_le`, `convex_on.map_integral_le`;

- for strictly convex sets: `strict_convex.ae_eq_const_or_average_mem_interior`;

- for a closed ball in a strictly convex normed space:
  `ae_eq_const_or_norm_integral_lt_of_norm_le_const`;

- for strictly convex functions: `strict_convex_on.ae_eq_const_or_map_average_lt`.

## TODO

- Use a typeclass for strict convexity of a closed ball.

## Tags

convex, integral, center mass, average value, Jensen's inequality
-/

open measure_theory measure_theory.measure metric set filter topological_space function
open_locale topological_space big_operators ennreal convex

variables {Œ± E F : Type*} {m0 : measurable_space Œ±}
  [normed_group E] [normed_space ‚Ñù E] [complete_space E]
  [normed_group F] [normed_space ‚Ñù F] [complete_space F]
  {Œº : measure Œ±} {s : set E}

/-!
### Non-strict Jensen's inequality
-/

/-- If `Œº` is a probability measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the expected value of `f` belongs to `s`:
`‚à´ x, f x ‚àÇŒº ‚àà s`. See also `convex.sum_mem` for a finite sum version of this lemma. -/
lemma convex.integral_mem [is_probability_measure Œº] {s : set E} (hs : convex ‚Ñù s)
  (hsc : is_closed s) {f : Œ± ‚Üí E} (hf : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) :
  ‚à´ x, f x ‚àÇŒº ‚àà s :=
begin
  borelize E,
  rcases hfi.ae_strongly_measurable with ‚ü®g, hgm, hfg‚ü©,
  haveI : separable_space (range g ‚à© s : set E) :=
    (hgm.is_separable_range.mono (inter_subset_left _ _)).separable_space,
  obtain ‚ü®y‚ÇÄ, h‚ÇÄ‚ü© : (range g ‚à© s).nonempty,
  { rcases (hf.and hfg).exists with ‚ü®x‚ÇÄ, h‚ÇÄ‚ü©,
    exact ‚ü®f x‚ÇÄ, by simp only [h‚ÇÄ.2, mem_range_self], h‚ÇÄ.1‚ü© },
  rw [integral_congr_ae hfg], rw [integrable_congr hfg] at hfi,
  have hg : ‚àÄ·µê x ‚àÇŒº, g x ‚àà closure (range g ‚à© s),
  { filter_upwards [hfg.rw (Œª x y, y ‚àà s) hf] with x hx,
    apply subset_closure,
    exact ‚ü®mem_range_self _, hx‚ü© },
  set G : ‚Ñï ‚Üí simple_func Œ± E := simple_func.approx_on _ hgm.measurable (range g ‚à© s) y‚ÇÄ h‚ÇÄ,
  have : tendsto (Œª n, (G n).integral Œº) at_top (ùìù $ ‚à´ x, g x ‚àÇŒº),
    from tendsto_integral_approx_on_of_measurable hfi _ hg _ (integrable_const _),
  refine hsc.mem_of_tendsto this (eventually_of_forall $ Œª n, hs.sum_mem _ _ _),
  { exact Œª _ _, ennreal.to_real_nonneg },
  { rw [‚Üê ennreal.to_real_sum, (G n).sum_range_measure_preimage_singleton, measure_univ,
      ennreal.one_to_real],
    exact Œª _ _, measure_ne_top _ _ },
  { simp only [simple_func.mem_range, forall_range_iff],
    assume x,
    apply inter_subset_right (range g),
    exact simple_func.approx_on_mem hgm.measurable _ _ _ },
end

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `convex.center_mass_mem` for a finite sum version of this lemma. -/
lemma convex.average_mem [is_finite_measure Œº] {s : set E} (hs : convex ‚Ñù s) (hsc : is_closed s)
  (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) :
  ‚®ç x, f x ‚àÇŒº ‚àà s :=
begin
  haveI : is_probability_measure ((Œº univ)‚Åª¬π ‚Ä¢ Œº),
    from is_probability_measure_smul hŒº,
  refine hs.integral_mem hsc (ae_mono' _ hfs) hfi.to_average,
  exact absolutely_continuous.smul (refl _) _
end

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex closed set in `E`, and `f` is an
integrable function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `convex.center_mass_mem` for a finite sum version of this lemma. -/
lemma convex.set_average_mem {t : set Œ±} {s : set E} (hs : convex ‚Ñù s) (hsc : is_closed s)
  (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
  (hfi : integrable_on f t Œº) :
  ‚®ç x in t, f x ‚àÇŒº ‚àà s :=
begin
  haveI : fact (Œº t < ‚àû) := ‚ü®ht.lt_top‚ü©,
  refine hs.average_mem hsc _ hfs hfi,
  rwa [ne.def, restrict_eq_zero]
end

/-- If `Œº` is a non-zero finite measure on `Œ±`, `s` is a convex set in `E`, and `f` is an integrable
function sending `Œº`-a.e. points to `s`, then the average value of `f` belongs to `closure s`:
`‚®ç x, f x ‚àÇŒº ‚àà s`. See also `convex.center_mass_mem` for a finite sum version of this lemma. -/
lemma convex.set_average_mem_closure {t : set Œ±} {s : set E} (hs : convex ‚Ñù s)
  (h0 : Œº t ‚â† 0) (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s)
  (hfi : integrable_on f t Œº) :
  ‚®ç x in t, f x ‚àÇŒº ‚àà closure s :=
hs.closure.set_average_mem is_closed_closure h0 ht (hfs.mono $ Œª x hx, subset_closure hx) hfi

lemma convex_on.average_mem_epigraph [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : convex_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  (‚®ç x, f x ‚àÇŒº, ‚®ç x, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2} :=
have ht_mem : ‚àÄ·µê x ‚àÇŒº, (f x, g (f x)) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2},
  from hfs.mono (Œª x hx, ‚ü®hx, le_rfl‚ü©),
by simpa only [average_pair hfi hgi]
  using hg.convex_epigraph.average_mem (hsc.epigraph hgc) hŒº ht_mem (hfi.prod_mk hgi)

lemma concave_on.average_mem_hypograph [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : concave_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  (‚®ç x, f x ‚àÇŒº, ‚®ç x, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß p.2 ‚â§ g p.1} :=
by simpa only [mem_set_of_eq, pi.neg_apply, average_neg, neg_le_neg_iff]
  using hg.neg.average_mem_epigraph hgc.neg hsc hŒº hfs hfi hgi.neg

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points to `s`, then the value of `g` at the average value of `f` is less than or equal to
the average value of `g ‚àò f` provided that both `f` and `g ‚àò f` are integrable. See also
`convex_on.map_center_mass_le` for a finite sum version of this lemma. -/
lemma convex_on.map_average_le [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : convex_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  g (‚®ç x, f x ‚àÇŒº) ‚â§ ‚®ç x, g (f x) ‚àÇŒº :=
(hg.average_mem_epigraph hgc hsc hŒº hfs hfi hgi).2

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points to `s`, then the average value of `g ‚àò f` is less than or equal to the value of `g`
at the average value of `f` provided that both `f` and `g ‚àò f` are integrable. See also
`concave_on.le_map_center_mass` for a finite sum version of this lemma. -/
lemma concave_on.le_map_average [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : concave_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) (hŒº : Œº ‚â† 0) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  ‚®ç x, g (f x) ‚àÇŒº ‚â§ g (‚®ç x, f x ‚àÇŒº) :=
(hg.average_mem_hypograph hgc hsc hŒº hfs hfi hgi).2

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the value of `g` at the average value of `f` over `t` is
less than or equal to the average value of `g ‚àò f` over `t` provided that both `f` and `g ‚àò f` are
integrable. -/
lemma convex_on.set_average_mem_epigraph {s : set E} {g : E ‚Üí ‚Ñù} (hg : convex_on ‚Ñù s g)
  (hgc : continuous_on g s) (hsc : is_closed s) {t : set Œ±} (h0 : Œº t ‚â† 0)
  (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : integrable_on f t Œº)
  (hgi : integrable_on (g ‚àò f) t Œº) :
  (‚®ç x in t, f x ‚àÇŒº, ‚®ç x in t, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß g p.1 ‚â§ p.2} :=
begin
  haveI : fact (Œº t < ‚àû) := ‚ü®ht.lt_top‚ü©,
  refine hg.average_mem_epigraph hgc hsc _ hfs hfi hgi,
  rwa [ne.def, restrict_eq_zero]
end

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the average value of `g ‚àò f` over `t` is less than or
equal to the value of `g` at the average value of `f` over `t` provided that both `f` and `g ‚àò f`
are integrable. -/
lemma concave_on.set_average_mem_hypograph {s : set E} {g : E ‚Üí ‚Ñù} (hg : concave_on ‚Ñù s g)
  (hgc : continuous_on g s) (hsc : is_closed s) {t : set Œ±} (h0 : Œº t ‚â† 0)
  (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : integrable_on f t Œº)
  (hgi : integrable_on (g ‚àò f) t Œº) :
  (‚®ç x in t, f x ‚àÇŒº, ‚®ç x in t, g (f x) ‚àÇŒº) ‚àà {p : E √ó ‚Ñù | p.1 ‚àà s ‚àß p.2 ‚â§ g p.1} :=
by simpa only [mem_set_of_eq, pi.neg_apply, average_neg, neg_le_neg_iff]
  using hg.neg.set_average_mem_epigraph hgc.neg hsc h0 ht hfs hfi hgi.neg

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the value of `g` at the average value of `f` over `t` is
less than or equal to the average value of `g ‚àò f` over `t` provided that both `f` and `g ‚àò f` are
integrable. -/
lemma convex_on.map_set_average_le {s : set E} {g : E ‚Üí ‚Ñù} (hg : convex_on ‚Ñù s g)
  (hgc : continuous_on g s) (hsc : is_closed s) {t : set Œ±} (h0 : Œº t ‚â† 0)
  (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : integrable_on f t Œº)
  (hgi : integrable_on (g ‚àò f) t Œº) :
  g (‚®ç x in t, f x ‚àÇŒº) ‚â§ ‚®ç x in t, g (f x) ‚àÇŒº :=
(hg.set_average_mem_epigraph hgc hsc h0 ht hfs hfi hgi).2

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a finite non-zero measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending
`Œº`-a.e. points of a set `t` to `s`, then the average value of `g ‚àò f` over `t` is less than or
equal to the value of `g` at the average value of `f` over `t` provided that both `f` and `g ‚àò f`
are integrable. -/
lemma concave_on.le_map_set_average {s : set E} {g : E ‚Üí ‚Ñù} (hg : concave_on ‚Ñù s g)
  (hgc : continuous_on g s) (hsc : is_closed s) {t : set Œ±} (h0 : Œº t ‚â† 0)
  (ht : Œº t ‚â† ‚àû) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº.restrict t, f x ‚àà s) (hfi : integrable_on f t Œº)
  (hgi : integrable_on (g ‚àò f) t Œº) :
  ‚®ç x in t, g (f x) ‚àÇŒº ‚â§ g (‚®ç x in t, f x ‚àÇŒº) :=
(hg.set_average_mem_hypograph hgc hsc h0 ht hfs hfi hgi).2

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is convex and continuous on a convex closed
set `s`, `Œº` is a probability measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending `Œº`-a.e.  points
to `s`, then the value of `g` at the expected value of `f` is less than or equal to the expected
value of `g ‚àò f` provided that both `f` and `g ‚àò f` are integrable. See also
`convex_on.map_center_mass_le` for a finite sum version of this lemma. -/
lemma convex_on.map_integral_le [is_probability_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : convex_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  g (‚à´ x, f x ‚àÇŒº) ‚â§ ‚à´ x, g (f x) ‚àÇŒº :=
by simpa only [average_eq_integral]
  using hg.map_average_le hgc hsc (is_probability_measure.ne_zero Œº) hfs hfi hgi

/-- **Jensen's inequality**: if a function `g : E ‚Üí ‚Ñù` is concave and continuous on a convex closed
set `s`, `Œº` is a probability measure on `Œ±`, and `f : Œ± ‚Üí E` is a function sending `Œº`-a.e.  points
to `s`, then the expected value of `g ‚àò f` is less than or equal to the value of `g` at the expected
value of `f` provided that both `f` and `g ‚àò f` are integrable. -/
lemma concave_on.le_map_integral [is_probability_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : concave_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  ‚à´ x, g (f x) ‚àÇŒº ‚â§ g (‚à´ x, f x ‚àÇŒº) :=
by simpa only [average_eq_integral]
  using hg.le_map_average hgc hsc (is_probability_measure.ne_zero Œº) hfs hfi hgi

/-!
### Strict Jensen's inequality
-/

/-- If `f : Œ± ‚Üí E` is an integrable function, then either it is a.e. equal to the constant
`‚®ç x, f x ‚àÇŒº` or there exists a measurable set such that `Œº s ‚â† 0`, `Œº s·∂ú ‚â† 0`, and the average
values of `f` over `s` and `s·∂ú` are different. -/
lemma measure_theory.integrable.ae_eq_const_or_exists_average_ne_compl [is_finite_measure Œº]
  {f : Œ± ‚Üí E} (hfi : integrable f Œº) :
  (f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº)) ‚à® ‚àÉ s, measurable_set s ‚àß Œº s ‚â† 0 ‚àß Œº s·∂ú ‚â† 0 ‚àß
    ‚®ç x in s, f x ‚àÇŒº ‚â† ‚®ç x in s·∂ú, f x ‚àÇŒº :=
begin
  refine or_iff_not_imp_right.mpr (Œª H, _), push_neg at H,
  refine hfi.ae_eq_of_forall_set_integral_eq _ _ (integrable_const _) (Œª s hs hs', _), clear hs',
  simp only [const_apply, set_integral_const],
  by_cases h‚ÇÄ : Œº s = 0,
  { rw [restrict_eq_zero.2 h‚ÇÄ, integral_zero_measure, h‚ÇÄ, ennreal.zero_to_real, zero_smul] },
  by_cases h‚ÇÄ' : Œº s·∂ú = 0,
  { rw ‚Üê ae_eq_univ at h‚ÇÄ',
    rw [restrict_congr_set h‚ÇÄ', restrict_univ, measure_congr h‚ÇÄ', measure_smul_average] },
  have := average_mem_open_segment_compl_self hs.null_measurable_set h‚ÇÄ h‚ÇÄ' hfi,
  rw [‚Üê H s hs h‚ÇÄ h‚ÇÄ', open_segment_same, mem_singleton_iff] at this,
  rw [this, measure_smul_set_average _ (measure_ne_top Œº _)]
end

/-- If an integrable function `f : Œ± ‚Üí E` takes values in a convex set `s` and for some set `t` of
positive measure, the average value of `f` over `t` belongs to the interior of `s`, then the average
of `f` over the whole space belongs to the interior of `s`. -/
lemma convex.average_mem_interior_of_set [is_finite_measure Œº] {t : set Œ±} {s : set E}
  (hs : convex ‚Ñù s) (h0 : Œº t ‚â† 0) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s)
  (hfi : integrable f Œº) (ht : ‚®ç x in t, f x ‚àÇŒº ‚àà interior s) :
  ‚®ç x, f x ‚àÇŒº ‚àà interior s :=
begin
  rw ‚Üê measure_to_measurable at h0, rw ‚Üê restrict_to_measurable (measure_ne_top Œº t) at ht,
  by_cases h0' : Œº (to_measurable Œº t)·∂ú = 0,
  { rw ‚Üê ae_eq_univ at h0',
    rwa [restrict_congr_set h0', restrict_univ] at ht },
  exact hs.open_segment_interior_closure_subset_interior ht
    (hs.set_average_mem_closure h0' (measure_ne_top _ _) (ae_restrict_of_ae hfs) hfi.integrable_on)
    (average_mem_open_segment_compl_self (measurable_set_to_measurable Œº t).null_measurable_set
      h0 h0' hfi)
end

/-- If an integrable function `f : Œ± ‚Üí E` takes values in a strictly convex closed set `s`, then
either it is a.e. equal to its average value, or its average value belongs to the interior of
`s`. -/
lemma strict_convex.ae_eq_const_or_average_mem_interior [is_finite_measure Œº] {s : set E}
  (hs : strict_convex ‚Ñù s) (hsc : is_closed s) {f : Œ± ‚Üí E} (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s)
  (hfi : integrable f Œº) :
  f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® ‚®ç x, f x ‚àÇŒº ‚àà interior s :=
begin
  have : ‚àÄ {t}, Œº t ‚â† 0 ‚Üí ‚®ç x in t, f x ‚àÇŒº ‚àà s,
    from Œª t ht, hs.convex.set_average_mem hsc ht (measure_ne_top _ _) (ae_restrict_of_ae hfs)
      hfi.integrable_on,
  refine hfi.ae_eq_const_or_exists_average_ne_compl.imp_right _,
  rintro ‚ü®t, hm, h‚ÇÄ, h‚ÇÄ', hne‚ü©,
  exact hs.open_segment_subset (this h‚ÇÄ) (this h‚ÇÄ') hne
    (average_mem_open_segment_compl_self hm.null_measurable_set h‚ÇÄ h‚ÇÄ' hfi)
end

/-- **Jensen's inequality**, strict version: if an integrable function `f : Œ± ‚Üí E` takes values in a
convex closed set `s`, and `g : E ‚Üí ‚Ñù` is continuous and strictly convex on `s`, then
either `f` is a.e. equal to its average value, or `g (‚®ç x, f x ‚àÇŒº) < ‚®ç x, g (f x) ‚àÇŒº`. -/
lemma strict_convex_on.ae_eq_const_or_map_average_lt [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : strict_convex_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® g (‚®ç x, f x ‚àÇŒº) < ‚®ç x, g (f x) ‚àÇŒº :=
begin
  have : ‚àÄ {t}, Œº t ‚â† 0 ‚Üí ‚®ç x in t, f x ‚àÇŒº ‚àà s ‚àß g (‚®ç x in t, f x ‚àÇŒº) ‚â§ ‚®ç x in t, g (f x) ‚àÇŒº,
    from Œª t ht, hg.convex_on.set_average_mem_epigraph hgc hsc ht (measure_ne_top _ _)
      (ae_restrict_of_ae hfs) hfi.integrable_on hgi.integrable_on,
  refine hfi.ae_eq_const_or_exists_average_ne_compl.imp_right _,
  rintro ‚ü®t, hm, h‚ÇÄ, h‚ÇÄ', hne‚ü©,
  rcases average_mem_open_segment_compl_self hm.null_measurable_set h‚ÇÄ h‚ÇÄ' (hfi.prod_mk hgi)
    with ‚ü®a, b, ha, hb, hab, h_avg‚ü©,
  simp only [average_pair hfi hgi, average_pair hfi.integrable_on hgi.integrable_on, prod.smul_mk,
    prod.mk_add_mk, prod.mk.inj_iff, (‚àò)] at h_avg,
  rw [‚Üê h_avg.1, ‚Üê h_avg.2],
  calc g (a ‚Ä¢ ‚®ç x in t, f x ‚àÇŒº + b ‚Ä¢ ‚®ç x in t·∂ú, f x ‚àÇŒº)
      < a * g (‚®ç x in t, f x ‚àÇŒº) + b * g (‚®ç x in t·∂ú, f x ‚àÇŒº) :
    hg.2 (this h‚ÇÄ).1 (this h‚ÇÄ').1 hne ha hb hab
  ... ‚â§ a * ‚®ç x in t, g (f x) ‚àÇŒº + b * ‚®ç x in t·∂ú, g (f x) ‚àÇŒº :
    add_le_add (mul_le_mul_of_nonneg_left (this h‚ÇÄ).2 ha.le)
      (mul_le_mul_of_nonneg_left (this h‚ÇÄ').2 hb.le)
end

/-- **Jensen's inequality**, strict version: if an integrable function `f : Œ± ‚Üí E` takes values in a
convex closed set `s`, and `g : E ‚Üí ‚Ñù` is continuous and strictly concave on `s`, then
either `f` is a.e. equal to its average value, or `‚®ç x, g (f x) ‚àÇŒº < g (‚®ç x, f x ‚àÇŒº)`. -/
lemma strict_concave_on.ae_eq_const_or_lt_map_average [is_finite_measure Œº] {s : set E} {g : E ‚Üí ‚Ñù}
  (hg : strict_concave_on ‚Ñù s g) (hgc : continuous_on g s) (hsc : is_closed s) {f : Œ± ‚Üí E}
  (hfs : ‚àÄ·µê x ‚àÇŒº, f x ‚àà s) (hfi : integrable f Œº) (hgi : integrable (g ‚àò f) Œº) :
  f =·µê[Œº] const Œ± (‚®ç x, f x ‚àÇŒº) ‚à® ‚®ç x, g (f x) ‚àÇŒº < g (‚®ç x, f x ‚àÇŒº) :=
by simpa only [pi.neg_apply, average_neg, neg_lt_neg_iff]
  using hg.neg.ae_eq_const_or_map_average_lt hgc.neg hsc hfs hfi hgi.neg

/-- If `E` is a strictly normed space and `f : Œ± ‚Üí E` is a function such that `‚à•f x‚à• ‚â§ C` a.e., then
either this function is a.e. equal to its average value, or the norm of its average value is
strictly less than `C`. -/
lemma ae_eq_const_or_norm_average_lt_of_norm_le_const [strict_convex_space ‚Ñù E]
  {f : Œ± ‚Üí E} {C : ‚Ñù} (h_le : ‚àÄ·µê x ‚àÇŒº, ‚à•f x‚à• ‚â§ C) :
  (f =·µê[Œº] const Œ± ‚®ç x, f x ‚àÇŒº) ‚à® ‚à•‚®ç x, f x ‚àÇŒº‚à• < C :=
begin
  cases le_or_lt C 0 with hC0 hC0,
  { have : f =·µê[Œº] 0, from h_le.mono (Œª x hx, norm_le_zero_iff.1 (hx.trans hC0)),
    simp only [average_congr this, pi.zero_apply, average_zero],
    exact or.inl this },
  by_cases hfi : integrable f Œº, swap,
    by simp [average_def', integral_undef hfi, hC0, ennreal.to_real_pos_iff],
  cases (le_top : Œº univ ‚â§ ‚àû).eq_or_lt with hŒºt hŒºt, { simp [average_def', hŒºt, hC0] },
  haveI : is_finite_measure Œº := ‚ü®hŒºt‚ü©,
  replace h_le : ‚àÄ·µê x ‚àÇŒº, f x ‚àà closed_ball (0 : E) C, by simpa only [mem_closed_ball_zero_iff],
  simpa only [interior_closed_ball _ hC0.ne', mem_ball_zero_iff]
    using (strict_convex_closed_ball ‚Ñù (0 : E) C).ae_eq_const_or_average_mem_interior
      is_closed_ball h_le hfi
end

/-- If `E` is a strictly normed space and `f : Œ± ‚Üí E` is a function such that `‚à•f x‚à• ‚â§ C` a.e., then
either this function is a.e. equal to its average value, or the norm of its integral is strictly
less than `(Œº univ).to_real * C`. -/
lemma ae_eq_const_or_norm_integral_lt_of_norm_le_const [strict_convex_space ‚Ñù E]
  [is_finite_measure Œº] {f : Œ± ‚Üí E} {C : ‚Ñù} (h_le : ‚àÄ·µê x ‚àÇŒº, ‚à•f x‚à• ‚â§ C) :
  (f =·µê[Œº] const Œ± ‚®ç x, f x ‚àÇŒº) ‚à® ‚à•‚à´ x, f x ‚àÇŒº‚à• < (Œº univ).to_real * C :=
begin
  cases eq_or_ne Œº 0 with h‚ÇÄ h‚ÇÄ, { left, simp [h‚ÇÄ] },
  have hŒº : 0 < (Œº univ).to_real,
    by simp [ennreal.to_real_pos_iff, pos_iff_ne_zero, h‚ÇÄ, measure_lt_top],
  refine (ae_eq_const_or_norm_average_lt_of_norm_le_const h_le).imp_right (Œª H, _),
  rwa [average_def', norm_smul, norm_inv, real.norm_eq_abs, abs_of_pos hŒº,
    ‚Üê div_eq_inv_mul, div_lt_iff' hŒº] at H
end
