/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import analysis.normed.normed_field
import analysis.normed.group.infinite_sum
import data.matrix.basic
import topology.sequences

/-!
# Normed spaces

In this file we define (semi)normed spaces and algebras. We also prove some theorems
about these definitions.
-/

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

noncomputable theory
open filter metric
open_locale topological_space big_operators nnreal ennreal uniformity pointwise

section semi_normed_group

section prio
set_option extends_priority 920
-- Here, we set a rather high priority for the instance `[normed_space Œ± Œ≤] : module Œ± Œ≤`
-- to take precedence over `semiring.to_module` as this leads to instance paths with better
-- unification properties.
/-- A normed space over a normed field is a vector space endowed with a norm which satisfies the
equality `‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•`. We require only `‚à•c ‚Ä¢ x‚à• ‚â§ ‚à•c‚à• ‚à•x‚à•` in the definition, then prove
`‚à•c ‚Ä¢ x‚à• = ‚à•c‚à• ‚à•x‚à•` in `norm_smul`.

Note that since this requires `semi_normed_group` and not `normed_group`, this typeclass can be
used for "semi normed spaces" too, just as `module` can be used for "semi modules". -/
class normed_space (Œ± : Type*) (Œ≤ : Type*) [normed_field Œ±] [semi_normed_group Œ≤]
  extends module Œ± Œ≤ :=
(norm_smul_le : ‚àÄ (a:Œ±) (b:Œ≤), ‚à•a ‚Ä¢ b‚à• ‚â§ ‚à•a‚à• * ‚à•b‚à•)
end prio

variables [normed_field Œ±] [semi_normed_group Œ≤]

@[priority 100] -- see Note [lower instance priority]
instance normed_space.has_bounded_smul [normed_space Œ± Œ≤] : has_bounded_smul Œ± Œ≤ :=
{ dist_smul_pair' := Œª x y‚ÇÅ y‚ÇÇ,
    by simpa [dist_eq_norm, smul_sub] using normed_space.norm_smul_le x (y‚ÇÅ - y‚ÇÇ),
  dist_pair_smul' := Œª x‚ÇÅ x‚ÇÇ y,
    by simpa [dist_eq_norm, sub_smul] using normed_space.norm_smul_le (x‚ÇÅ - x‚ÇÇ) y }

instance normed_field.to_normed_space : normed_space Œ± Œ± :=
{ norm_smul_le := Œª a b, le_of_eq (norm_mul a b) }

lemma norm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à• = ‚à•s‚à• * ‚à•x‚à• :=
begin
  by_cases h : s = 0,
  { simp [h] },
  { refine le_antisymm (normed_space.norm_smul_le s x) _,
    calc ‚à•s‚à• * ‚à•x‚à• = ‚à•s‚à• * ‚à•s‚Åª¬π ‚Ä¢ s ‚Ä¢ x‚à•     : by rw [inv_smul_smul‚ÇÄ h]
               ... ‚â§ ‚à•s‚à• * (‚à•s‚Åª¬π‚à• * ‚à•s ‚Ä¢ x‚à•) :
      mul_le_mul_of_nonneg_left (normed_space.norm_smul_le _ _) (norm_nonneg _)
               ... = ‚à•s ‚Ä¢ x‚à•                 :
      by rw [norm_inv, ‚Üê mul_assoc, mul_inv_cancel (mt norm_eq_zero.1 h), one_mul] }
end

@[simp] lemma abs_norm_eq_norm (z : Œ≤) : |‚à•z‚à•| = ‚à•z‚à• :=
  (abs_eq (norm_nonneg z)).mpr (or.inl rfl)

lemma inv_norm_smul_mem_closed_unit_ball [normed_space ‚Ñù Œ≤] (x : Œ≤) :
  ‚à•x‚à•‚Åª¬π ‚Ä¢ x ‚àà closed_ball (0 : Œ≤) 1 :=
by simp only [mem_closed_ball_zero_iff, norm_smul, norm_inv, norm_norm, ‚Üê div_eq_inv_mul,
  div_self_le_one]

lemma dist_smul [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) : dist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à• * dist x y :=
by simp only [dist_eq_norm, (norm_smul _ _).symm, smul_sub]

lemma nnnorm_smul [normed_space Œ± Œ≤] (s : Œ±) (x : Œ≤) : ‚à•s ‚Ä¢ x‚à•‚Çä = ‚à•s‚à•‚Çä * ‚à•x‚à•‚Çä :=
nnreal.eq $ norm_smul s x

lemma nndist_smul [normed_space Œ± Œ≤] (s : Œ±) (x y : Œ≤) :
  nndist (s ‚Ä¢ x) (s ‚Ä¢ y) = ‚à•s‚à•‚Çä * nndist x y :=
nnreal.eq $ dist_smul s x y

lemma lipschitz_with_smul [normed_space Œ± Œ≤] (s : Œ±) : lipschitz_with ‚à•s‚à•‚Çä ((‚Ä¢) s : Œ≤ ‚Üí Œ≤) :=
lipschitz_with_iff_dist_le_mul.2 $ Œª x y, by rw [dist_smul, coe_nnnorm]

lemma norm_smul_of_nonneg [normed_space ‚Ñù Œ≤] {t : ‚Ñù} (ht : 0 ‚â§ t) (x : Œ≤) :
  ‚à•t ‚Ä¢ x‚à• = t * ‚à•x‚à• := by rw [norm_smul, real.norm_eq_abs, abs_of_nonneg ht]

variables {E : Type*} [semi_normed_group E] [normed_space Œ± E]
variables {F : Type*} [semi_normed_group F] [normed_space Œ± F]

theorem eventually_nhds_norm_smul_sub_lt (c : Œ±) (x : E) {Œµ : ‚Ñù} (h : 0 < Œµ) :
  ‚àÄ·∂† y in ùìù x, ‚à•c ‚Ä¢ (y - x)‚à• < Œµ :=
have tendsto (Œª y, ‚à•c ‚Ä¢ (y - x)‚à•) (ùìù x) (ùìù 0),
  from ((continuous_id.sub continuous_const).const_smul _).norm.tendsto' _ _ (by simp),
this.eventually (gt_mem_nhds h)

lemma filter.tendsto.zero_smul_is_bounded_under_le {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : filter Œπ}
  (hf : tendsto f l (ùìù 0)) (hg : is_bounded_under (‚â§) l (norm ‚àò g)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù 0) :=
hf.op_zero_is_bounded_under_le hg (‚Ä¢) (Œª x y, (norm_smul x y).le)

lemma filter.is_bounded_under.smul_tendsto_zero {f : Œπ ‚Üí Œ±} {g : Œπ ‚Üí E} {l : filter Œπ}
  (hf : is_bounded_under (‚â§) l (norm ‚àò f)) (hg : tendsto g l (ùìù 0)) :
  tendsto (Œª x, f x ‚Ä¢ g x) l (ùìù 0) :=
hg.op_zero_is_bounded_under_le hf (flip (‚Ä¢)) (Œª x y, ((norm_smul y x).trans (mul_comm _ _)).le)

theorem closure_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  closure (ball x r) = closed_ball x r :=
begin
  refine set.subset.antisymm closure_ball_subset_closed_ball (Œª y hy, _),
  have : continuous_within_at (Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x) (set.Ico 0 1) 1 :=
    ((continuous_id.smul continuous_const).add continuous_const).continuous_within_at,
  convert this.mem_closure _ _,
  { rw [one_smul, sub_add_cancel] },
  { simp [closure_Ico (@zero_ne_one ‚Ñù _ _), zero_le_one] },
  { rintros c ‚ü®hc0, hc1‚ü©,
    rw [mem_ball, dist_eq_norm, add_sub_cancel, norm_smul, real.norm_eq_abs,
      abs_of_nonneg hc0, mul_comm, ‚Üê mul_one r],
    rw [mem_closed_ball, dist_eq_norm] at hy,
    replace hr : 0 < r, from ((norm_nonneg _).trans hy).lt_of_ne hr.symm,
    apply mul_lt_mul'; assumption }
end

theorem frontier_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  frontier (ball x r) = sphere x r :=
begin
  rw [frontier, closure_ball x hr, is_open_ball.interior_eq],
  ext x, exact (@eq_iff_le_not_lt ‚Ñù _ _ _).symm
end

theorem interior_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  interior (closed_ball x r) = ball x r :=
begin
  cases hr.lt_or_lt with hr hr,
  { rw [closed_ball_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty] },
  refine set.subset.antisymm _ ball_subset_interior_closed_ball,
  intros y hy,
  rcases (mem_closed_ball.1 $ interior_subset hy).lt_or_eq with hr|rfl, { exact hr },
  set f : ‚Ñù ‚Üí E := Œª c : ‚Ñù, c ‚Ä¢ (y - x) + x,
  suffices : f ‚Åª¬π' closed_ball x (dist y x) ‚äÜ set.Icc (-1) 1,
  { have hfc : continuous f := (continuous_id.smul continuous_const).add continuous_const,
    have hf1 : (1:‚Ñù) ‚àà f ‚Åª¬π' (interior (closed_ball x $ dist y x)), by simpa [f],
    have h1 : (1:‚Ñù) ‚àà interior (set.Icc (-1:‚Ñù) 1) :=
      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1),
    contrapose h1,
    simp },
  intros c hc,
  rw [set.mem_Icc, ‚Üê abs_le, ‚Üê real.norm_eq_abs, ‚Üê mul_le_mul_right hr],
  simpa [f, dist_eq_norm, norm_smul] using hc
end

theorem frontier_closed_ball [normed_space ‚Ñù E] (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_closed_ball, interior_closed_ball x hr,
  closed_ball_diff_ball]

/-- A (semi) normed real vector space is homeomorphic to the unit ball in the same space.
This homeomorphism sends `x : E` to `(1 + ‚à•x‚à•)‚Åª¬π ‚Ä¢ x`.

In many cases the actual implementation is not important, so we don't mark the projection lemmas
`homeomorph_unit_ball_apply_coe` and `homeomorph_unit_ball_symm_apply` as `@[simp]`. -/
@[simps { attrs := [] }]
def homeomorph_unit_ball {E : Type*} [semi_normed_group E] [normed_space ‚Ñù E] :
  E ‚âÉ‚Çú ball (0 : E) 1 :=
{ to_fun := Œª x, ‚ü®(1 + ‚à•x‚à•)‚Åª¬π ‚Ä¢ x, begin
    have : ‚à•x‚à• < |1 + ‚à•x‚à•| := (lt_one_add _).trans_le (le_abs_self _),
    rwa [mem_ball_zero_iff, norm_smul, real.norm_eq_abs, abs_inv, ‚Üê div_eq_inv_mul,
      div_lt_one ((norm_nonneg x).trans_lt this)],
  end‚ü©,
  inv_fun := Œª x, (1 - ‚à•(x : E)‚à•)‚Åª¬π ‚Ä¢ (x : E),
  left_inv := Œª x,
    begin
      have : 0 < 1 + ‚à•x‚à• := (norm_nonneg x).trans_lt (lt_one_add _),
      field_simp [this.ne', abs_of_pos this, norm_smul, smul_smul, real.norm_eq_abs, abs_div]
    end,
  right_inv := Œª x, subtype.ext
    begin
      have : 0 < 1 - ‚à•(x : E)‚à• := sub_pos.2 (mem_ball_zero_iff.1 x.2),
      field_simp [norm_smul, smul_smul, real.norm_eq_abs, abs_div, abs_of_pos this, this.ne']
    end,
  continuous_to_fun := continuous_subtype_mk _ $
    ((continuous_const.add continuous_norm).inv‚ÇÄ
      (Œª x, ((norm_nonneg x).trans_lt (lt_one_add _)).ne')).smul continuous_id,
  continuous_inv_fun := continuous.smul
    ((continuous_const.sub continuous_subtype_coe.norm).inv‚ÇÄ $
      Œª x, (sub_pos.2 $ mem_ball_zero_iff.1 x.2).ne') continuous_subtype_coe }

variables (Œ±)

lemma ne_neg_of_mem_sphere [char_zero Œ±] {r : ‚Ñù} (hr : r ‚â† 0) (x : sphere (0:E) r) : x ‚â† - x :=
Œª h, ne_zero_of_mem_sphere hr x ((self_eq_neg Œ± _).mp (by { conv_lhs {rw h}, simp }))

lemma ne_neg_of_mem_unit_sphere [char_zero Œ±] (x : sphere (0:E) 1) : x ‚â† - x :=
ne_neg_of_mem_sphere Œ± one_ne_zero x

variables {Œ±}

open normed_field

/-- The product of two normed spaces is a normed space, with the sup norm. -/
instance prod.normed_space : normed_space Œ± (E √ó F) :=
{ norm_smul_le := Œª s x, le_of_eq $ by simp [prod.norm_def, norm_smul, mul_max_of_nonneg],
  ..prod.normed_group,
  ..prod.module }

/-- The product of finitely many normed spaces is a normed space, with the sup norm. -/
instance pi.normed_space {E : Œπ ‚Üí Type*} [fintype Œπ] [‚àÄi, semi_normed_group (E i)]
  [‚àÄi, normed_space Œ± (E i)] : normed_space Œ± (Œ†i, E i) :=
{ norm_smul_le := Œª a f, le_of_eq $
    show (‚Üë(finset.sup finset.univ (Œª (b : Œπ), ‚à•a ‚Ä¢ f b‚à•‚Çä)) : ‚Ñù) =
      ‚à•a‚à•‚Çä * ‚Üë(finset.sup finset.univ (Œª (b : Œπ), ‚à•f b‚à•‚Çä)),
    by simp only [(nnreal.coe_mul _ _).symm, nnreal.mul_finset_sup, nnnorm_smul] }

/-- A subspace of a normed space is also a normed space, with the restriction of the norm. -/
instance submodule.normed_space {ùïú R : Type*} [has_scalar ùïú R] [normed_field ùïú] [ring R]
  {E : Type*} [semi_normed_group E] [normed_space ùïú E] [module R E]
  [is_scalar_tower ùïú R E] (s : submodule R E) :
  normed_space ùïú s :=
{ norm_smul_le := Œªc x, le_of_eq $ norm_smul c (x : E) }

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element with nonzero norm can be
moved by scalar multiplication to any shell of width `‚à•c‚à•`. Also recap information on the norm of
the rescaling element that shows up in applications. -/
lemma rescale_to_shell_semi_normed {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E}
  (hx : ‚à•x‚à• ‚â† 0) : ‚àÉd:Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• < Œµ ‚àß (Œµ/‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à•) ‚àß (‚à•d‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•) :=
begin
  have xŒµpos : 0 < ‚à•x‚à•/Œµ := div_pos ((ne.symm hx).le_iff_lt.1 (norm_nonneg x)) Œµpos,
  rcases exists_mem_Ico_zpow xŒµpos hc with ‚ü®n, hn‚ü©,
  have cpos : 0 < ‚à•c‚à• := lt_trans (zero_lt_one : (0 :‚Ñù) < 1) hc,
  have cnpos : 0 < ‚à•c^(n+1)‚à• := by { rw norm_zpow, exact lt_trans xŒµpos hn.2 },
  refine ‚ü®(c^(n+1))‚Åª¬π, _, _, _, _‚ü©,
  show (c ^ (n + 1))‚Åª¬π  ‚â† 0,
    by rwa [ne.def, inv_eq_zero, ‚Üê ne.def, ‚Üê norm_pos_iff],
  show ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à• < Œµ,
  { rw [norm_smul, norm_inv, ‚Üê div_eq_inv_mul, div_lt_iff cnpos, mul_comm, norm_zpow],
    exact (div_lt_iff Œµpos).1 (hn.2) },
  show Œµ / ‚à•c‚à• ‚â§ ‚à•(c ^ (n + 1))‚Åª¬π ‚Ä¢ x‚à•,
  { rw [div_le_iff cpos, norm_smul, norm_inv, norm_zpow, zpow_add‚ÇÄ (ne_of_gt cpos),
        zpow_one, mul_inv_rev‚ÇÄ, mul_comm, ‚Üê mul_assoc, ‚Üê mul_assoc, mul_inv_cancel (ne_of_gt cpos),
        one_mul, ‚Üê div_eq_inv_mul, le_div_iff (zpow_pos_of_pos cpos _), mul_comm],
    exact (le_div_iff Œµpos).1 hn.1 },
  show ‚à•(c ^ (n + 1))‚Åª¬π‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•,
  { have : Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à• = Œµ‚Åª¬π * ‚à•x‚à• * ‚à•c‚à•, by ring,
    rw [norm_inv, inv_inv, norm_zpow, zpow_add‚ÇÄ (ne_of_gt cpos), zpow_one, this, ‚Üê div_eq_inv_mul],
    exact mul_le_mul_of_nonneg_right hn.1 (norm_nonneg _) }
end

end semi_normed_group

section normed_group

variables [normed_field Œ±]
variables {E : Type*} [normed_group E] [normed_space Œ± E]
variables {F : Type*} [normed_group F] [normed_space Œ± F]

open normed_field

/-- While this may appear identical to `normed_space.to_module`, it contains an implicit argument
involving `normed_group.to_semi_normed_group` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_group (E i)] [Œ† i, normed_space ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

[This Zulip thread](https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Typeclass.20resolution.20under.20binders/near/245151099)
gives some more context. -/
@[priority 100]
instance normed_space.to_module' : module Œ± F := normed_space.to_module

theorem interior_closed_ball' [normed_space ‚Ñù E] [nontrivial E] (x : E) (r : ‚Ñù) :
  interior (closed_ball x r) = ball x r :=
begin
  rcases eq_or_ne r 0 with rfl|hr,
  { rw [closed_ball_zero, ball_zero, interior_singleton] },
  { exact interior_closed_ball x hr }
end

theorem frontier_closed_ball' [normed_space ‚Ñù E] [nontrivial E] (x : E) (r : ‚Ñù) :
  frontier (closed_ball x r) = sphere x r :=
by rw [frontier, closure_closed_ball, interior_closed_ball' x r, closed_ball_diff_ball]

variables {Œ±}

/-- If there is a scalar `c` with `‚à•c‚à•>1`, then any element can be moved by scalar multiplication to
any shell of width `‚à•c‚à•`. Also recap information on the norm of the rescaling element that shows
up in applications. -/
lemma rescale_to_shell {c : Œ±} (hc : 1 < ‚à•c‚à•) {Œµ : ‚Ñù} (Œµpos : 0 < Œµ) {x : E} (hx : x ‚â† 0) :
  ‚àÉd:Œ±, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ x‚à• < Œµ ‚àß (Œµ/‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ x‚à•) ‚àß (‚à•d‚à•‚Åª¬π ‚â§ Œµ‚Åª¬π * ‚à•c‚à• * ‚à•x‚à•) :=
rescale_to_shell_semi_normed hc Œµpos (ne_of_lt (norm_pos_iff.2 hx)).symm

end normed_group

section normed_space_nondiscrete

variables (ùïú E : Type*) [nondiscrete_normed_field ùïú] [normed_group E] [normed_space ùïú E]
  [nontrivial E]

include ùïú

/-- If `E` is a nontrivial normed space over a nondiscrete normed field `ùïú`, then `E` is unbounded:
for any `c : ‚Ñù`, there exists a vector `x : E` with norm strictly greater than `c`. -/
lemma normed_space.exists_lt_norm (c : ‚Ñù) : ‚àÉ x : E, c < ‚à•x‚à• :=
begin
  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©,
  rcases normed_field.exists_lt_norm ùïú (c / ‚à•x‚à•) with ‚ü®r, hr‚ü©,
  use r ‚Ä¢ x,
  rwa [norm_smul, ‚Üê div_lt_iff],
  rwa norm_pos_iff
end

protected lemma normed_space.unbounded_univ : ¬¨bounded (set.univ : set E) :=
Œª h, let ‚ü®R, hR‚ü© := bounded_iff_forall_norm_le.1 h, ‚ü®x, hx‚ü© := normed_space.exists_lt_norm ùïú E R
in hx.not_le (hR x trivial)

/-- A normed vector space over a nondiscrete normed field is a noncompact space. This cannot be
an instance because in order to apply it, Lean would have to search for `normed_space ùïú E` with
unknown `ùïú`. We register this as an instance in two cases: `ùïú = E` and `ùïú = ‚Ñù`. -/
protected lemma normed_space.noncompact_space : noncompact_space E :=
‚ü®Œª h, normed_space.unbounded_univ ùïú _ h.bounded‚ü©

@[priority 100]
instance nondiscrete_normed_field.noncompact_space : noncompact_space ùïú :=
normed_space.noncompact_space ùïú ùïú

omit ùïú

@[priority 100]
instance real_normed_space.noncompact_space [normed_space ‚Ñù E] : noncompact_space E :=
normed_space.noncompact_space ‚Ñù E

end normed_space_nondiscrete

section normed_algebra

/-- A normed algebra `ùïú'` over `ùïú` is normed module that is also an algebra.

See the implementation notes for `algebra` for a discussion about non-unital algebras. Following
the strategy there, a non-unital *normed* algebra can be written as:
```lean
variables [normed_field ùïú] [non_unital_semi_normed_ring ùïú']
variables [normed_module ùïú ùïú'] [smul_comm_class ùïú ùïú' ùïú'] [is_scalar_tower ùïú ùïú' ùïú']
```
-/
class normed_algebra (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [semi_normed_ring ùïú']
  extends algebra ùïú ùïú' :=
(norm_smul_le : ‚àÄ (r : ùïú) (x : ùïú'), ‚à•r ‚Ä¢ x‚à• ‚â§ ‚à•r‚à• * ‚à•x‚à•)

variables {ùïú : Type*} (ùïú' : Type*) [normed_field ùïú] [semi_normed_ring ùïú'] [normed_algebra ùïú ùïú']

@[priority 100]
instance normed_algebra.to_normed_space : normed_space ùïú ùïú' :=
{ norm_smul_le := normed_algebra.norm_smul_le }

/-- While this may appear identical to `normed_algebra.to_normed_space`, it contains an implicit
argument involving `normed_ring.to_semi_normed_ring` that typeclass inference has trouble inferring.

Specifically, the following instance cannot be found without this `normed_space.to_module'`:
```lean
example
  (ùïú Œπ : Type*) (E : Œπ ‚Üí Type*)
  [normed_field ùïú] [Œ† i, normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  Œ† i, module ùïú (E i) := by apply_instance
```

See `normed_space.to_module'` for a similar situation. -/
@[priority 100]
instance normed_algebra.to_normed_space' {ùïú'} [normed_ring ùïú'] [normed_algebra ùïú ùïú'] :
  normed_space ùïú ùïú' := by apply_instance

lemma norm_algebra_map (x : ùïú) : ‚à•algebra_map ùïú ùïú' x‚à• = ‚à•x‚à• * ‚à•(1 : ùïú')‚à• :=
begin
  rw algebra.algebra_map_eq_smul_one,
  exact norm_smul _ _,
end

lemma nnnorm_algebra_map (x : ùïú) : ‚à•algebra_map ùïú ùïú' x‚à•‚Çä = ‚à•x‚à•‚Çä * ‚à•(1 : ùïú')‚à•‚Çä :=
subtype.ext $ norm_algebra_map ùïú' x

@[simp] lemma norm_algebra_map' [norm_one_class ùïú'] (x : ùïú) : ‚à•algebra_map ùïú ùïú' x‚à• = ‚à•x‚à• :=
by rw [norm_algebra_map, norm_one, mul_one]

@[simp] lemma nnnorm_algebra_map' [norm_one_class ùïú'] (x : ùïú) : ‚à•algebra_map ùïú ùïú' x‚à•‚Çä = ‚à•x‚à•‚Çä :=
subtype.ext $ norm_algebra_map' _ _

variables (ùïú ùïú')

/-- In a normed algebra, the inclusion of the base field in the extended field is an isometry. -/
lemma algebra_map_isometry [norm_one_class ùïú'] : isometry (algebra_map ùïú ùïú') :=
begin
  refine isometry_emetric_iff_metric.2 (Œªx y, _),
  rw [dist_eq_norm, dist_eq_norm, ‚Üê ring_hom.map_sub, norm_algebra_map'],
end

/-- The inclusion of the base field in a normed algebra as a continuous linear map. -/
@[simps]
def algebra_map_clm : ùïú ‚ÜíL[ùïú] ùïú' :=
{ to_fun := algebra_map ùïú ùïú',
  map_add' := (algebra_map ùïú ùïú').map_add,
  map_smul' := Œª r x, by rw [algebra.id.smul_eq_mul, map_mul, ring_hom.id_apply, algebra.smul_def],
  cont :=
    have lipschitz_with ‚à•(1 : ùïú')‚à•‚Çä (algebra_map ùïú ùïú') := Œª x y, begin
      rw [edist_eq_coe_nnnorm_sub, edist_eq_coe_nnnorm_sub, ‚Üêmap_sub, ‚Üêennreal.coe_mul,
        ennreal.coe_le_coe, mul_comm],
      exact (nnnorm_algebra_map _ _).le,
    end, this.continuous }

lemma algebra_map_clm_coe :
  (algebra_map_clm ùïú ùïú' : ùïú ‚Üí ùïú') = (algebra_map ùïú ùïú' : ùïú ‚Üí ùïú') := rfl

lemma algebra_map_clm_to_linear_map :
  (algebra_map_clm ùïú ùïú').to_linear_map = algebra.linear_map ùïú ùïú' := rfl

instance normed_algebra.id : normed_algebra ùïú ùïú :=
{ .. normed_field.to_normed_space,
  .. algebra.id ùïú}

/-- Any normed characteristic-zero division ring that is a normed_algebra over the reals is also a
normed algebra over the rationals.

Phrased another way, if `ùïú` is a normed algebra over the reals, then `algebra_rat` respects that
norm. -/
instance normed_algebra_rat {ùïú} [normed_division_ring ùïú] [char_zero ùïú] [normed_algebra ‚Ñù ùïú] :
  normed_algebra ‚Ñö ùïú :=
{ norm_smul_le := Œª q x,
    by rw [‚Üêsmul_one_smul ‚Ñù q x, rat.smul_one_eq_coe, norm_smul, rat.norm_cast_real], }

instance punit.normed_algebra : normed_algebra ùïú punit :=
{ norm_smul_le := Œª q x, by simp only [punit.norm_eq_zero, mul_zero] }

/-- The product of two normed algebras is a normed algebra, with the sup norm. -/
instance prod.normed_algebra {E F : Type*} [semi_normed_ring E] [semi_normed_ring F]
  [normed_algebra ùïú E] [normed_algebra ùïú F] :
  normed_algebra ùïú (E √ó F) :=
{ ..prod.normed_space }

/-- The product of finitely many normed algebras is a normed algebra, with the sup norm. -/
instance pi.normed_algebra {E : Œπ ‚Üí Type*} [fintype Œπ]
  [Œ† i, semi_normed_ring (E i)] [Œ† i, normed_algebra ùïú (E i)] :
  normed_algebra ùïú (Œ† i, E i) :=
{ .. pi.normed_space,
  .. pi.algebra _ E }

end normed_algebra

section restrict_scalars

variables (ùïú : Type*) (ùïú' : Type*) [normed_field ùïú] [normed_field ùïú'] [normed_algebra ùïú ùïú']
(E : Type*) [semi_normed_group E] [normed_space ùïú' E]

/-- Warning: This declaration should be used judiciously.
Please consider using `is_scalar_tower` instead.

`ùïú`-normed space structure induced by a `ùïú'`-normed space structure when `ùïú'` is a
normed algebra over `ùïú`. Not registered as an instance as `ùïú'` can not be inferred.

The type synonym `restrict_scalars ùïú ùïú' E` will be endowed with this instance by default.
-/
def normed_space.restrict_scalars : normed_space ùïú E :=
{ norm_smul_le := Œªc x, le_of_eq $ begin
    change ‚à•(algebra_map ùïú ùïú' c) ‚Ä¢ x‚à• = ‚à•c‚à• * ‚à•x‚à•,
    simp [norm_smul]
  end,
  ..restrict_scalars.module ùïú ùïú' E }

instance {ùïú : Type*} {ùïú' : Type*} {E : Type*} [I : semi_normed_group E] :
  semi_normed_group (restrict_scalars ùïú ùïú' E) := I

instance {ùïú : Type*} {ùïú' : Type*} {E : Type*} [I : normed_group E] :
  normed_group (restrict_scalars ùïú ùïú' E) := I

instance : normed_space ùïú (restrict_scalars ùïú ùïú' E) :=
(normed_space.restrict_scalars ùïú ùïú' E : normed_space ùïú E)

/--
The action of the original normed_field on `restrict_scalars ùïú ùïú' E`.
This is not an instance as it would be contrary to the purpose of `restrict_scalars`.
-/
-- If you think you need this, consider instead reproducing `restrict_scalars.lsmul`
-- appropriately modified here.
def module.restrict_scalars.normed_space_orig {ùïú : Type*} {ùïú' : Type*} {E : Type*}
  [normed_field ùïú'] [semi_normed_group E] [I : normed_space ùïú' E] :
  normed_space ùïú' (restrict_scalars ùïú ùïú' E) := I

end restrict_scalars
