/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import analysis.normed.group.infinite_sum
import topology.algebra.module.basic
import topology.instances.ennreal
import topology.instances.rat

/-!
# Normed fields

In this file we define (semi)normed rings and fields. We also prove some theorems about these
definitions.
-/

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

noncomputable theory
open filter metric
open_locale topological_space big_operators nnreal ennreal uniformity pointwise

/-- A non-unital seminormed ring is a not-necessarily-unital ring
endowed with a seminorm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class non_unital_semi_normed_ring (Œ± : Type*)
  extends has_norm Œ±, non_unital_ring Œ±, pseudo_metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A seminormed ring is a ring endowed with a seminorm which satisfies the inequality
`‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class semi_normed_ring (Œ± : Type*) extends has_norm Œ±, ring Œ±, pseudo_metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A seminormed ring is a non-unital seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance semi_normed_ring.to_non_unital_semi_normed_ring [Œ≤ : semi_normed_ring Œ±] :
  non_unital_semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A non-unital normed ring is a not-necessarily-unital ring
endowed with a norm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class non_unital_normed_ring (Œ± : Type*) extends has_norm Œ±, non_unital_ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A non-unital normed ring is a non-unital seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance non_unital_normed_ring.to_non_unital_semi_normed_ring [Œ≤ : non_unital_normed_ring Œ±] :
  non_unital_semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A normed ring is a ring endowed with a norm which satisfies the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class normed_ring (Œ± : Type*) extends has_norm Œ±, ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul : ‚àÄ a b, norm (a * b) ‚â§ norm a * norm b)

/-- A normed division ring is a division ring endowed with a seminorm which satisfies the equality
`‚à•x y‚à• = ‚à•x‚à• ‚à•y‚à•`. -/
class normed_division_ring (Œ± : Type*) extends has_norm Œ±, division_ring Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b)

/-- A normed division ring is a normed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_division_ring.to_normed_ring [Œ≤ : normed_division_ring Œ±] : normed_ring Œ± :=
{ norm_mul := Œª a b, (normed_division_ring.norm_mul' a b).le,
  ..Œ≤ }

/-- A normed ring is a seminormed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_ring.to_semi_normed_ring [Œ≤ : normed_ring Œ±] : semi_normed_ring Œ± :=
{ ..Œ≤ }

/-- A normed ring is a non-unital normed ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_ring.to_non_unital_normed_ring [Œ≤ : normed_ring Œ±] : non_unital_normed_ring Œ± :=
{ ..Œ≤ }

/-- A seminormed commutative ring is a commutative ring endowed with a seminorm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class semi_normed_comm_ring (Œ± : Type*) extends semi_normed_ring Œ± :=
(mul_comm : ‚àÄ x y : Œ±, x * y = y * x)

/-- A normed commutative ring is a commutative ring endowed with a norm which satisfies
the inequality `‚à•x y‚à• ‚â§ ‚à•x‚à• ‚à•y‚à•`. -/
class normed_comm_ring (Œ± : Type*) extends normed_ring Œ± :=
(mul_comm : ‚àÄ x y : Œ±, x * y = y * x)

/-- A normed commutative ring is a seminormed commutative ring. -/
@[priority 100] -- see Note [lower instance priority]
instance normed_comm_ring.to_semi_normed_comm_ring [Œ≤ : normed_comm_ring Œ±] :
  semi_normed_comm_ring Œ± := { ..Œ≤ }

instance : normed_comm_ring punit :=
{ norm_mul := Œª _ _, by simp,
  ..punit.normed_group,
  ..punit.comm_ring, }

/-- A mixin class with the axiom `‚à•1‚à• = 1`. Many `normed_ring`s and all `normed_field`s satisfy this
axiom. -/
class norm_one_class (Œ± : Type*) [has_norm Œ±] [has_one Œ±] : Prop :=
(norm_one : ‚à•(1:Œ±)‚à• = 1)

export norm_one_class (norm_one)

attribute [simp] norm_one

@[simp] lemma nnnorm_one [semi_normed_group Œ±] [has_one Œ±] [norm_one_class Œ±] : ‚à•(1 : Œ±)‚à•‚Çä = 1 :=
nnreal.eq norm_one

lemma norm_one_class.nontrivial (Œ± : Type*) [semi_normed_group Œ±] [has_one Œ±] [norm_one_class Œ±] :
  nontrivial Œ± :=
nontrivial_of_ne 0 1 $ ne_of_apply_ne norm $ by simp

@[priority 100] -- see Note [lower instance priority]
instance semi_normed_comm_ring.to_comm_ring [Œ≤ : semi_normed_comm_ring Œ±] : comm_ring Œ± := { ..Œ≤ }

@[priority 100] -- see Note [lower instance priority]
instance non_unital_normed_ring.to_normed_group [Œ≤ : non_unital_normed_ring Œ±] : normed_group Œ± :=
{ ..Œ≤ }

@[priority 100] -- see Note [lower instance priority]
instance non_unital_semi_normed_ring.to_semi_normed_group [Œ≤ : non_unital_semi_normed_ring Œ±] :
  semi_normed_group Œ± := { ..Œ≤ }

instance prod.norm_one_class [semi_normed_group Œ±] [has_one Œ±] [norm_one_class Œ±]
  [semi_normed_group Œ≤] [has_one Œ≤] [norm_one_class Œ≤] :
  norm_one_class (Œ± √ó Œ≤) :=
‚ü®by simp [prod.norm_def]‚ü©

instance pi.norm_one_class {Œπ : Type*} {Œ± : Œπ ‚Üí Type*} [nonempty Œπ] [fintype Œπ]
  [Œ† i, semi_normed_group (Œ± i)] [Œ† i, has_one (Œ± i)] [‚àÄ i, norm_one_class (Œ± i)] :
  norm_one_class (Œ† i, Œ± i) :=
‚ü®by simp [pi.norm_def, finset.sup_const finset.univ_nonempty]‚ü©

section non_unital_semi_normed_ring
variables [non_unital_semi_normed_ring Œ±]

lemma norm_mul_le (a b : Œ±) : (‚à•a*b‚à•) ‚â§ (‚à•a‚à•) * (‚à•b‚à•) :=
non_unital_semi_normed_ring.norm_mul _ _

lemma nnnorm_mul_le (a b : Œ±) : ‚à•a * b‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä * ‚à•b‚à•‚Çä :=
by simpa only [‚Üênorm_to_nnreal, ‚Üêreal.to_nnreal_mul (norm_nonneg _)]
  using real.to_nnreal_mono (norm_mul_le _ _)

lemma one_le_norm_one (Œ≤) [normed_ring Œ≤] [nontrivial Œ≤] : 1 ‚â§ ‚à•(1 : Œ≤)‚à• :=
(le_mul_iff_one_le_left $ norm_pos_iff.mpr (one_ne_zero : (1 : Œ≤) ‚â† 0)).mp
  (by simpa only [mul_one] using norm_mul_le (1 : Œ≤) 1)

lemma one_le_nnnorm_one (Œ≤) [normed_ring Œ≤] [nontrivial Œ≤] : 1 ‚â§ ‚à•(1 : Œ≤)‚à•‚Çä :=
one_le_norm_one Œ≤

lemma filter.tendsto.zero_mul_is_bounded_under_le {f g : Œπ ‚Üí Œ±} {l : filter Œπ}
  (hf : tendsto f l (ùìù 0)) (hg : is_bounded_under (‚â§) l (norm ‚àò g)) :
  tendsto (Œª x, f x * g x) l (ùìù 0) :=
hf.op_zero_is_bounded_under_le hg (*) norm_mul_le

lemma filter.is_bounded_under_le.mul_tendsto_zero {f g : Œπ ‚Üí Œ±} {l : filter Œπ}
  (hf : is_bounded_under (‚â§) l (norm ‚àò f)) (hg : tendsto g l (ùìù 0)) :
  tendsto (Œª x, f x * g x) l (ùìù 0) :=
hg.op_zero_is_bounded_under_le hf (flip (*)) (Œª x y, ((norm_mul_le y x).trans_eq (mul_comm _ _)))

/-- In a seminormed ring, the left-multiplication `add_monoid_hom` is bounded. -/
lemma mul_left_bound (x : Œ±) :
  ‚àÄ (y:Œ±), ‚à•add_monoid_hom.mul_left x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à• :=
norm_mul_le x

/-- In a seminormed ring, the right-multiplication `add_monoid_hom` is bounded. -/
lemma mul_right_bound (x : Œ±) :
  ‚àÄ (y:Œ±), ‚à•add_monoid_hom.mul_right x y‚à• ‚â§ ‚à•x‚à• * ‚à•y‚à• :=
Œª y, by {rw mul_comm, convert norm_mul_le y x}

/-- Non-unital seminormed ring structure on the product of two non-unital seminormed rings,
  using the sup norm. -/
instance prod.non_unital_semi_normed_ring [non_unital_semi_normed_ring Œ≤] :
  non_unital_semi_normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := assume x y,
  calc
    ‚à•x * y‚à• = ‚à•(x.1*y.1, x.2*y.2)‚à• : rfl
        ... = (max ‚à•x.1*y.1‚à•  ‚à•x.2*y.2‚à•) : rfl
        ... ‚â§ (max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•x.2‚à•*‚à•y.2‚à•)) :
          max_le_max (norm_mul_le (x.1) (y.1)) (norm_mul_le (x.2) (y.2))
        ... = (max (‚à•x.1‚à•*‚à•y.1‚à•) (‚à•y.2‚à•*‚à•x.2‚à•)) : by simp[mul_comm]
        ... ‚â§ (max (‚à•x.1‚à•) (‚à•x.2‚à•)) * (max (‚à•y.2‚à•) (‚à•y.1‚à•)) :
          by apply max_mul_mul_le_max_mul_max; simp [norm_nonneg]
        ... = (max (‚à•x.1‚à•) (‚à•x.2‚à•)) * (max (‚à•y.1‚à•) (‚à•y.2‚à•)) : by simp [max_comm]
        ... = (‚à•x‚à•*‚à•y‚à•) : rfl,
  ..prod.semi_normed_group }

/-- Non-unital seminormed ring structure on the product of finitely many non-unital seminormed
rings, using the sup norm. -/
instance pi.non_unital_semi_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ]
  [Œ† i, non_unital_semi_normed_ring (œÄ i)] :
  non_unital_semi_normed_ring (Œ† i, œÄ i) :=
{ norm_mul := Œª x y, nnreal.coe_mono $
    calc  finset.univ.sup (Œª i, ‚à•x i * y i‚à•‚Çä)
        ‚â§ finset.univ.sup ((Œª i, ‚à•x i‚à•‚Çä) * (Œª i, ‚à•y i‚à•‚Çä)) :
            finset.sup_mono_fun $ Œª b hb, norm_mul_le _ _
    ... ‚â§ finset.univ.sup (Œª i, ‚à•x i‚à•‚Çä) * finset.univ.sup (Œª i, ‚à•y i‚à•‚Çä) :
            finset.sup_mul_le_mul_sup_of_nonneg _ (Œª i _, zero_le _) (Œª i _, zero_le _),
  ..pi.semi_normed_group }

end non_unital_semi_normed_ring

section semi_normed_ring

variables [semi_normed_ring Œ±]

/-- A subalgebra of a seminormed ring is also a seminormed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance subalgebra.semi_normed_ring {ùïú : Type*} {_ : comm_ring ùïú}
  {E : Type*} [semi_normed_ring E] {_ : algebra ùïú E} (s : subalgebra ùïú E) : semi_normed_ring s :=
{ norm_mul := Œª a b, norm_mul_le a.1 b.1,
  ..s.to_submodule.semi_normed_group }

/-- A subalgebra of a normed ring is also a normed ring, with the restriction of the norm.

See note [implicit instance arguments]. -/
instance subalgebra.normed_ring {ùïú : Type*} {_ : comm_ring ùïú}
  {E : Type*} [normed_ring E] {_ : algebra ùïú E} (s : subalgebra ùïú E) : normed_ring s :=
{ ..s.semi_normed_ring }

lemma list.norm_prod_le' : ‚àÄ {l : list Œ±}, l ‚â† [] ‚Üí ‚à•l.prod‚à• ‚â§ (l.map norm).prod
| [] h := (h rfl).elim
| [a] _ := by simp
| (a :: b :: l) _ :=
  begin
    rw [list.map_cons, list.prod_cons, @list.prod_cons _ _ _ ‚à•a‚à•],
    refine le_trans (norm_mul_le _ _) (mul_le_mul_of_nonneg_left _ (norm_nonneg _)),
    exact list.norm_prod_le' (list.cons_ne_nil b l)
  end

lemma list.nnnorm_prod_le' {l : list Œ±} (hl : l ‚â† []) : ‚à•l.prod‚à•‚Çä ‚â§ (l.map nnnorm).prod :=
(list.norm_prod_le' hl).trans_eq $ by simp [nnreal.coe_list_prod, list.map_map]

lemma list.norm_prod_le [norm_one_class Œ±] : ‚àÄ l : list Œ±, ‚à•l.prod‚à• ‚â§ (l.map norm).prod
| [] := by simp
| (a::l) := list.norm_prod_le' (list.cons_ne_nil a l)

lemma list.nnnorm_prod_le [norm_one_class Œ±] (l : list Œ±) : ‚à•l.prod‚à•‚Çä ‚â§ (l.map nnnorm).prod :=
l.norm_prod_le.trans_eq $ by simp [nnreal.coe_list_prod, list.map_map]

lemma finset.norm_prod_le' {Œ± : Type*} [normed_comm_ring Œ±] (s : finset Œπ) (hs : s.nonempty)
  (f : Œπ ‚Üí Œ±) :
  ‚à•‚àè i in s, f i‚à• ‚â§ ‚àè i in s, ‚à•f i‚à• :=
begin
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©,
  have : l.map f ‚â† [], by simpa using hs,
  simpa using list.norm_prod_le' this
end

lemma finset.nnnorm_prod_le' {Œ± : Type*} [normed_comm_ring Œ±] (s : finset Œπ) (hs : s.nonempty)
  (f : Œπ ‚Üí Œ±) :
  ‚à•‚àè i in s, f i‚à•‚Çä ‚â§ ‚àè i in s, ‚à•f i‚à•‚Çä :=
(s.norm_prod_le' hs f).trans_eq $ by simp [nnreal.coe_prod]

lemma finset.norm_prod_le {Œ± : Type*} [normed_comm_ring Œ±] [norm_one_class Œ±] (s : finset Œπ)
  (f : Œπ ‚Üí Œ±) :
  ‚à•‚àè i in s, f i‚à• ‚â§ ‚àè i in s, ‚à•f i‚à• :=
begin
  rcases s with ‚ü®‚ü®l‚ü©, hl‚ü©,
  simpa using (l.map f).norm_prod_le
end

lemma finset.nnnorm_prod_le {Œ± : Type*} [normed_comm_ring Œ±] [norm_one_class Œ±] (s : finset Œπ)
  (f : Œπ ‚Üí Œ±) :
  ‚à•‚àè i in s, f i‚à•‚Çä ‚â§ ‚àè i in s, ‚à•f i‚à•‚Çä :=
(s.norm_prod_le f).trans_eq $ by simp [nnreal.coe_prod]

/-- If `Œ±` is a seminormed ring, then `‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n` for `n > 0`.
See also `nnnorm_pow_le`. -/
lemma nnnorm_pow_le' (a : Œ±) : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí ‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n
| 1 h := by simp only [pow_one]
| (n + 2) h := by simpa only [pow_succ _ (n + 1)] using
    le_trans (nnnorm_mul_le _ _) (mul_le_mul_left' (nnnorm_pow_le' n.succ_pos) _)

/-- If `Œ±` is a seminormed ring with `‚à•1‚à•‚Çä = 1`, then `‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n`.
See also `nnnorm_pow_le'`.-/
lemma nnnorm_pow_le [norm_one_class Œ±] (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à•‚Çä ‚â§ ‚à•a‚à•‚Çä ^ n :=
nat.rec_on n (by simp only [pow_zero, nnnorm_one]) (Œª k hk, nnnorm_pow_le' a k.succ_pos)

/-- If `Œ±` is a seminormed ring, then `‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n` for `n > 0`. See also `norm_pow_le`. -/
lemma norm_pow_le' (a : Œ±) {n : ‚Ñï} (h : 0 < n) : ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
by simpa only [nnreal.coe_pow, coe_nnnorm] using nnreal.coe_mono (nnnorm_pow_le' a h)

/-- If `Œ±` is a seminormed ring with `‚à•1‚à• = 1`, then `‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n`. See also `norm_pow_le'`.-/
lemma norm_pow_le [norm_one_class Œ±] (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
nat.rec_on n (by simp only [pow_zero, norm_one]) (Œª n hn, norm_pow_le' a n.succ_pos)

lemma eventually_norm_pow_le (a : Œ±) : ‚àÄ·∂† (n:‚Ñï) in at_top, ‚à•a ^ n‚à• ‚â§ ‚à•a‚à• ^ n :=
eventually_at_top.mpr ‚ü®1, Œª b h, norm_pow_le' a (nat.succ_le_iff.mp h)‚ü©

/-- Seminormed ring structure on the product of two seminormed rings,
  using the sup norm. -/
instance prod.semi_normed_ring [semi_normed_ring Œ≤] :
  semi_normed_ring (Œ± √ó Œ≤) :=
{ ..prod.non_unital_semi_normed_ring,
  ..prod.semi_normed_group, }

/-- Seminormed ring structure on the product of finitely many seminormed rings,
  using the sup norm. -/
instance pi.semi_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, semi_normed_ring (œÄ i)] :
  semi_normed_ring (Œ† i, œÄ i) :=
{ ..pi.non_unital_semi_normed_ring,
  ..pi.semi_normed_group, }

end semi_normed_ring

section non_unital_normed_ring
variables [non_unital_normed_ring Œ±]

/-- Non-unital normed ring structure on the product of two non-unital normed rings,
using the sup norm. -/
instance prod.non_unital_normed_ring [non_unital_normed_ring Œ≤] : non_unital_normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := norm_mul_le,
  ..prod.semi_normed_group }

/-- Normed ring structure on the product of finitely many non-unital normed rings, using the sup
norm. -/
instance pi.non_unital_normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, non_unital_normed_ring (œÄ i)] :
  non_unital_normed_ring (Œ† i, œÄ i) :=
{ norm_mul := norm_mul_le,
  ..pi.normed_group }

end non_unital_normed_ring

section normed_ring

variables [normed_ring Œ±]

lemma units.norm_pos [nontrivial Œ±] (x : Œ±À£) : 0 < ‚à•(x:Œ±)‚à• :=
norm_pos_iff.mpr (units.ne_zero x)

lemma units.nnnorm_pos [nontrivial Œ±] (x : Œ±À£) : 0 < ‚à•(x:Œ±)‚à•‚Çä :=
x.norm_pos

/-- Normed ring structure on the product of two normed rings, using the sup norm. -/
instance prod.normed_ring [normed_ring Œ≤] : normed_ring (Œ± √ó Œ≤) :=
{ norm_mul := norm_mul_le,
  ..prod.semi_normed_group }

/-- Normed ring structure on the product of finitely many normed rings, using the sup norm. -/
instance pi.normed_ring {œÄ : Œπ ‚Üí Type*} [fintype Œπ] [Œ† i, normed_ring (œÄ i)] :
  normed_ring (Œ† i, œÄ i) :=
{ norm_mul := norm_mul_le,
  ..pi.semi_normed_group }

end normed_ring

@[priority 100] -- see Note [lower instance priority]
instance semi_normed_ring_top_monoid [non_unital_semi_normed_ring Œ±] : has_continuous_mul Œ± :=
‚ü® continuous_iff_continuous_at.2 $ Œª x, tendsto_iff_norm_tendsto_zero.2 $
    begin
      have : ‚àÄ e : Œ± √ó Œ±, ‚à•e.1 * e.2 - x.1 * x.2‚à• ‚â§ ‚à•e.1‚à• * ‚à•e.2 - x.2‚à• + ‚à•e.1 - x.1‚à• * ‚à•x.2‚à•,
      { intro e,
        calc ‚à•e.1 * e.2 - x.1 * x.2‚à• ‚â§ ‚à•e.1 * (e.2 - x.2) + (e.1 - x.1) * x.2‚à• :
          by rw [mul_sub, sub_mul, sub_add_sub_cancel]
        ... ‚â§ ‚à•e.1‚à• * ‚à•e.2 - x.2‚à• + ‚à•e.1 - x.1‚à• * ‚à•x.2‚à• :
          norm_add_le_of_le (norm_mul_le _ _) (norm_mul_le _ _) },
      refine squeeze_zero (Œª e, norm_nonneg _) this _,
      convert ((continuous_fst.tendsto x).norm.mul ((continuous_snd.tendsto x).sub
        tendsto_const_nhds).norm).add
        (((continuous_fst.tendsto x).sub tendsto_const_nhds).norm.mul _),
      show tendsto _ _ _, from tendsto_const_nhds,
      simp
    end ‚ü©

/-- A seminormed ring is a topological ring. -/
@[priority 100] -- see Note [lower instance priority]
instance semi_normed_top_ring [non_unital_semi_normed_ring Œ±] : topological_ring Œ± := { }

section normed_division_ring

variables [normed_division_ring Œ±]

@[simp] lemma norm_mul (a b : Œ±) : ‚à•a * b‚à• = ‚à•a‚à• * ‚à•b‚à• :=
normed_division_ring.norm_mul' a b

@[priority 900]
instance normed_division_ring.to_norm_one_class : norm_one_class Œ± :=
‚ü®mul_left_cancel‚ÇÄ (mt norm_eq_zero.1 (@one_ne_zero Œ± _ _)) $
  by rw [‚Üê norm_mul, mul_one, mul_one]‚ü©

@[simp] lemma nnnorm_mul (a b : Œ±) : ‚à•a * b‚à•‚Çä = ‚à•a‚à•‚Çä * ‚à•b‚à•‚Çä :=
nnreal.eq $ norm_mul a b

/-- `norm` as a `monoid_with_zero_hom`. -/
@[simps] def norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù := ‚ü®norm, norm_zero, norm_one, norm_mul‚ü©

/-- `nnnorm` as a `monoid_with_zero_hom`. -/
@[simps] def nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0 := ‚ü®nnnorm, nnnorm_zero, nnnorm_one, nnnorm_mul‚ü©

@[simp] lemma norm_pow (a : Œ±) : ‚àÄ (n : ‚Ñï), ‚à•a ^ n‚à• = ‚à•a‚à• ^ n :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_pow a

@[simp] lemma nnnorm_pow (a : Œ±) (n : ‚Ñï) : ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_pow a n

protected lemma list.norm_prod (l : list Œ±) : ‚à•l.prod‚à• = (l.map norm).prod :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_list_prod _

protected lemma list.nnnorm_prod (l : list Œ±) : ‚à•l.prod‚à•‚Çä = (l.map nnnorm).prod :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_list_prod _

@[simp] lemma norm_div (a b : Œ±) : ‚à•a / b‚à• = ‚à•a‚à• / ‚à•b‚à• := (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_div a b

@[simp] lemma nnnorm_div (a b : Œ±) : ‚à•a / b‚à•‚Çä = ‚à•a‚à•‚Çä / ‚à•b‚à•‚Çä := (nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0).map_div a b

@[simp] lemma norm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à• = ‚à•a‚à•‚Åª¬π := (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_inv a

@[simp] lemma nnnorm_inv (a : Œ±) : ‚à•a‚Åª¬π‚à•‚Çä = ‚à•a‚à•‚Çä‚Åª¬π :=
nnreal.eq $ by simp

@[simp] lemma norm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚à•a^n‚à• = ‚à•a‚à•^n := (norm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù).map_zpow

@[simp] lemma nnnorm_zpow : ‚àÄ (a : Œ±) (n : ‚Ñ§), ‚à•a ^ n‚à•‚Çä = ‚à•a‚à•‚Çä ^ n :=
(nnnorm_hom : Œ± ‚Üí*‚ÇÄ ‚Ñù‚â•0).map_zpow

/-- Multiplication on the left by a nonzero element of a normed division ring tends to infinity at
infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/
lemma filter.tendsto_mul_left_cobounded {a : Œ±} (ha : a ‚â† 0) :
  tendsto ((*) a) (comap norm at_top) (comap norm at_top) :=
by simpa only [tendsto_comap_iff, (‚àò), norm_mul]
  using tendsto_const_nhds.mul_at_top (norm_pos_iff.2 ha) tendsto_comap

/-- Multiplication on the right by a nonzero element of a normed division ring tends to infinity at
infinity. TODO: use `bornology.cobounded` instead of `filter.comap has_norm.norm filter.at_top`. -/
lemma filter.tendsto_mul_right_cobounded {a : Œ±} (ha : a ‚â† 0) :
  tendsto (Œª x, x * a) (comap norm at_top) (comap norm at_top) :=
by simpa only [tendsto_comap_iff, (‚àò), norm_mul]
  using tendsto_comap.at_top_mul (norm_pos_iff.2 ha) tendsto_const_nhds

@[priority 100] -- see Note [lower instance priority]
instance normed_division_ring.to_has_continuous_inv‚ÇÄ : has_continuous_inv‚ÇÄ Œ± :=
begin
  refine ‚ü®Œª r r0, tendsto_iff_norm_tendsto_zero.2 _‚ü©,
  have r0' : 0 < ‚à•r‚à• := norm_pos_iff.2 r0,
  rcases exists_between r0' with ‚ü®Œµ, Œµ0, Œµr‚ü©,
  have : ‚àÄ·∂† e in ùìù r, ‚à•e‚Åª¬π - r‚Åª¬π‚à• ‚â§ ‚à•r - e‚à• / ‚à•r‚à• / Œµ,
  { filter_upwards [(is_open_lt continuous_const continuous_norm).eventually_mem Œµr] with e he,
    have e0 : e ‚â† 0 := norm_pos_iff.1 (Œµ0.trans he),
    calc ‚à•e‚Åª¬π - r‚Åª¬π‚à• = ‚à•r‚à•‚Åª¬π * ‚à•r - e‚à• * ‚à•e‚à•‚Åª¬π : by
      { rw [‚Üênorm_inv, ‚Üênorm_inv, ‚Üênorm_mul, ‚Üênorm_mul, mul_sub, sub_mul, mul_assoc _ e,
          inv_mul_cancel r0, mul_inv_cancel e0, one_mul, mul_one] }
    ...              = ‚à•r - e‚à• / ‚à•r‚à• / ‚à•e‚à• : by field_simp [mul_comm]
    ... ‚â§ ‚à•r - e‚à• / ‚à•r‚à• / Œµ :
      div_le_div_of_le_left (div_nonneg (norm_nonneg _) (norm_nonneg _)) Œµ0 he.le },
  refine squeeze_zero' (eventually_of_forall $ Œª _, norm_nonneg _) this _,
  refine (continuous_const.sub continuous_id).norm.div_const.div_const.tendsto' _ _ _,
  simp,
end

end normed_division_ring

/-- A normed field is a field with a norm satisfying ‚à•x y‚à• = ‚à•x‚à• ‚à•y‚à•. -/
class normed_field (Œ± : Type*) extends has_norm Œ±, field Œ±, metric_space Œ± :=
(dist_eq : ‚àÄ x y, dist x y = norm (x - y))
(norm_mul' : ‚àÄ a b, norm (a * b) = norm a * norm b)

/-- A nondiscrete normed field is a normed field in which there is an element of norm different from
`0` and `1`. This makes it possible to bring any element arbitrarily close to `0` by multiplication
by the powers of any element, and thus to relate algebra and topology. -/
class nondiscrete_normed_field (Œ± : Type*) extends normed_field Œ± :=
(non_trivial : ‚àÉ x : Œ±, 1 < ‚à•x‚à•)

section normed_field

variables [normed_field Œ±]

@[priority 100] -- see Note [lower instance priority]
instance normed_field.to_normed_division_ring : normed_division_ring Œ± :=
{ ..‚Äπnormed_field Œ±‚Ä∫ }

@[priority 100] -- see Note [lower instance priority]
instance normed_field.to_normed_comm_ring : normed_comm_ring Œ± :=
{ norm_mul := Œª a b, (norm_mul a b).le, ..‚Äπnormed_field Œ±‚Ä∫ }

@[simp] lemma norm_prod (s : finset Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚à•‚àè b in s, f b‚à• = ‚àè b in s, ‚à•f b‚à• :=
(norm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù).map_prod f s

@[simp] lemma nnnorm_prod (s : finset Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚à•‚àè b in s, f b‚à•‚Çä = ‚àè b in s, ‚à•f b‚à•‚Çä :=
(nnnorm_hom.to_monoid_hom : Œ± ‚Üí* ‚Ñù‚â•0).map_prod f s

end normed_field

namespace normed_field

variables (Œ±) [nondiscrete_normed_field Œ±]

lemma exists_one_lt_norm : ‚àÉx : Œ±, 1 < ‚à•x‚à• := ‚Äπnondiscrete_normed_field Œ±‚Ä∫.non_trivial

lemma exists_norm_lt_one : ‚àÉx : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < 1 :=
begin
  rcases exists_one_lt_norm Œ± with ‚ü®y, hy‚ü©,
  refine ‚ü®y‚Åª¬π, _, _‚ü©,
  { simp only [inv_eq_zero, ne.def, norm_pos_iff],
    rintro rfl,
    rw norm_zero at hy,
    exact lt_asymm zero_lt_one hy },
  { simp [inv_lt_one hy] }
end

lemma exists_lt_norm (r : ‚Ñù) : ‚àÉ x : Œ±, r < ‚à•x‚à• :=
let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± in
let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt r hw in
‚ü®w^n, by rwa norm_pow‚ü©

lemma exists_norm_lt {r : ‚Ñù} (hr : 0 < r) : ‚àÉ x : Œ±, 0 < ‚à•x‚à• ‚àß ‚à•x‚à• < r :=
let ‚ü®w, hw‚ü© := exists_one_lt_norm Œ± in
let ‚ü®n, hle, hlt‚ü© := exists_mem_Ioc_zpow hr hw in
‚ü®w^n, by { rw norm_zpow; exact zpow_pos_of_pos (lt_trans zero_lt_one hw) _},
by rwa norm_zpow‚ü©

variable {Œ±}

@[instance]
lemma punctured_nhds_ne_bot (x : Œ±) : ne_bot (ùìù[‚â†] x) :=
begin
  rw [‚Üê mem_closure_iff_nhds_within_ne_bot, metric.mem_closure_iff],
  rintros Œµ Œµ0,
  rcases exists_norm_lt Œ± Œµ0 with ‚ü®b, hb0, hbŒµ‚ü©,
  refine ‚ü®x + b, mt (set.mem_singleton_iff.trans add_right_eq_self).1 $ norm_pos_iff.1 hb0, _‚ü©,
  rwa [dist_comm, dist_eq_norm, add_sub_cancel'],
end

@[instance]
lemma nhds_within_is_unit_ne_bot : ne_bot (ùìù[{x : Œ± | is_unit x}] 0) :=
by simpa only [is_unit_iff_ne_zero] using punctured_nhds_ne_bot (0:Œ±)

end normed_field

instance : normed_field ‚Ñù :=
{ norm_mul' := abs_mul,
  .. real.normed_group }

instance : nondiscrete_normed_field ‚Ñù :=
{ non_trivial := ‚ü®2, by { unfold norm, rw abs_of_nonneg; norm_num }‚ü© }

namespace real

lemma norm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à• = x :=
abs_of_nonneg hx

lemma norm_of_nonpos {x : ‚Ñù} (hx : x ‚â§ 0) : ‚à•x‚à• = -x :=
abs_of_nonpos hx

@[simp] lemma norm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à• = n := abs_of_nonneg n.cast_nonneg

@[simp] lemma nnnorm_coe_nat (n : ‚Ñï) : ‚à•(n : ‚Ñù)‚à•‚Çä = n := nnreal.eq $ by simp

@[simp] lemma norm_two : ‚à•(2 : ‚Ñù)‚à• = 2 := abs_of_pos (@zero_lt_two ‚Ñù _ _)

@[simp] lemma nnnorm_two : ‚à•(2 : ‚Ñù)‚à•‚Çä = 2 := nnreal.eq $ by simp

lemma nnnorm_of_nonneg {x : ‚Ñù} (hx : 0 ‚â§ x) : ‚à•x‚à•‚Çä = ‚ü®x, hx‚ü© :=
nnreal.eq $ norm_of_nonneg hx

lemma ennnorm_eq_of_real {x : ‚Ñù} (hx : 0 ‚â§ x) : (‚à•x‚à•‚Çä : ‚Ñù‚â•0‚àû) = ennreal.of_real x :=
by { rw [‚Üê of_real_norm_eq_coe_nnnorm, norm_of_nonneg hx] }

lemma of_real_le_ennnorm (x : ‚Ñù) : ennreal.of_real x ‚â§ ‚à•x‚à•‚Çä :=
begin
  by_cases hx : 0 ‚â§ x,
  { rw real.ennnorm_eq_of_real hx, refl' },
  { rw [ennreal.of_real_eq_zero.2 (le_of_lt (not_le.1 hx))],
    exact bot_le }
end

/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.
This is a particular case of `module.punctured_nhds_ne_bot`. -/
instance punctured_nhds_module_ne_bot
  {E : Type*} [add_comm_group E] [topological_space E] [has_continuous_add E] [nontrivial E]
  [module ‚Ñù E] [has_continuous_smul ‚Ñù E] (x : E) :
  ne_bot (ùìù[‚â†] x) :=
module.punctured_nhds_ne_bot ‚Ñù E x

end real

namespace nnreal

open_locale nnreal

@[simp] lemma norm_eq (x : ‚Ñù‚â•0) : ‚à•(x : ‚Ñù)‚à• = x :=
by rw [real.norm_eq_abs, x.abs_eq]

@[simp] lemma nnnorm_eq (x : ‚Ñù‚â•0) : ‚à•(x : ‚Ñù)‚à•‚Çä = x :=
nnreal.eq $ real.norm_of_nonneg x.2

end nnreal

@[simp] lemma norm_norm [semi_normed_group Œ±] (x : Œ±) : ‚à•‚à•x‚à•‚à• = ‚à•x‚à• :=
real.norm_of_nonneg (norm_nonneg _)

@[simp] lemma nnnorm_norm [semi_normed_group Œ±] (a : Œ±) : ‚à•‚à•a‚à•‚à•‚Çä = ‚à•a‚à•‚Çä :=
by simpa [real.nnnorm_of_nonneg (norm_nonneg a)]

/-- A restatement of `metric_space.tendsto_at_top` in terms of the norm. -/
lemma normed_group.tendsto_at_top [nonempty Œ±] [semilattice_sup Œ±] {Œ≤ : Type*} [semi_normed_group Œ≤]
  {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
  tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí ‚à•f n - b‚à• < Œµ :=
(at_top_basis.tendsto_iff metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

/--
A variant of `normed_group.tendsto_at_top` that
uses `‚àÉ N, ‚àÄ n > N, ...` rather than `‚àÉ N, ‚àÄ n ‚â• N, ...`
-/
lemma normed_group.tendsto_at_top' [nonempty Œ±] [semilattice_sup Œ±] [no_max_order Œ±]
  {Œ≤ : Type*} [semi_normed_group Œ≤]
  {f : Œ± ‚Üí Œ≤} {b : Œ≤} :
  tendsto f at_top (ùìù b) ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ N, ‚àÄ n, N < n ‚Üí ‚à•f n - b‚à• < Œµ :=
(at_top_basis_Ioi.tendsto_iff metric.nhds_basis_ball).trans (by simp [dist_eq_norm])

instance : normed_comm_ring ‚Ñ§ :=
{ norm := Œª n, ‚à•(n : ‚Ñù)‚à•,
  norm_mul := Œª m n, le_of_eq $ by simp only [norm, int.cast_mul, abs_mul],
  dist_eq := Œª m n, by simp only [int.dist_eq, norm, int.cast_sub],
  mul_comm := mul_comm }

@[norm_cast] lemma int.norm_cast_real (m : ‚Ñ§) : ‚à•(m : ‚Ñù)‚à• = ‚à•m‚à• := rfl

lemma int.norm_eq_abs (n : ‚Ñ§) : ‚à•n‚à• = |n| := rfl

lemma nnreal.coe_nat_abs (n : ‚Ñ§) : (n.nat_abs : ‚Ñù‚â•0) = ‚à•n‚à•‚Çä :=
nnreal.eq $ calc ((n.nat_abs : ‚Ñù‚â•0) : ‚Ñù)
               = (n.nat_abs : ‚Ñ§) : by simp only [int.cast_coe_nat, nnreal.coe_nat_cast]
           ... = |n|           : by simp only [‚Üê int.abs_eq_nat_abs, int.cast_abs]
           ... = ‚à•n‚à•              : rfl

lemma int.abs_le_floor_nnreal_iff (z : ‚Ñ§) (c : ‚Ñù‚â•0) : |z| ‚â§ ‚åäc‚åã‚Çä ‚Üî ‚à•z‚à•‚Çä ‚â§ c :=
begin
  rw [int.abs_eq_nat_abs, int.coe_nat_le, nat.le_floor_iff (zero_le c)],
  congr',
  exact nnreal.coe_nat_abs z,
end

instance : norm_one_class ‚Ñ§ :=
‚ü®by simp [‚Üê int.norm_cast_real]‚ü©

instance : normed_field ‚Ñö :=
{ norm := Œª r, ‚à•(r : ‚Ñù)‚à•,
  norm_mul' := Œª r‚ÇÅ r‚ÇÇ, by simp only [norm, rat.cast_mul, abs_mul],
  dist_eq := Œª r‚ÇÅ r‚ÇÇ, by simp only [rat.dist_eq, norm, rat.cast_sub] }

instance : nondiscrete_normed_field ‚Ñö :=
{ non_trivial := ‚ü®2, by { unfold norm, rw abs_of_nonneg; norm_num }‚ü© }

@[norm_cast, simp] lemma rat.norm_cast_real (r : ‚Ñö) : ‚à•(r : ‚Ñù)‚à• = ‚à•r‚à• := rfl

@[norm_cast, simp] lemma int.norm_cast_rat (m : ‚Ñ§) : ‚à•(m : ‚Ñö)‚à• = ‚à•m‚à• :=
by rw [‚Üê rat.norm_cast_real, ‚Üê int.norm_cast_real]; congr' 1; norm_cast

-- Now that we've installed the norm on `‚Ñ§`,
-- we can state some lemmas about `nsmul` and `zsmul`.
section
variables [semi_normed_group Œ±]

lemma norm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ n * ‚à•a‚à• :=
begin
  induction n with n ih,
  { simp only [norm_zero, nat.cast_zero, zero_mul, zero_smul] },
  simp only [nat.succ_eq_add_one, add_smul, add_mul, one_mul, nat.cast_add,
    nat.cast_one, one_nsmul],
  exact norm_add_le_of_le ih le_rfl
end

lemma norm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à• ‚â§ ‚à•n‚à• * ‚à•a‚à• :=
begin
  induction n with n n,
  { simp only [int.of_nat_eq_coe, coe_nat_zsmul],
    convert norm_nsmul_le n a,
    exact nat.abs_cast n },
  { simp only [int.neg_succ_of_nat_coe, neg_smul, norm_neg, coe_nat_zsmul],
    convert norm_nsmul_le n.succ a,
    exact nat.abs_cast n.succ, }
end

lemma nnnorm_nsmul_le (n : ‚Ñï) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ n * ‚à•a‚à•‚Çä :=
by simpa only [‚Üênnreal.coe_le_coe, nnreal.coe_mul, nnreal.coe_nat_cast]
  using norm_nsmul_le n a

lemma nnnorm_zsmul_le (n : ‚Ñ§) (a : Œ±) : ‚à•n ‚Ä¢ a‚à•‚Çä ‚â§ ‚à•n‚à•‚Çä * ‚à•a‚à•‚Çä :=
by simpa only [‚Üênnreal.coe_le_coe, nnreal.coe_mul] using norm_zsmul_le n a

end

section cauchy_product

/-! ## Multiplying two infinite sums in a normed ring

In this section, we prove various results about `(‚àë' x : Œπ, f x) * (‚àë' y : Œπ', g y)` in a normed
ring. There are similar results proven in `topology/algebra/infinite_sum` (e.g `tsum_mul_tsum`),
but in a normed ring we get summability results which aren't true in general.

We first establish results about arbitrary index types, `Œ≤` and `Œ≥`, and then we specialize to
`Œ≤ = Œ≥ = ‚Ñï` to prove the Cauchy product formula
(see `tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`).

### Arbitrary index types
-/

variables {Œπ' : Type*} [normed_ring Œ±]

open finset
open_locale classical

lemma summable.mul_of_nonneg {f : Œπ ‚Üí ‚Ñù} {g : Œπ' ‚Üí ‚Ñù}
  (hf : summable f) (hg : summable g) (hf' : 0 ‚â§ f) (hg' : 0 ‚â§ g) :
  summable (Œª (x : Œπ √ó Œπ'), f x.1 * g x.2) :=
let ‚ü®s, hf‚ü© := hf in
let ‚ü®t, hg‚ü© := hg in
suffices this : ‚àÄ u : finset (Œπ √ó Œπ'), ‚àë x in u, f x.1 * g x.2 ‚â§ s*t,
  from summable_of_sum_le (Œª x, mul_nonneg (hf' _) (hg' _)) this,
assume u,
calc  ‚àë x in u, f x.1 * g x.2
    ‚â§ ‚àë x in (u.image prod.fst).product (u.image prod.snd), f x.1 * g x.2 :
      sum_mono_set_of_nonneg (Œª x, mul_nonneg (hf' _) (hg' _)) subset_product
... = ‚àë x in u.image prod.fst, ‚àë y in u.image prod.snd, f x * g y : sum_product
... = ‚àë x in u.image prod.fst, f x * ‚àë y in u.image prod.snd, g y :
      sum_congr rfl (Œª x _, mul_sum.symm)
... ‚â§ ‚àë x in u.image prod.fst, f x * t :
      sum_le_sum
        (Œª x _, mul_le_mul_of_nonneg_left (sum_le_has_sum _ (Œª _ _, hg' _) hg) (hf' _))
... = (‚àë x in u.image prod.fst, f x) * t : sum_mul.symm
... ‚â§ s * t :
      mul_le_mul_of_nonneg_right (sum_le_has_sum _ (Œª _ _, hf' _) hf) (hg.nonneg $ Œª _, hg' _)

lemma summable.mul_norm {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  summable (Œª (x : Œπ √ó Œπ'), ‚à•f x.1 * g x.2‚à•) :=
summable_of_nonneg_of_le (Œª x, norm_nonneg (f x.1 * g x.2)) (Œª x, norm_mul_le (f x.1) (g x.2))
  (hf.mul_of_nonneg hg (Œª x, norm_nonneg $ f x) (Œª x, norm_nonneg $ g x) : _)

lemma summable_mul_of_summable_norm [complete_space Œ±] {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  summable (Œª (x : Œπ √ó Œπ'), f x.1 * g x.2) :=
summable_of_summable_norm (hf.mul_norm hg)

/-- Product of two infinites sums indexed by arbitrary types.
    See also `tsum_mul_tsum` if `f` and `g` are *not* absolutely summable. -/
lemma tsum_mul_tsum_of_summable_norm [complete_space Œ±] {f : Œπ ‚Üí Œ±} {g : Œπ' ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  (‚àë' x, f x) * (‚àë' y, g y) = (‚àë' z : Œπ √ó Œπ', f z.1 * g z.2) :=
tsum_mul_tsum (summable_of_summable_norm hf) (summable_of_summable_norm hg)
  (summable_mul_of_summable_norm hf hg)

/-! ### `‚Ñï`-indexed families (Cauchy product)

We prove two versions of the Cauchy product formula. The first one is
`tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm`, where the `n`-th term is a sum over
`finset.range (n+1)` involving `nat` substraction.
In order to avoid `nat` substraction, we also provide
`tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm`,
where the `n`-th term is a sum over all pairs `(k, l)` such that `k+l=n`, which corresponds to the
`finset` `finset.nat.antidiagonal n`. -/

section nat

open finset.nat

lemma summable_norm_sum_mul_antidiagonal_of_summable_norm {f g : ‚Ñï ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  summable (Œª n, ‚à•‚àë kl in antidiagonal n, f kl.1 * g kl.2‚à•) :=
begin
  have := summable_sum_mul_antidiagonal_of_summable_mul
    (summable.mul_of_nonneg hf hg (Œª _, norm_nonneg _) (Œª _, norm_nonneg _)),
  refine summable_of_nonneg_of_le (Œª _, norm_nonneg _) _ this,
  intros n,
  calc  ‚à•‚àë kl in antidiagonal n, f kl.1 * g kl.2‚à•
      ‚â§ ‚àë kl in antidiagonal n, ‚à•f kl.1 * g kl.2‚à• : norm_sum_le _ _
  ... ‚â§ ‚àë kl in antidiagonal n, ‚à•f kl.1‚à• * ‚à•g kl.2‚à• : sum_le_sum (Œª i _, norm_mul_le _ _)
end

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.nat.antidiagonal`.
    See also `tsum_mul_tsum_eq_tsum_sum_antidiagonal` if `f` and `g` are
    *not* absolutely summable. -/
lemma tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm [complete_space Œ±] {f g : ‚Ñï ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  (‚àë' n, f n) * (‚àë' n, g n) = ‚àë' n, ‚àë kl in antidiagonal n, f kl.1 * g kl.2 :=
tsum_mul_tsum_eq_tsum_sum_antidiagonal (summable_of_summable_norm hf) (summable_of_summable_norm hg)
  (summable_mul_of_summable_norm hf hg)

lemma summable_norm_sum_mul_range_of_summable_norm {f g : ‚Ñï ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  summable (Œª n, ‚à•‚àë k in range (n+1), f k * g (n - k)‚à•) :=
begin
  simp_rw ‚Üê sum_antidiagonal_eq_sum_range_succ (Œª k l, f k * g l),
  exact summable_norm_sum_mul_antidiagonal_of_summable_norm hf hg
end

/-- The Cauchy product formula for the product of two infinite sums indexed by `‚Ñï`,
    expressed by summing on `finset.range`.
    See also `tsum_mul_tsum_eq_tsum_sum_range` if `f` and `g` are
    *not* absolutely summable. -/
lemma tsum_mul_tsum_eq_tsum_sum_range_of_summable_norm [complete_space Œ±] {f g : ‚Ñï ‚Üí Œ±}
  (hf : summable (Œª x, ‚à•f x‚à•)) (hg : summable (Œª x, ‚à•g x‚à•)) :
  (‚àë' n, f n) * (‚àë' n, g n) = ‚àë' n, ‚àë k in range (n+1), f k * g (n - k) :=
begin
  simp_rw ‚Üê sum_antidiagonal_eq_sum_range_succ (Œª k l, f k * g l),
  exact tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm hf hg
end

end nat

end cauchy_product

section ring_hom_isometric

variables {R‚ÇÅ : Type*} {R‚ÇÇ : Type*} {R‚ÇÉ : Type*}

/-- This class states that a ring homomorphism is isometric. This is a sufficient assumption
for a continuous semilinear map to be bounded and this is the main use for this typeclass. -/
class ring_hom_isometric [semiring R‚ÇÅ] [semiring R‚ÇÇ] [has_norm R‚ÇÅ] [has_norm R‚ÇÇ]
  (œÉ : R‚ÇÅ ‚Üí+* R‚ÇÇ) : Prop :=
(is_iso : ‚àÄ {x : R‚ÇÅ}, ‚à•œÉ x‚à• = ‚à•x‚à•)

attribute [simp] ring_hom_isometric.is_iso

variables [semi_normed_ring R‚ÇÅ] [semi_normed_ring R‚ÇÇ] [semi_normed_ring R‚ÇÉ]

instance ring_hom_isometric.ids : ring_hom_isometric (ring_hom.id R‚ÇÅ) :=
‚ü®Œª x, rfl‚ü©

end ring_hom_isometric
